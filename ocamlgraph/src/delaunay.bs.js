// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/array.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";

function det(param) {
  var len = param.length;
  if (len < 5) {
    switch (len) {
      case 0 :
      case 1 :
          break;
      case 2 :
          var match = param[0];
          if (match.length === 2) {
            var a00 = match[0];
            var a01 = match[1];
            var match$1 = param[1];
            if (match$1.length === 2) {
              var a10 = match$1[0];
              var a11 = match$1[1];
              return a00 * a11 - a01 * a10;
            }
            
          }
          break;
      case 3 :
          var match$2 = param[0];
          if (match$2.length === 3) {
            var a00$1 = match$2[0];
            var a01$1 = match$2[1];
            var a02 = match$2[2];
            var match$3 = param[1];
            if (match$3.length === 3) {
              var a10$1 = match$3[0];
              var a11$1 = match$3[1];
              var a12 = match$3[2];
              var match$4 = param[2];
              if (match$4.length === 3) {
                var a20 = match$4[0];
                var a21 = match$4[1];
                var a22 = match$4[2];
                return a00$1 * a11$1 * a22 - a00$1 * a12 * a21 - a10$1 * a01$1 * a22 + a10$1 * a02 * a21 + a20 * a01$1 * a12 - a20 * a02 * a11$1;
              }
              
            }
            
          }
          break;
      case 4 :
          var match$5 = param[0];
          if (match$5.length === 4) {
            var a00$2 = match$5[0];
            var a01$2 = match$5[1];
            var a02$1 = match$5[2];
            var a03 = match$5[3];
            var match$6 = param[1];
            if (match$6.length === 4) {
              var a10$2 = match$6[0];
              var a11$2 = match$6[1];
              var a12$1 = match$6[2];
              var a13 = match$6[3];
              var match$7 = param[2];
              if (match$7.length === 4) {
                var a20$1 = match$7[0];
                var a21$1 = match$7[1];
                var a22$1 = match$7[2];
                var a23 = match$7[3];
                var match$8 = param[3];
                if (match$8.length === 4) {
                  var a30 = match$8[0];
                  var a31 = match$8[1];
                  var a32 = match$8[2];
                  var a33 = match$8[3];
                  return a00$2 * a11$2 * a22$1 * a33 - a00$2 * a11$2 * a23 * a32 - a00$2 * a21$1 * a12$1 * a33 + a00$2 * a21$1 * a13 * a32 + a00$2 * a31 * a12$1 * a23 - a00$2 * a31 * a13 * a22$1 - a10$2 * a01$2 * a22$1 * a33 + a10$2 * a01$2 * a23 * a32 + a10$2 * a21$1 * a02$1 * a33 - a10$2 * a21$1 * a03 * a32 - a10$2 * a31 * a02$1 * a23 + a10$2 * a31 * a03 * a22$1 + a20$1 * a01$2 * a12$1 * a33 - a20$1 * a01$2 * a13 * a32 - a20$1 * a11$2 * a02$1 * a33 + a20$1 * a11$2 * a03 * a32 + a20$1 * a31 * a02$1 * a13 - a20$1 * a31 * a03 * a12$1 - a30 * a01$2 * a12$1 * a23 + a30 * a01$2 * a13 * a22$1 + a30 * a11$2 * a02$1 * a23 - a30 * a11$2 * a03 * a22$1 - a30 * a21$1 * a02$1 * a13 + a30 * a21$1 * a03 * a12$1;
                }
                
              }
              
            }
            
          }
          break;
      
    }
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "delaunay.ml",
          323,
          11
        ],
        Error: new Error()
      };
}

function ccw(param, param$1, param$2) {
  return det([
              [
                param[0],
                param[1],
                1.0
              ],
              [
                param$1[0],
                param$1[1],
                1.0
              ],
              [
                param$2[0],
                param$2[1],
                1.0
              ]
            ]) > 0.0;
}

function in_circle(param, param$1, param$2, param$3) {
  var yw = param$3[1];
  var xw = param$3[0];
  var yv = param$2[1];
  var xv = param$2[0];
  var yu = param$1[1];
  var xu = param$1[0];
  var yt = param[1];
  var xt = param[0];
  return det([
              [
                xt,
                yt,
                xt * xt + yt * yt,
                1.0
              ],
              [
                xu,
                yu,
                xu * xu + yu * yu,
                1.0
              ],
              [
                xv,
                yv,
                xv * xv + yv * yv,
                1.0
              ],
              [
                xw,
                yw,
                xw * xw + yw * yw,
                1.0
              ]
            ]) > 0.0;
}

var S = {
  ccw: ccw,
  in_circle: in_circle
};

var dummy_arc = {};

Caml_obj.update_dummy(dummy_arc, {
      vert: /* Infinity */0,
      next: dummy_arc,
      inst: {
        contents: {
          TAG: /* Terminal */1,
          _0: dummy_arc
        }
      },
      mate: -1
    });

function finite(p) {
  if (p) {
    return p._0;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "delaunay.ml",
          80,
          51
        ],
        Error: new Error()
      };
}

function flip(c, d, e, t$p$p, p, n, n$p) {
  var e$p = e.next;
  var c$p = c.next;
  var c$p$p = c$p.next;
  e.next = c;
  c.next = c$p$p;
  c$p$p.next = e;
  c$p$p.inst = n;
  c.inst = n;
  e.inst = n;
  c.vert = /* Point */{
    _0: p
  };
  d.next = e$p;
  e$p.next = c$p;
  c$p.next = d;
  c$p.inst = n$p;
  e$p.inst = n$p;
  d.inst = n$p;
  d.vert = /* Point */{
    _0: t$p$p
  };
  
}

function triangulate(points) {
  var ccw$1 = function (p, q, r) {
    return ccw(Caml_array.get(points, p), Caml_array.get(points, q), Caml_array.get(points, r));
  };
  var in_circle$1 = function (p, q, r, s) {
    return in_circle(Caml_array.get(points, p), Caml_array.get(points, q), Caml_array.get(points, r), Caml_array.get(points, s));
  };
  var n = points.length;
  if (n < 2) {
    Pervasives.invalid_arg("triangulate");
  }
  var arcs = $$Array.init(Math.imul(6, n) - 6 | 0, (function (param) {
          return {
                  vert: /* Infinity */0,
                  next: dummy_arc,
                  inst: {
                    contents: {
                      TAG: /* Terminal */1,
                      _0: dummy_arc
                    }
                  },
                  mate: (Math.imul(6, n) - 7 | 0) - param | 0
                };
        }));
  var a1 = Caml_array.get(arcs, 0);
  var a2 = Caml_array.get(arcs, 1);
  var a3 = Caml_array.get(arcs, 2);
  var b1 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 0 | 0);
  var b2 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 1 | 0);
  var b3 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 2 | 0);
  var l1 = {
    contents: {
      TAG: /* Terminal */1,
      _0: a2
    }
  };
  var l2 = {
    contents: {
      TAG: /* Terminal */1,
      _0: b3
    }
  };
  a1.vert = /* Point */{
    _0: 1
  };
  a1.next = a2;
  a1.inst = l1;
  a2.vert = /* Infinity */0;
  a2.next = a3;
  a2.inst = l1;
  a3.vert = /* Point */{
    _0: 0
  };
  a3.next = a1;
  a3.inst = l1;
  b1.vert = /* Point */{
    _0: 0
  };
  b1.next = b3;
  b1.inst = l2;
  b2.vert = /* Point */{
    _0: 1
  };
  b2.next = b1;
  b2.inst = l2;
  b3.vert = /* Infinity */0;
  b3.next = b2;
  b3.inst = l2;
  var l0 = {
    contents: {
      TAG: /* Branch */0,
      _0: 0,
      _1: 1,
      _2: l1,
      _3: l2
    }
  };
  var j = 2;
  for(var p = 2; p < n; ++p){
    var step_T1 = function (_l, p) {
      while(true) {
        var l = _l;
        var al = l.contents;
        if (al.TAG !== /* Branch */0) {
          return [
                  l,
                  al._0
                ];
        }
        _l = ccw$1(al._0, al._1, p) ? al._2 : al._3;
        continue ;
      };
    };
    var match = step_T1(l0, p);
    var al = match[1];
    var l = match[0];
    var b = al.next;
    var c = b.next;
    var q = al.vert;
    var r = b.vert;
    var s = c.vert;
    j = j + 3 | 0;
    var aj = Caml_array.get(arcs, j);
    var aj_1 = Caml_array.get(arcs, j - 1 | 0);
    var aj_2 = Caml_array.get(arcs, j - 2 | 0);
    var bj = Caml_array.get(arcs, aj.mate);
    var bj_1 = Caml_array.get(arcs, aj_1.mate);
    var bj_2 = Caml_array.get(arcs, aj_2.mate);
    var l$p = {
      contents: {
        TAG: /* Terminal */1,
        _0: al
      }
    };
    var l$p$p = {
      contents: {
        TAG: /* Terminal */1,
        _0: aj
      }
    };
    var l$p$p$p = {
      contents: {
        TAG: /* Terminal */1,
        _0: c
      }
    };
    aj.vert = q;
    aj.next = b;
    aj.inst = l$p$p;
    aj_1.vert = r;
    aj_1.next = c;
    aj_1.inst = l$p$p$p;
    aj_2.vert = s;
    aj_2.next = al;
    aj_2.inst = l$p;
    bj.vert = /* Point */{
      _0: p
    };
    bj.next = aj_2;
    bj.inst = l$p;
    bj_1.vert = /* Point */{
      _0: p
    };
    bj_1.next = aj;
    bj_1.inst = l$p$p;
    bj_2.vert = /* Point */{
      _0: p
    };
    bj_2.next = aj_1;
    bj_2.inst = l$p$p$p;
    al.next = bj;
    al.inst = l$p;
    b.next = bj_1;
    b.inst = l$p$p;
    c.next = bj_2;
    c.inst = l$p$p$p;
    var r$1 = finite(r);
    var s$1 = finite(s);
    var r$2;
    if (q) {
      var n$1 = {
        contents: {
          TAG: /* Branch */0,
          _0: q._0,
          _1: p,
          _2: l$p,
          _3: l$p$p
        }
      };
      var n$p = {
        contents: {
          TAG: /* Branch */0,
          _0: s$1,
          _1: p,
          _2: l$p$p$p,
          _3: l$p
        }
      };
      l.contents = {
        TAG: /* Branch */0,
        _0: r$1,
        _1: p,
        _2: n$1,
        _3: n$p
      };
      r$2 = r$1;
    } else {
      var n$2 = {
        contents: {
          TAG: /* Branch */0,
          _0: s$1,
          _1: p,
          _2: l$p$p$p,
          _3: l$p
        }
      };
      l.contents = {
        TAG: /* Branch */0,
        _0: r$1,
        _1: p,
        _2: l$p$p,
        _3: n$2
      };
      var loop = (function(p,l$p,r$1){
      return function loop(_m, _a, _d, _s, _t) {
        while(true) {
          var t = _t;
          var s = _s;
          var d = _d;
          var a = _a;
          var m = _m;
          if (t !== r$1 && ccw$1(p, s, t)) {
            var n = {
              contents: {
                TAG: /* Terminal */1,
                _0: d
              }
            };
            var match = m.contents;
            if (match.TAG === /* Branch */0) {
              if (match._3 !== l$p) {
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "delaunay.ml",
                        197,
                        16
                      ],
                      Error: new Error()
                    };
              }
              m.contents = {
                TAG: /* Branch */0,
                _0: match._0,
                _1: match._1,
                _2: match._2,
                _3: d.inst
              };
              d.inst.contents = {
                TAG: /* Branch */0,
                _0: t,
                _1: p,
                _2: n,
                _3: l$p
              };
              var m$1 = d.inst;
              flip(a, Caml_array.get(arcs, a.mate), d, t, p, n, l$p);
              var a$1 = Caml_array.get(arcs, a.mate).next;
              var d$1 = Caml_array.get(arcs, a$1.mate).next;
              var t$1 = finite(d$1.vert);
              l$p.contents = {
                TAG: /* Terminal */1,
                _0: a$1
              };
              _t = t$1;
              _s = t;
              _d = d$1;
              _a = a$1;
              _m = m$1;
              continue ;
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "delaunay.ml",
                    209,
                    16
                  ],
                  Error: new Error()
                };
          }
          var n$1 = {
            contents: {
              TAG: /* Terminal */1,
              _0: d.next
            }
          };
          d.inst.contents = {
            TAG: /* Branch */0,
            _0: s,
            _1: p,
            _2: n$1,
            _3: l$p
          };
          d.inst = n$1;
          d.next.inst = n$1;
          d.next.next.inst = n$1;
          return s;
        };
      }
      }(p,l$p,r$1));
      var d = Caml_array.get(arcs, al.mate).next;
      r$2 = loop(n$2, al, d, s$1, finite(d.vert));
    }
    var loop$1 = (function(p,r$2){
    return function loop$1(_c) {
      while(true) {
        var c = _c;
        var d = Caml_array.get(arcs, c.mate);
        var e = d.next;
        var t = finite(d.vert);
        var t$p = finite(c.vert);
        var t$p$p = e.vert;
        if (t$p$p !== /* Infinity */0 && in_circle$1(finite(t$p$p), t$p, t, p)) {
          var t$p$p$1 = finite(t$p$p);
          var n = {
            contents: {
              TAG: /* Terminal */1,
              _0: e
            }
          };
          var n$p = {
            contents: {
              TAG: /* Terminal */1,
              _0: d
            }
          };
          c.inst.contents = {
            TAG: /* Branch */0,
            _0: t$p$p$1,
            _1: p,
            _2: n,
            _3: n$p
          };
          d.inst.contents = {
            TAG: /* Branch */0,
            _0: t$p$p$1,
            _1: p,
            _2: n,
            _3: n$p
          };
          flip(c, d, e, t$p$p$1, p, n, n$p);
          _c = e;
          continue ;
        }
        if (t$p === r$2) {
          return ;
        }
        _c = Caml_array.get(arcs, c.next.mate).next;
        continue ;
      };
    }
    }(p,r$2));
    loop$1(c);
  }
  return {
          points: points,
          arcs: arcs,
          last_used_arc: j
        };
}

function iter(f, t) {
  var points = t.points;
  var n = t.arcs.length;
  for(var i = 0 ,i_finish = t.last_used_arc; i <= i_finish; ++i){
    var match = Caml_array.get(t.arcs, i).vert;
    var match$1 = Caml_array.get(t.arcs, (n - 1 | 0) - i | 0).vert;
    if (match && match$1) {
      Curry._2(f, Caml_array.get(points, match._0), Caml_array.get(points, match$1._0));
    }
    
  }
  
}

function iter_triangles(f, t) {
  var n = t.arcs.length;
  var seen_arc = Caml_array.make(n, false);
  var mate = function (i) {
    return (n - 1 | 0) - i | 0;
  };
  for(var i = 0; i < n; ++i){
    if (!Caml_array.get(seen_arc, i)) {
      var a1 = Caml_array.get(t.arcs, i);
      var a2 = a1.next;
      var a3 = a2.next;
      Caml_array.set(seen_arc, i, true);
      Caml_array.set(seen_arc, mate(a2.mate), true);
      Caml_array.set(seen_arc, mate(a3.mate), true);
      var match = a1.vert;
      var match$1 = a2.vert;
      var match$2 = a3.vert;
      if (match && match$1 && match$2) {
        Curry._3(f, Caml_array.get(t.points, match._0), Caml_array.get(t.points, match$1._0), Caml_array.get(t.points, match$2._0));
      }
      
    }
    
  }
  
}

function fold(f, t, a) {
  var points = t.points;
  var n = t.arcs.length;
  var _i = 0;
  var _a = a;
  while(true) {
    var a$1 = _a;
    var i = _i;
    if (i > t.last_used_arc) {
      return a$1;
    }
    var match = Caml_array.get(t.arcs, i).vert;
    var match$1 = Caml_array.get(t.arcs, (n - 1 | 0) - i | 0).vert;
    if (match) {
      if (match$1) {
        _a = Curry._3(f, Caml_array.get(points, match._0), Caml_array.get(points, match$1._0), a$1);
        _i = i + 1 | 0;
        continue ;
      }
      _i = i + 1 | 0;
      continue ;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function ccw$1(param, param$1, param$2) {
  return ccw([
              param[0],
              param[1]
            ], [
              param$1[0],
              param$1[1]
            ], [
              param$2[0],
              param$2[1]
            ]);
}

function in_circle$1(param, param$1, param$2, param$3) {
  return in_circle([
              param[0],
              param[1]
            ], [
              param$1[0],
              param$1[1]
            ], [
              param$2[0],
              param$2[1]
            ], [
              param$3[0],
              param$3[1]
            ]);
}

var IntPoints = {
  ccw: ccw$1,
  in_circle: in_circle$1
};

var dummy_arc$1 = {};

Caml_obj.update_dummy(dummy_arc$1, {
      vert: /* Infinity */0,
      next: dummy_arc$1,
      inst: {
        contents: {
          TAG: /* Terminal */1,
          _0: dummy_arc$1
        }
      },
      mate: -1
    });

function finite$1(p) {
  if (p) {
    return p._0;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "delaunay.ml",
          80,
          51
        ],
        Error: new Error()
      };
}

function flip$1(c, d, e, t$p$p, p, n, n$p) {
  var e$p = e.next;
  var c$p = c.next;
  var c$p$p = c$p.next;
  e.next = c;
  c.next = c$p$p;
  c$p$p.next = e;
  c$p$p.inst = n;
  c.inst = n;
  e.inst = n;
  c.vert = /* Point */{
    _0: p
  };
  d.next = e$p;
  e$p.next = c$p;
  c$p.next = d;
  c$p.inst = n$p;
  e$p.inst = n$p;
  d.inst = n$p;
  d.vert = /* Point */{
    _0: t$p$p
  };
  
}

function triangulate$1(points) {
  var ccw$2 = function (p, q, r) {
    return ccw$1(Caml_array.get(points, p), Caml_array.get(points, q), Caml_array.get(points, r));
  };
  var in_circle$2 = function (p, q, r, s) {
    return in_circle$1(Caml_array.get(points, p), Caml_array.get(points, q), Caml_array.get(points, r), Caml_array.get(points, s));
  };
  var n = points.length;
  if (n < 2) {
    Pervasives.invalid_arg("triangulate");
  }
  var arcs = $$Array.init(Math.imul(6, n) - 6 | 0, (function (param) {
          return {
                  vert: /* Infinity */0,
                  next: dummy_arc$1,
                  inst: {
                    contents: {
                      TAG: /* Terminal */1,
                      _0: dummy_arc$1
                    }
                  },
                  mate: (Math.imul(6, n) - 7 | 0) - param | 0
                };
        }));
  var a1 = Caml_array.get(arcs, 0);
  var a2 = Caml_array.get(arcs, 1);
  var a3 = Caml_array.get(arcs, 2);
  var b1 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 0 | 0);
  var b2 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 1 | 0);
  var b3 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 2 | 0);
  var l1 = {
    contents: {
      TAG: /* Terminal */1,
      _0: a2
    }
  };
  var l2 = {
    contents: {
      TAG: /* Terminal */1,
      _0: b3
    }
  };
  a1.vert = /* Point */{
    _0: 1
  };
  a1.next = a2;
  a1.inst = l1;
  a2.vert = /* Infinity */0;
  a2.next = a3;
  a2.inst = l1;
  a3.vert = /* Point */{
    _0: 0
  };
  a3.next = a1;
  a3.inst = l1;
  b1.vert = /* Point */{
    _0: 0
  };
  b1.next = b3;
  b1.inst = l2;
  b2.vert = /* Point */{
    _0: 1
  };
  b2.next = b1;
  b2.inst = l2;
  b3.vert = /* Infinity */0;
  b3.next = b2;
  b3.inst = l2;
  var l0 = {
    contents: {
      TAG: /* Branch */0,
      _0: 0,
      _1: 1,
      _2: l1,
      _3: l2
    }
  };
  var j = 2;
  for(var p = 2; p < n; ++p){
    var step_T1 = function (_l, p) {
      while(true) {
        var l = _l;
        var al = l.contents;
        if (al.TAG !== /* Branch */0) {
          return [
                  l,
                  al._0
                ];
        }
        _l = ccw$2(al._0, al._1, p) ? al._2 : al._3;
        continue ;
      };
    };
    var match = step_T1(l0, p);
    var al = match[1];
    var l = match[0];
    var b = al.next;
    var c = b.next;
    var q = al.vert;
    var r = b.vert;
    var s = c.vert;
    j = j + 3 | 0;
    var aj = Caml_array.get(arcs, j);
    var aj_1 = Caml_array.get(arcs, j - 1 | 0);
    var aj_2 = Caml_array.get(arcs, j - 2 | 0);
    var bj = Caml_array.get(arcs, aj.mate);
    var bj_1 = Caml_array.get(arcs, aj_1.mate);
    var bj_2 = Caml_array.get(arcs, aj_2.mate);
    var l$p = {
      contents: {
        TAG: /* Terminal */1,
        _0: al
      }
    };
    var l$p$p = {
      contents: {
        TAG: /* Terminal */1,
        _0: aj
      }
    };
    var l$p$p$p = {
      contents: {
        TAG: /* Terminal */1,
        _0: c
      }
    };
    aj.vert = q;
    aj.next = b;
    aj.inst = l$p$p;
    aj_1.vert = r;
    aj_1.next = c;
    aj_1.inst = l$p$p$p;
    aj_2.vert = s;
    aj_2.next = al;
    aj_2.inst = l$p;
    bj.vert = /* Point */{
      _0: p
    };
    bj.next = aj_2;
    bj.inst = l$p;
    bj_1.vert = /* Point */{
      _0: p
    };
    bj_1.next = aj;
    bj_1.inst = l$p$p;
    bj_2.vert = /* Point */{
      _0: p
    };
    bj_2.next = aj_1;
    bj_2.inst = l$p$p$p;
    al.next = bj;
    al.inst = l$p;
    b.next = bj_1;
    b.inst = l$p$p;
    c.next = bj_2;
    c.inst = l$p$p$p;
    var r$1 = finite$1(r);
    var s$1 = finite$1(s);
    var r$2;
    if (q) {
      var n$1 = {
        contents: {
          TAG: /* Branch */0,
          _0: q._0,
          _1: p,
          _2: l$p,
          _3: l$p$p
        }
      };
      var n$p = {
        contents: {
          TAG: /* Branch */0,
          _0: s$1,
          _1: p,
          _2: l$p$p$p,
          _3: l$p
        }
      };
      l.contents = {
        TAG: /* Branch */0,
        _0: r$1,
        _1: p,
        _2: n$1,
        _3: n$p
      };
      r$2 = r$1;
    } else {
      var n$2 = {
        contents: {
          TAG: /* Branch */0,
          _0: s$1,
          _1: p,
          _2: l$p$p$p,
          _3: l$p
        }
      };
      l.contents = {
        TAG: /* Branch */0,
        _0: r$1,
        _1: p,
        _2: l$p$p,
        _3: n$2
      };
      var loop = (function(p,l$p,r$1){
      return function loop(_m, _a, _d, _s, _t) {
        while(true) {
          var t = _t;
          var s = _s;
          var d = _d;
          var a = _a;
          var m = _m;
          if (t !== r$1 && ccw$2(p, s, t)) {
            var n = {
              contents: {
                TAG: /* Terminal */1,
                _0: d
              }
            };
            var match = m.contents;
            if (match.TAG === /* Branch */0) {
              if (match._3 !== l$p) {
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "delaunay.ml",
                        197,
                        16
                      ],
                      Error: new Error()
                    };
              }
              m.contents = {
                TAG: /* Branch */0,
                _0: match._0,
                _1: match._1,
                _2: match._2,
                _3: d.inst
              };
              d.inst.contents = {
                TAG: /* Branch */0,
                _0: t,
                _1: p,
                _2: n,
                _3: l$p
              };
              var m$1 = d.inst;
              flip$1(a, Caml_array.get(arcs, a.mate), d, t, p, n, l$p);
              var a$1 = Caml_array.get(arcs, a.mate).next;
              var d$1 = Caml_array.get(arcs, a$1.mate).next;
              var t$1 = finite$1(d$1.vert);
              l$p.contents = {
                TAG: /* Terminal */1,
                _0: a$1
              };
              _t = t$1;
              _s = t;
              _d = d$1;
              _a = a$1;
              _m = m$1;
              continue ;
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "delaunay.ml",
                    209,
                    16
                  ],
                  Error: new Error()
                };
          }
          var n$1 = {
            contents: {
              TAG: /* Terminal */1,
              _0: d.next
            }
          };
          d.inst.contents = {
            TAG: /* Branch */0,
            _0: s,
            _1: p,
            _2: n$1,
            _3: l$p
          };
          d.inst = n$1;
          d.next.inst = n$1;
          d.next.next.inst = n$1;
          return s;
        };
      }
      }(p,l$p,r$1));
      var d = Caml_array.get(arcs, al.mate).next;
      r$2 = loop(n$2, al, d, s$1, finite$1(d.vert));
    }
    var loop$1 = (function(p,r$2){
    return function loop$1(_c) {
      while(true) {
        var c = _c;
        var d = Caml_array.get(arcs, c.mate);
        var e = d.next;
        var t = finite$1(d.vert);
        var t$p = finite$1(c.vert);
        var t$p$p = e.vert;
        if (t$p$p !== /* Infinity */0 && in_circle$2(finite$1(t$p$p), t$p, t, p)) {
          var t$p$p$1 = finite$1(t$p$p);
          var n = {
            contents: {
              TAG: /* Terminal */1,
              _0: e
            }
          };
          var n$p = {
            contents: {
              TAG: /* Terminal */1,
              _0: d
            }
          };
          c.inst.contents = {
            TAG: /* Branch */0,
            _0: t$p$p$1,
            _1: p,
            _2: n,
            _3: n$p
          };
          d.inst.contents = {
            TAG: /* Branch */0,
            _0: t$p$p$1,
            _1: p,
            _2: n,
            _3: n$p
          };
          flip$1(c, d, e, t$p$p$1, p, n, n$p);
          _c = e;
          continue ;
        }
        if (t$p === r$2) {
          return ;
        }
        _c = Caml_array.get(arcs, c.next.mate).next;
        continue ;
      };
    }
    }(p,r$2));
    loop$1(c);
  }
  return {
          points: points,
          arcs: arcs,
          last_used_arc: j
        };
}

function iter$1(f, t) {
  var points = t.points;
  var n = t.arcs.length;
  for(var i = 0 ,i_finish = t.last_used_arc; i <= i_finish; ++i){
    var match = Caml_array.get(t.arcs, i).vert;
    var match$1 = Caml_array.get(t.arcs, (n - 1 | 0) - i | 0).vert;
    if (match && match$1) {
      Curry._2(f, Caml_array.get(points, match._0), Caml_array.get(points, match$1._0));
    }
    
  }
  
}

function iter_triangles$1(f, t) {
  var n = t.arcs.length;
  var seen_arc = Caml_array.make(n, false);
  var mate = function (i) {
    return (n - 1 | 0) - i | 0;
  };
  for(var i = 0; i < n; ++i){
    if (!Caml_array.get(seen_arc, i)) {
      var a1 = Caml_array.get(t.arcs, i);
      var a2 = a1.next;
      var a3 = a2.next;
      Caml_array.set(seen_arc, i, true);
      Caml_array.set(seen_arc, mate(a2.mate), true);
      Caml_array.set(seen_arc, mate(a3.mate), true);
      var match = a1.vert;
      var match$1 = a2.vert;
      var match$2 = a3.vert;
      if (match && match$1 && match$2) {
        Curry._3(f, Caml_array.get(t.points, match._0), Caml_array.get(t.points, match$1._0), Caml_array.get(t.points, match$2._0));
      }
      
    }
    
  }
  
}

function fold$1(f, t, a) {
  var points = t.points;
  var n = t.arcs.length;
  var _i = 0;
  var _a = a;
  while(true) {
    var a$1 = _a;
    var i = _i;
    if (i > t.last_used_arc) {
      return a$1;
    }
    var match = Caml_array.get(t.arcs, i).vert;
    var match$1 = Caml_array.get(t.arcs, (n - 1 | 0) - i | 0).vert;
    if (match) {
      if (match$1) {
        _a = Curry._3(f, Caml_array.get(points, match._0), Caml_array.get(points, match$1._0), a$1);
        _i = i + 1 | 0;
        continue ;
      }
      _i = i + 1 | 0;
      continue ;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function Make(funarg) {
  var dummy_arc = {};
  Caml_obj.update_dummy(dummy_arc, {
        vert: /* Infinity */0,
        next: dummy_arc,
        inst: {
          contents: {
            TAG: /* Terminal */1,
            _0: dummy_arc
          }
        },
        mate: -1
      });
  var finite = function (p) {
    if (p) {
      return p._0;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "delaunay.ml",
            80,
            51
          ],
          Error: new Error()
        };
  };
  var flip = function (c, d, e, t$p$p, p, n, n$p) {
    var e$p = e.next;
    var c$p = c.next;
    var c$p$p = c$p.next;
    e.next = c;
    c.next = c$p$p;
    c$p$p.next = e;
    c$p$p.inst = n;
    c.inst = n;
    e.inst = n;
    c.vert = /* Point */{
      _0: p
    };
    d.next = e$p;
    e$p.next = c$p;
    c$p.next = d;
    c$p.inst = n$p;
    e$p.inst = n$p;
    d.inst = n$p;
    d.vert = /* Point */{
      _0: t$p$p
    };
    
  };
  var triangulate = function (points) {
    var ccw = function (p, q, r) {
      return Curry._3(funarg.ccw, Caml_array.get(points, p), Caml_array.get(points, q), Caml_array.get(points, r));
    };
    var in_circle = function (p, q, r, s) {
      return Curry._4(funarg.in_circle, Caml_array.get(points, p), Caml_array.get(points, q), Caml_array.get(points, r), Caml_array.get(points, s));
    };
    var n = points.length;
    if (n < 2) {
      Pervasives.invalid_arg("triangulate");
    }
    var arcs = $$Array.init(Math.imul(6, n) - 6 | 0, (function (param) {
            return {
                    vert: /* Infinity */0,
                    next: dummy_arc,
                    inst: {
                      contents: {
                        TAG: /* Terminal */1,
                        _0: dummy_arc
                      }
                    },
                    mate: (Math.imul(6, n) - 7 | 0) - param | 0
                  };
          }));
    var a1 = Caml_array.get(arcs, 0);
    var a2 = Caml_array.get(arcs, 1);
    var a3 = Caml_array.get(arcs, 2);
    var b1 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 0 | 0);
    var b2 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 1 | 0);
    var b3 = Caml_array.get(arcs, (Math.imul(6, n) - 7 | 0) - 2 | 0);
    var l1 = {
      contents: {
        TAG: /* Terminal */1,
        _0: a2
      }
    };
    var l2 = {
      contents: {
        TAG: /* Terminal */1,
        _0: b3
      }
    };
    a1.vert = /* Point */{
      _0: 1
    };
    a1.next = a2;
    a1.inst = l1;
    a2.vert = /* Infinity */0;
    a2.next = a3;
    a2.inst = l1;
    a3.vert = /* Point */{
      _0: 0
    };
    a3.next = a1;
    a3.inst = l1;
    b1.vert = /* Point */{
      _0: 0
    };
    b1.next = b3;
    b1.inst = l2;
    b2.vert = /* Point */{
      _0: 1
    };
    b2.next = b1;
    b2.inst = l2;
    b3.vert = /* Infinity */0;
    b3.next = b2;
    b3.inst = l2;
    var l0 = {
      contents: {
        TAG: /* Branch */0,
        _0: 0,
        _1: 1,
        _2: l1,
        _3: l2
      }
    };
    var j = 2;
    for(var p = 2; p < n; ++p){
      var step_T1 = function (_l, p) {
        while(true) {
          var l = _l;
          var al = l.contents;
          if (al.TAG !== /* Branch */0) {
            return [
                    l,
                    al._0
                  ];
          }
          _l = ccw(al._0, al._1, p) ? al._2 : al._3;
          continue ;
        };
      };
      var match = step_T1(l0, p);
      var al = match[1];
      var l = match[0];
      var b = al.next;
      var c = b.next;
      var q = al.vert;
      var r = b.vert;
      var s = c.vert;
      j = j + 3 | 0;
      var aj = Caml_array.get(arcs, j);
      var aj_1 = Caml_array.get(arcs, j - 1 | 0);
      var aj_2 = Caml_array.get(arcs, j - 2 | 0);
      var bj = Caml_array.get(arcs, aj.mate);
      var bj_1 = Caml_array.get(arcs, aj_1.mate);
      var bj_2 = Caml_array.get(arcs, aj_2.mate);
      var l$p = {
        contents: {
          TAG: /* Terminal */1,
          _0: al
        }
      };
      var l$p$p = {
        contents: {
          TAG: /* Terminal */1,
          _0: aj
        }
      };
      var l$p$p$p = {
        contents: {
          TAG: /* Terminal */1,
          _0: c
        }
      };
      aj.vert = q;
      aj.next = b;
      aj.inst = l$p$p;
      aj_1.vert = r;
      aj_1.next = c;
      aj_1.inst = l$p$p$p;
      aj_2.vert = s;
      aj_2.next = al;
      aj_2.inst = l$p;
      bj.vert = /* Point */{
        _0: p
      };
      bj.next = aj_2;
      bj.inst = l$p;
      bj_1.vert = /* Point */{
        _0: p
      };
      bj_1.next = aj;
      bj_1.inst = l$p$p;
      bj_2.vert = /* Point */{
        _0: p
      };
      bj_2.next = aj_1;
      bj_2.inst = l$p$p$p;
      al.next = bj;
      al.inst = l$p;
      b.next = bj_1;
      b.inst = l$p$p;
      c.next = bj_2;
      c.inst = l$p$p$p;
      var r$1 = finite(r);
      var s$1 = finite(s);
      var r$2;
      if (q) {
        var n$1 = {
          contents: {
            TAG: /* Branch */0,
            _0: q._0,
            _1: p,
            _2: l$p,
            _3: l$p$p
          }
        };
        var n$p = {
          contents: {
            TAG: /* Branch */0,
            _0: s$1,
            _1: p,
            _2: l$p$p$p,
            _3: l$p
          }
        };
        l.contents = {
          TAG: /* Branch */0,
          _0: r$1,
          _1: p,
          _2: n$1,
          _3: n$p
        };
        r$2 = r$1;
      } else {
        var n$2 = {
          contents: {
            TAG: /* Branch */0,
            _0: s$1,
            _1: p,
            _2: l$p$p$p,
            _3: l$p
          }
        };
        l.contents = {
          TAG: /* Branch */0,
          _0: r$1,
          _1: p,
          _2: l$p$p,
          _3: n$2
        };
        var loop = (function(p,l$p,r$1){
        return function loop(_m, _a, _d, _s, _t) {
          while(true) {
            var t = _t;
            var s = _s;
            var d = _d;
            var a = _a;
            var m = _m;
            if (t !== r$1 && ccw(p, s, t)) {
              var n = {
                contents: {
                  TAG: /* Terminal */1,
                  _0: d
                }
              };
              var match = m.contents;
              if (match.TAG === /* Branch */0) {
                if (match._3 !== l$p) {
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "delaunay.ml",
                          197,
                          16
                        ],
                        Error: new Error()
                      };
                }
                m.contents = {
                  TAG: /* Branch */0,
                  _0: match._0,
                  _1: match._1,
                  _2: match._2,
                  _3: d.inst
                };
                d.inst.contents = {
                  TAG: /* Branch */0,
                  _0: t,
                  _1: p,
                  _2: n,
                  _3: l$p
                };
                var m$1 = d.inst;
                flip(a, Caml_array.get(arcs, a.mate), d, t, p, n, l$p);
                var a$1 = Caml_array.get(arcs, a.mate).next;
                var d$1 = Caml_array.get(arcs, a$1.mate).next;
                var t$1 = finite(d$1.vert);
                l$p.contents = {
                  TAG: /* Terminal */1,
                  _0: a$1
                };
                _t = t$1;
                _s = t;
                _d = d$1;
                _a = a$1;
                _m = m$1;
                continue ;
              }
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "delaunay.ml",
                      209,
                      16
                    ],
                    Error: new Error()
                  };
            }
            var n$1 = {
              contents: {
                TAG: /* Terminal */1,
                _0: d.next
              }
            };
            d.inst.contents = {
              TAG: /* Branch */0,
              _0: s,
              _1: p,
              _2: n$1,
              _3: l$p
            };
            d.inst = n$1;
            d.next.inst = n$1;
            d.next.next.inst = n$1;
            return s;
          };
        }
        }(p,l$p,r$1));
        var d = Caml_array.get(arcs, al.mate).next;
        r$2 = loop(n$2, al, d, s$1, finite(d.vert));
      }
      var loop$1 = (function(p,r$2){
      return function loop$1(_c) {
        while(true) {
          var c = _c;
          var d = Caml_array.get(arcs, c.mate);
          var e = d.next;
          var t = finite(d.vert);
          var t$p = finite(c.vert);
          var t$p$p = e.vert;
          if (t$p$p !== /* Infinity */0 && in_circle(finite(t$p$p), t$p, t, p)) {
            var t$p$p$1 = finite(t$p$p);
            var n = {
              contents: {
                TAG: /* Terminal */1,
                _0: e
              }
            };
            var n$p = {
              contents: {
                TAG: /* Terminal */1,
                _0: d
              }
            };
            c.inst.contents = {
              TAG: /* Branch */0,
              _0: t$p$p$1,
              _1: p,
              _2: n,
              _3: n$p
            };
            d.inst.contents = {
              TAG: /* Branch */0,
              _0: t$p$p$1,
              _1: p,
              _2: n,
              _3: n$p
            };
            flip(c, d, e, t$p$p$1, p, n, n$p);
            _c = e;
            continue ;
          }
          if (t$p === r$2) {
            return ;
          }
          _c = Caml_array.get(arcs, c.next.mate).next;
          continue ;
        };
      }
      }(p,r$2));
      loop$1(c);
    }
    return {
            points: points,
            arcs: arcs,
            last_used_arc: j
          };
  };
  var iter = function (f, t) {
    var points = t.points;
    var n = t.arcs.length;
    for(var i = 0 ,i_finish = t.last_used_arc; i <= i_finish; ++i){
      var match = Caml_array.get(t.arcs, i).vert;
      var match$1 = Caml_array.get(t.arcs, (n - 1 | 0) - i | 0).vert;
      if (match && match$1) {
        Curry._2(f, Caml_array.get(points, match._0), Caml_array.get(points, match$1._0));
      }
      
    }
    
  };
  var iter_triangles = function (f, t) {
    var n = t.arcs.length;
    var seen_arc = Caml_array.make(n, false);
    var mate = function (i) {
      return (n - 1 | 0) - i | 0;
    };
    for(var i = 0; i < n; ++i){
      if (!Caml_array.get(seen_arc, i)) {
        var a1 = Caml_array.get(t.arcs, i);
        var a2 = a1.next;
        var a3 = a2.next;
        Caml_array.set(seen_arc, i, true);
        Caml_array.set(seen_arc, mate(a2.mate), true);
        Caml_array.set(seen_arc, mate(a3.mate), true);
        var match = a1.vert;
        var match$1 = a2.vert;
        var match$2 = a3.vert;
        if (match && match$1 && match$2) {
          Curry._3(f, Caml_array.get(t.points, match._0), Caml_array.get(t.points, match$1._0), Caml_array.get(t.points, match$2._0));
        }
        
      }
      
    }
    
  };
  var fold = function (f, t, a) {
    var points = t.points;
    var n = t.arcs.length;
    var _i = 0;
    var _a = a;
    while(true) {
      var a$1 = _a;
      var i = _i;
      if (i > t.last_used_arc) {
        return a$1;
      }
      var match = Caml_array.get(t.arcs, i).vert;
      var match$1 = Caml_array.get(t.arcs, (n - 1 | 0) - i | 0).vert;
      if (match) {
        if (match$1) {
          _a = Curry._3(f, Caml_array.get(points, match._0), Caml_array.get(points, match$1._0), a$1);
          _i = i + 1 | 0;
          continue ;
        }
        _i = i + 1 | 0;
        continue ;
      }
      _i = i + 1 | 0;
      continue ;
    };
  };
  return {
          S: funarg,
          triangulate: triangulate,
          iter: iter,
          fold: fold,
          iter_triangles: iter_triangles
        };
}

var Int = {
  S: IntPoints,
  triangulate: triangulate$1,
  iter: iter$1,
  fold: fold$1,
  iter_triangles: iter_triangles$1
};

var FloatPoints = {
  ccw: ccw,
  in_circle: in_circle
};

var Float = {
  S: S,
  triangulate: triangulate,
  iter: iter,
  fold: fold,
  iter_triangles: iter_triangles
};

export {
  Make ,
  IntPoints ,
  Int ,
  FloatPoints ,
  Float ,
  
}
/* No side effect */
