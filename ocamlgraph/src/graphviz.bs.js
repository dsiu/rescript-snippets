// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Map from "../../node_modules/rescript/lib/es6/map.js";
import * as Sys from "../../node_modules/rescript/lib/es6/sys.js";
import * as List from "../../node_modules/rescript/lib/es6/list.js";
import * as Curry from "../../node_modules/rescript/lib/es6/curry.js";
import * as Format from "../../node_modules/rescript/lib/es6/format.js";
import * as Printf from "../../node_modules/rescript/lib/es6/printf.js";
import * as $$String from "../../node_modules/rescript/lib/es6/string.js";
import * as Caml_obj from "../../node_modules/rescript/lib/es6/caml_obj.js";
import * as Caml_array from "../../node_modules/rescript/lib/es6/caml_array.js";
import * as Pervasives from "../../node_modules/rescript/lib/es6/pervasives.js";
import * as Caml_exceptions from "../../node_modules/rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "../../node_modules/rescript/lib/es6/caml_js_exceptions.js";

function color_to_color_with_transparency(color) {
  return (color << 8) + 255 | 0;
}

function fprint_color(ppf, color) {
  return Curry._1(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "\"#",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_X */8,
                      _1: {
                        TAG: /* Lit_padding */0,
                        _0: /* Zeros */2,
                        _1: 6
                      },
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Char_literal */12,
                        _0: /* '"' */34,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "\"#%06X\""
                }), color);
}

function fprint_color_with_transparency(ppf, color) {
  return Curry._1(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "\"#",
                    _1: {
                      TAG: /* Int32 */5,
                      _0: /* Int_X */8,
                      _1: {
                        TAG: /* Lit_padding */0,
                        _0: /* Zeros */2,
                        _1: 8
                      },
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Char_literal */12,
                        _0: /* '"' */34,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "\"#%08lX\""
                }), color);
}

function fprint_string(ppf, s) {
  return Curry._1(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* '"' */34,
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* '"' */34,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "\"%s\""
                }), s);
}

function fprint_string_user(ppf, s) {
  return Curry._1(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* '"' */34,
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* '"' */34,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "\"%s\""
                }), s);
}

function fprint_htmlstring_user(ppf, s) {
  return Curry._1(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* '<' */60,
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* '>' */62,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "<%s>"
                }), s);
}

function fprint_square_not_empty(printer, ppf, l) {
  if (l) {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: " [",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: {
                          TAG: /* Char_literal */12,
                          _0: /* ']' */93,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: " [%a]"
                  }), printer, l);
  }
  
}

function fprint_arrow_style(ppf, param) {
  if (param === "Normal") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "normal",
                  _1: /* End_of_format */0
                },
                _1: "normal"
              });
  } else if (param === "Dot") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "dot",
                  _1: /* End_of_format */0
                },
                _1: "dot"
              });
  } else if (param === "Inv") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "inv",
                  _1: /* End_of_format */0
                },
                _1: "inv"
              });
  } else if (param === "Invodot") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "invodot",
                  _1: /* End_of_format */0
                },
                _1: "invodot"
              });
  } else if (param === "None") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "none",
                  _1: /* End_of_format */0
                },
                _1: "none"
              });
  } else if (param === "Odot") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "odot",
                  _1: /* End_of_format */0
                },
                _1: "odot"
              });
  } else {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "invdot",
                  _1: /* End_of_format */0
                },
                _1: "invdot"
              });
  }
}

function fprint_dir(ppf, param) {
  if (param === "LeftToRight") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "LR",
                  _1: /* End_of_format */0
                },
                _1: "LR"
              });
  } else {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "TB",
                  _1: /* End_of_format */0
                },
                _1: "TB"
              });
  }
}

function fprint_symbseq(ppf, param) {
  if (param) {
    return Format.pp_print_string(ppf, ";");
  } else {
    return Format.pp_print_string(ppf, ",");
  }
}

function fprint_orientation(ppf, param) {
  if (param === "Landscape") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "landscape",
                  _1: /* End_of_format */0
                },
                _1: "landscape"
              });
  } else {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "portrait",
                  _1: /* End_of_format */0
                },
                _1: "portrait"
              });
  }
}

function fprint_graph(ppf, param) {
  if (typeof param !== "object") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "ordering=out",
                  _1: /* End_of_format */0
                },
                _1: "ordering=out"
              });
  }
  var variant = param.NAME;
  if (variant === "Orientation") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "orientation=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "orientation=%a"
                  }), fprint_orientation, param.VAL);
  }
  if (variant === "Label") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "label=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "label=%a"
                  }), fprint_string_user, param.VAL);
  }
  if (variant === "Fontcolor") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fontcolor=%a"
                  }), fprint_color, param.VAL);
  }
  if (variant === "HtmlLabel") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "label=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "label=%a"
                  }), fprint_htmlstring_user, param.VAL);
  }
  if (variant === "Page") {
    var match = param.VAL;
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "page=\"",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: {
                          TAG: /* Char_literal */12,
                          _0: /* ',' */44,
                          _1: {
                            TAG: /* Float */8,
                            _0: /* Float_f */0,
                            _1: /* No_padding */0,
                            _2: /* No_precision */0,
                            _3: {
                              TAG: /* Char_literal */12,
                              _0: /* '"' */34,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    },
                    _1: "page=\"%f,%f\""
                  }), match[0], match[1]);
  }
  if (variant !== "Size") {
    if (variant === "Fontname") {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "fontname=",
                        _1: {
                          TAG: /* Alpha */15,
                          _0: /* End_of_format */0
                        }
                      },
                      _1: "fontname=%a"
                    }), fprint_string, param.VAL);
    } else if (variant === "Center") {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "center=",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_i */3,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: /* End_of_format */0
                        }
                      },
                      _1: "center=%i"
                    }), param.VAL ? 1 : 0);
    } else if (variant === "Fontsize") {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "fontsize=",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_i */3,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: /* End_of_format */0
                        }
                      },
                      _1: "fontsize=%i"
                    }), param.VAL);
    } else {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "pagedir=",
                        _1: {
                          TAG: /* Alpha */15,
                          _0: /* End_of_format */0
                        }
                      },
                      _1: "pagedir=%a"
                    }), fprint_dir, param.VAL);
    }
  }
  var match$1 = param.VAL;
  return Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "size=\"",
                    _1: {
                      TAG: /* Float */8,
                      _0: /* Float_f */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Char_literal */12,
                        _0: /* ',' */44,
                        _1: {
                          TAG: /* Float */8,
                          _0: /* Float_f */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* '"' */34,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "size=\"%f,%f\""
                }), match$1[0], match$1[1]);
}

function fprint_shape(ppf, param) {
  if (typeof param !== "object") {
    if (param === "Ribosite") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "ribosite",
                    _1: /* End_of_format */0
                  },
                  _1: "ribosite"
                });
    } else if (param === "Box3d") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "box3d",
                    _1: /* End_of_format */0
                  },
                  _1: "box3d"
                });
    } else if (param === "Proteinstab") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "proteinstab",
                    _1: /* End_of_format */0
                  },
                  _1: "proteinstab"
                });
    } else if (param === "Invtrapezium") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "invtrapezium",
                    _1: /* End_of_format */0
                  },
                  _1: "invtrapezium"
                });
    } else if (param === "Promoter") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "promoter",
                    _1: /* End_of_format */0
                  },
                  _1: "promoter"
                });
    } else if (param === "Mcircle") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "mcircle",
                    _1: /* End_of_format */0
                  },
                  _1: "mcircle"
                });
    } else if (param === "Parallelogram") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "parallelogram",
                    _1: /* End_of_format */0
                  },
                  _1: "parallelogram"
                });
    } else if (param === "Ellipse") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "ellipse",
                    _1: /* End_of_format */0
                  },
                  _1: "ellipse"
                });
    } else if (param === "Doublecircle") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "doublecircle",
                    _1: /* End_of_format */0
                  },
                  _1: "doublecircle"
                });
    } else if (param === "Fivepoverhang") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "fivepoverhang",
                    _1: /* End_of_format */0
                  },
                  _1: "fivepoverhang"
                });
    } else if (param === "Msquare") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: " msquare",
                    _1: /* End_of_format */0
                  },
                  _1: " msquare"
                });
    } else if (param === "Tripleoctagon") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "tripleoctagon",
                    _1: /* End_of_format */0
                  },
                  _1: "tripleoctagon"
                });
    } else if (param === "Triangle") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "triangle",
                    _1: /* End_of_format */0
                  },
                  _1: "triangle"
                });
    } else if (param === "Plaintext") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "plaintext",
                    _1: /* End_of_format */0
                  },
                  _1: "plaintext"
                });
    } else if (param === "Rarrow") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "rarrow",
                    _1: /* End_of_format */0
                  },
                  _1: "rarrow"
                });
    } else if (param === "Rnastab") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "rnastab",
                    _1: /* End_of_format */0
                  },
                  _1: "rnastab"
                });
    } else if (param === "Restrictionsite") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "restrictionsite",
                    _1: /* End_of_format */0
                  },
                  _1: "restrictionsite"
                });
    } else if (param === "Box") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "box",
                    _1: /* End_of_format */0
                  },
                  _1: "box"
                });
    } else if (param === "Cds") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "cds",
                    _1: /* End_of_format */0
                  },
                  _1: "cds"
                });
    } else if (param === "Egg") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "egg",
                    _1: /* End_of_format */0
                  },
                  _1: "egg"
                });
    } else if (param === "Tab") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "tab",
                    _1: /* End_of_format */0
                  },
                  _1: "tab"
                });
    } else if (param === "Utr") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "utr",
                    _1: /* End_of_format */0
                  },
                  _1: "utr"
                });
    } else if (param === "Primersite") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "primersite",
                    _1: /* End_of_format */0
                  },
                  _1: "primersite"
                });
    } else if (param === "Invhouse") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "invhouse",
                    _1: /* End_of_format */0
                  },
                  _1: "invhouse"
                });
    } else if (param === "Noverhang") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "noverhang",
                    _1: /* End_of_format */0
                  },
                  _1: "noverhang"
                });
    } else if (param === "Larrow") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "larrow",
                    _1: /* End_of_format */0
                  },
                  _1: "larrow"
                });
    } else if (param === "Rpromoter") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "rpromoter",
                    _1: /* End_of_format */0
                  },
                  _1: "rpromoter"
                });
    } else if (param === "Circle") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "circle",
                    _1: /* End_of_format */0
                  },
                  _1: "circle"
                });
    } else if (param === "Mdiamond") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "mdiamond",
                    _1: /* End_of_format */0
                  },
                  _1: "mdiamond"
                });
    } else if (param === "Terminator") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "terminator",
                    _1: /* End_of_format */0
                  },
                  _1: "terminator"
                });
    } else if (param === "Lpromoter") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "lpromoter",
                    _1: /* End_of_format */0
                  },
                  _1: "lpromoter"
                });
    } else if (param === "Assembly") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "assembly",
                    _1: /* End_of_format */0
                  },
                  _1: "assembly"
                });
    } else if (param === "Insulator") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "insulator",
                    _1: /* End_of_format */0
                  },
                  _1: "insulator"
                });
    } else if (param === "Proteasesite") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "proteasesite",
                    _1: /* End_of_format */0
                  },
                  _1: "proteasesite"
                });
    } else if (param === "Invtriangle") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "invtriangle",
                    _1: /* End_of_format */0
                  },
                  _1: "invtriangle"
                });
    } else if (param === "Diamond") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "diamond",
                    _1: /* End_of_format */0
                  },
                  _1: "diamond"
                });
    } else if (param === "Underline") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "underline",
                    _1: /* End_of_format */0
                  },
                  _1: "underline"
                });
    } else if (param === "Folder") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "folder",
                    _1: /* End_of_format */0
                  },
                  _1: "folder"
                });
    } else if (param === "Component") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "component",
                    _1: /* End_of_format */0
                  },
                  _1: "component"
                });
    } else if (param === "Trapezium") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "trapezium",
                    _1: /* End_of_format */0
                  },
                  _1: "trapezium"
                });
    } else if (param === "Record") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "record",
                    _1: /* End_of_format */0
                  },
                  _1: "record"
                });
    } else if (param === "Note") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "note",
                    _1: /* End_of_format */0
                  },
                  _1: "note"
                });
    } else if (param === "Oval") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "oval",
                    _1: /* End_of_format */0
                  },
                  _1: "oval"
                });
    } else if (param === "Star") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "star",
                    _1: /* End_of_format */0
                  },
                  _1: "star"
                });
    } else if (param === "Signature") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "signature",
                    _1: /* End_of_format */0
                  },
                  _1: "signature"
                });
    } else if (param === "House") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "house",
                    _1: /* End_of_format */0
                  },
                  _1: "house"
                });
    } else if (param === "Threepoverhang") {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "threepoverhang",
                    _1: /* End_of_format */0
                  },
                  _1: "threepoverhang"
                });
    } else {
      return Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "doubleoctagon",
                    _1: /* End_of_format */0
                  },
                  _1: "doubleoctagon"
                });
    }
  }
  var match = param.VAL;
  return Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "polygon, sides=",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_i */3,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* String_literal */11,
                        _0: ", skew=",
                        _1: {
                          TAG: /* Float */8,
                          _0: /* Float_f */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "polygon, sides=%i, skew=%f"
                }), match[0], match[1]);
}

function fprint_string_list(ppf, param) {
  if (!param) {
    return ;
  }
  var tl = param.tl;
  var hd = param.hd;
  if (tl) {
    return Curry._3(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* ',' */44,
                        _1: {
                          TAG: /* Alpha */15,
                          _0: /* End_of_format */0
                        }
                      }
                    },
                    _1: "%s,%a"
                  }), hd, fprint_string_list, tl);
  } else {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: /* End_of_format */0
                    },
                    _1: "%s"
                  }), hd);
  }
}

function node_style_str(param) {
  if (param === "Dashed") {
    return "dashed";
  } else if (param === "Rounded") {
    return "rounded";
  } else if (param === "Dotted") {
    return "dotted";
  } else if (param === "Solid") {
    return "solid";
  } else if (param === "Bold") {
    return "bold";
  } else if (param === "Filled") {
    return "filled";
  } else {
    return "invis";
  }
}

function fprint_style_list(sep, ppf, a) {
  return Curry._4(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "style=\"",
                    _1: {
                      TAG: /* Alpha */15,
                      _0: {
                        TAG: /* Char_literal */12,
                        _0: /* '"' */34,
                        _1: {
                          TAG: /* Alpha */15,
                          _0: {
                            TAG: /* Formatting_lit */17,
                            _0: {
                              TAG: /* Break */0,
                              _0: "@ ",
                              _1: 1,
                              _2: 0
                            },
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "style=\"%a\"%a@ "
                }), fprint_string_list, List.map(node_style_str, a), fprint_symbseq, sep);
}

function fprint_vertex(ppf, param) {
  var variant = param.NAME;
  if (variant === "Regular") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "regular=",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "regular=%b"
                  }), param.VAL);
  }
  if (variant === "Color") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "color=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "color=%a"
                  }), fprint_color, param.VAL);
  }
  if (variant === "Width") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "width=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "width=%f"
                  }), param.VAL);
  }
  if (variant === "Orientation") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "orientation=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "orientation=%f"
                  }), param.VAL);
  }
  if (variant === "Label") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "label=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "label=%a"
                  }), fprint_string_user, param.VAL);
  }
  if (variant === "Fontcolor") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fontcolor=%a"
                  }), fprint_color, param.VAL);
  }
  if (variant === "Penwidth") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "penwidth=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "penwidth=%f"
                  }), param.VAL);
  }
  if (variant === "Shape") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "shape=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "shape=%a"
                  }), fprint_shape, param.VAL);
  }
  if (variant === "Style") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "graphviz.ml",
            353,
            18
          ],
          Error: new Error()
        };
  }
  if (variant === "HtmlLabel") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "label=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "label=%a"
                  }), fprint_htmlstring_user, param.VAL);
  } else if (variant === "ColorWithTransparency") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "color=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "color=%a"
                  }), fprint_color_with_transparency, param.VAL);
  } else if (variant === "Height") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "height=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "height=%f"
                  }), param.VAL);
  } else if (variant === "Fontname") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontname=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fontname=%a"
                  }), fprint_string, param.VAL);
  } else if (variant === "Fontsize") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontsize=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "fontsize=%i"
                  }), param.VAL);
  } else {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "peripheries=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "peripheries=%i"
                  }), param.VAL);
  }
}

function fprint_arrow_direction(ppf, param) {
  if (param === "Both") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "both",
                  _1: /* End_of_format */0
                },
                _1: "both"
              });
  } else if (param === "Forward") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "forward",
                  _1: /* End_of_format */0
                },
                _1: "forward"
              });
  } else if (param === "None") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "none",
                  _1: /* End_of_format */0
                },
                _1: "none"
              });
  } else {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "back",
                  _1: /* End_of_format */0
                },
                _1: "back"
              });
  }
}

function fprint_edge(ppf, param) {
  var variant = param.NAME;
  if (variant === "Decorate") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "decorate=",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "decorate=%b"
                  }), param.VAL);
  }
  if (variant === "Dir") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "dir=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "dir=%a"
                  }), fprint_arrow_direction, param.VAL);
  }
  if (variant === "Label") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "label=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "label=%a"
                  }), fprint_string_user, param.VAL);
  }
  if (variant === "Fontcolor") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fontcolor=%a"
                  }), fprint_color, param.VAL);
  }
  if (variant === "Penwidth") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "penwidth=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "penwidth=%f"
                  }), param.VAL);
  }
  if (variant === "Style") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "graphviz.ml",
            378,
            18
          ],
          Error: new Error()
        };
  }
  if (variant === "HtmlLabel") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "label=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "label=%a"
                  }), fprint_htmlstring_user, param.VAL);
  } else if (variant === "Labelfontname") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "labelfontname=\"",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Char_literal */12,
                          _0: /* '"' */34,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "labelfontname=\"%s\""
                  }), param.VAL);
  } else if (variant === "ColorWithTransparency") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "color=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "color=%a"
                  }), fprint_color_with_transparency, param.VAL);
  } else if (variant === "Labelfontsize") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "labelfontsize=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "labelfontsize=%i"
                  }), param.VAL);
  } else if (variant === "Fontname") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontname=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fontname=%a"
                  }), fprint_string, param.VAL);
  } else if (variant === "Fontsize") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontsize=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "fontsize=%i"
                  }), param.VAL);
  } else if (variant === "Labelfontcolor") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "labelfontcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "labelfontcolor=%a"
                  }), fprint_color, param.VAL);
  } else {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "color=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "color=%a"
                  }), fprint_color, param.VAL);
  }
}

function filter_style(_al, _sl, _l) {
  while(true) {
    var l = _l;
    var sl = _sl;
    var al = _al;
    if (!l) {
      return [
              al,
              sl
            ];
    }
    var a = l.hd;
    if (typeof a === "object" && a.NAME === "Style") {
      _l = l.tl;
      _sl = {
        hd: a.VAL,
        tl: sl
      };
      continue ;
    }
    _l = l.tl;
    _al = {
      hd: a,
      tl: al
    };
    continue ;
  };
}

function fprint_attributes(fprint_style_list, fprint_attribute, sep, ppf, list) {
  if (list === /* [] */0) {
    return ;
  }
  var match = filter_style(/* [] */0, /* [] */0, list);
  var styles = match[1];
  var fprint_attributes_rec = function (ppf, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      Curry._4(Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Alpha */15,
                    _0: {
                      TAG: /* Formatting_lit */17,
                      _0: {
                        TAG: /* Break */0,
                        _0: "@ ",
                        _1: 1,
                        _2: 0
                      },
                      _1: /* End_of_format */0
                    }
                  }
                },
                _1: "%a%a@ "
              }), fprint_attribute, param.hd, fprint_symbseq, sep);
      _param = param.tl;
      continue ;
    };
  };
  Curry._2(Format.fprintf(ppf, /* Format */{
            _0: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<hov>",
                    _1: /* End_of_format */0
                  },
                  _1: "<hov>"
                }
              },
              _1: {
                TAG: /* Alpha */15,
                _0: /* End_of_format */0
              }
            },
            _1: "@[<hov>%a"
          }), fprint_attributes_rec, match[0]);
  if (styles !== /* [] */0) {
    Curry._3(fprint_style_list, sep, ppf, styles);
  }
  return Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Formatting_lit */17,
                _0: /* Close_box */0,
                _1: /* End_of_format */0
              },
              _1: "@]"
            });
}

function fprint_string_list$1(ppf, param) {
  if (!param) {
    return ;
  }
  var tl = param.tl;
  var hd = param.hd;
  if (tl) {
    return Curry._3(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* Char_literal */12,
                        _0: /* ',' */44,
                        _1: {
                          TAG: /* Alpha */15,
                          _0: /* End_of_format */0
                        }
                      }
                    },
                    _1: "%s,%a"
                  }), hd, fprint_string_list$1, tl);
  } else {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: /* End_of_format */0
                    },
                    _1: "%s"
                  }), hd);
  }
}

function fprint_ratio(ppf, param) {
  if (typeof param === "object") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* Float */8,
                      _0: /* Float_f */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: /* End_of_format */0
                    },
                    _1: "%f"
                  }), param.VAL);
  } else if (param === "Auto") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "auto",
                  _1: /* End_of_format */0
                },
                _1: "auto"
              });
  } else if (param === "Fill") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "fill",
                  _1: /* End_of_format */0
                },
                _1: "fill"
              });
  } else {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "compress",
                  _1: /* End_of_format */0
                },
                _1: "compress"
              });
  }
}

function fprint_graph$1(ppf, att) {
  if (typeof att !== "object") {
    return fprint_graph(ppf, att);
  }
  var variant = att.NAME;
  if (variant === "Samplepoints") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "samplepoints=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "samplepoints=%i"
                  }), att.VAL);
  } else if (variant === "Concentrate") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "concentrate=",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "concentrate=%b"
                  }), att.VAL);
  } else if (variant === "Fontsize" || variant === "Center" || variant === "Fontname" || variant === "Size" || variant === "Page" || variant === "HtmlLabel" || variant === "Fontcolor" || variant === "Label" || variant === "Orientation" || variant === "Pagedir") {
    return fprint_graph(ppf, att);
  } else if (variant === "Nodesep") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "nodesep=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "nodesep=%f"
                  }), att.VAL);
  } else if (variant === "Margin") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "margin=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "margin=%f"
                  }), att.VAL);
  } else if (variant === "BgcolorWithTransparency") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "bgcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "bgcolor=%a"
                  }), fprint_color_with_transparency, att.VAL);
  } else if (variant === "Ratio") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "ratio=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "ratio=%a"
                  }), fprint_ratio, att.VAL);
  } else if (variant === "Url") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "URL=\"",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Char_literal */12,
                          _0: /* '"' */34,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "URL=\"%s\""
                  }), att.VAL);
  } else if (variant === "Nslimit1") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "nslimit1=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "nslimit1=%i"
                  }), att.VAL);
  } else if (variant === "Mclimit") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "mclimit=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "mclimit=%f"
                  }), att.VAL);
  } else if (variant === "Layers") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "layers=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "layers=%a"
                  }), fprint_string_list$1, att.VAL);
  } else if (variant === "Quantum") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "quantum=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "quantum=%f"
                  }), att.VAL);
  } else if (variant === "Nslimit") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "nslimit=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "nslimit=%i"
                  }), att.VAL);
  } else if (variant === "Bgcolor") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "bgcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "bgcolor=%a"
                  }), fprint_color, att.VAL);
  } else if (variant === "Rankdir") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "rankdir=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "rankdir=%a"
                  }), fprint_dir, att.VAL);
  } else if (variant === "Ranksep") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "ranksep=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "ranksep=%f"
                  }), att.VAL);
  } else if (variant === "Fontpath") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fontpath=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fontpath=%a"
                  }), fprint_string, att.VAL);
  } else {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "comment=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "comment=%a"
                  }), fprint_string, att.VAL);
  }
}

function fprint_vertex$1(ppf, att) {
  var variant = att.NAME;
  if (variant === "Comment") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "comment=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "comment=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Fixedsize") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fixedsize=",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "fixedsize=%b"
                  }), att.VAL);
  } else if (variant === "FillcolorWithTransparency") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fillcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fillcolor=%a"
                  }), fprint_color_with_transparency, att.VAL);
  } else if (variant === "Distortion") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "distortion=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "distortion=%f"
                  }), att.VAL);
  } else if (variant === "Z") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "z=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "z=%f"
                  }), att.VAL);
  } else if (variant === "Url") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "URL=\"",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* Char_literal */12,
                          _0: /* '"' */34,
                          _1: /* End_of_format */0
                        }
                      }
                    },
                    _1: "URL=\"%s\""
                  }), att.VAL);
  } else if (variant === "Layer") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "layer=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "layer=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Fillcolor") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "fillcolor=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "fillcolor=%a"
                  }), fprint_color, att.VAL);
  } else {
    return fprint_vertex(ppf, att);
  }
}

function fprint_port(ppf, param) {
  if (param === "N") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Char_literal */12,
                  _0: /* 'n' */110,
                  _1: /* End_of_format */0
                },
                _1: "n"
              });
  } else if (param === "S") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Char_literal */12,
                  _0: /* 's' */115,
                  _1: /* End_of_format */0
                },
                _1: "s"
              });
  } else if (param === "W") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Char_literal */12,
                  _0: /* 'w' */119,
                  _1: /* End_of_format */0
                },
                _1: "w"
              });
  } else if (param === "NE") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "ne",
                  _1: /* End_of_format */0
                },
                _1: "ne"
              });
  } else if (param === "NW") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "nw",
                  _1: /* End_of_format */0
                },
                _1: "nw"
              });
  } else if (param === "SE") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "se",
                  _1: /* End_of_format */0
                },
                _1: "se"
              });
  } else if (param === "SW") {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "sw",
                  _1: /* End_of_format */0
                },
                _1: "sw"
              });
  } else {
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Char_literal */12,
                  _0: /* 'e' */101,
                  _1: /* End_of_format */0
                },
                _1: "e"
              });
  }
}

function fprint_edge$1(ppf, att) {
  var variant = att.NAME;
  if (variant === "Comment") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "comment=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "comment=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Constraint") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "constraint=",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "constraint=%b"
                  }), att.VAL);
  } else if (variant === "Sametail") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "sametail=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "sametail=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Labelfontcolor" || variant === "Fontsize" || variant === "Fontname" || variant === "Labelfontsize" || variant === "ColorWithTransparency" || variant === "Labelfontname" || variant === "HtmlLabel" || variant === "Style" || variant === "Penwidth" || variant === "Fontcolor" || variant === "Label" || variant === "Dir" || variant === "Decorate" || variant === "Color") {
    return fprint_edge(ppf, att);
  } else if (variant === "Tailport") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "tailport=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "tailport=%a"
                  }), fprint_port, att.VAL);
  } else if (variant === "Labelfloat") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "labelfloat=",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      }
                    },
                    _1: "labelfloat=%b"
                  }), att.VAL);
  } else if (variant === "Layer") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "layer=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "layer=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Minlen") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "minlen=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "minlen=%i"
                  }), att.VAL);
  } else if (variant === "Taillabel") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "taillabel=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "taillabel=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Headlabel") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "headlabel=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "headlabel=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Labelangle") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "labelangle=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "labelangle=%f"
                  }), att.VAL);
  } else if (variant === "Headport") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "headport=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "headport=%a"
                  }), fprint_port, att.VAL);
  } else if (variant === "Tailurl") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "tailURL=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "tailURL=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Headurl") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "headURL=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "headURL=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Weight") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "weight=",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_i */3,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "weight=%i"
                  }), att.VAL);
  } else if (variant === "Arrowhead") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "arrowhead=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "arrowhead=%a"
                  }), fprint_arrow_style, att.VAL);
  } else if (variant === "Labeldistance") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "labeldistance=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "labeldistance=%f"
                  }), att.VAL);
  } else if (variant === "Arrowsize") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "arrowsize=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "arrowsize=%f"
                  }), att.VAL);
  } else if (variant === "Arrowtail") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "arrowtail=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "arrowtail=%a"
                  }), fprint_arrow_style, att.VAL);
  } else {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "samehead=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "samehead=%a"
                  }), fprint_string, att.VAL);
  }
}

function fprint_vertex_list(param, param$1, param$2) {
  return fprint_attributes(fprint_style_list, fprint_vertex$1, param, param$1, param$2);
}

function fprint_edge_list(param, param$1, param$2) {
  return fprint_attributes(fprint_style_list, fprint_edge$1, param, param$1, param$2);
}

var partial_arg_Attributes = {
  fprint_graph: fprint_graph$1,
  fprint_vertex_list: fprint_vertex_list,
  fprint_edge_list: fprint_edge_list
};

function Dot(param) {
  var command = {
    contents: "dot"
  };
  var set_command = function (cmd) {
    command.contents = cmd;
    
  };
  var $$Error = /* @__PURE__ */Caml_exceptions.create("Graphviz.MakeEngine(EN)(X).Error");
  var handle_error = function (f, arg) {
    try {
      return Curry._1(f, arg);
    }
    catch (raw_msg){
      var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
      if (msg.RE_EXN_ID === $$Error) {
        Curry._3(Printf.eprintf(/* Format */{
                  _0: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: ": ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " failure\n   ",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* Char_literal */12,
                              _0: /* '\n' */10,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "%s: %s failure\n   %s\n"
                }), Caml_array.get(Sys.argv, 0), "dot", msg._1);
        Pervasives.flush(Pervasives.stderr);
        return Pervasives.exit(2);
      }
      throw msg;
    }
  };
  var fprint_graph_attributes = function (ppf, list) {
    return List.iter((function (att) {
                  return Curry._2(Format.fprintf(ppf, /* Format */{
                                  _0: {
                                    TAG: /* Alpha */15,
                                    _0: {
                                      TAG: /* Char_literal */12,
                                      _0: /* ';' */59,
                                      _1: {
                                        TAG: /* Formatting_lit */17,
                                        _0: {
                                          TAG: /* Break */0,
                                          _0: "@ ",
                                          _1: 1,
                                          _2: 0
                                        },
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  },
                                  _1: "%a;@ "
                                }), partial_arg_Attributes.fprint_graph, att);
                }), list);
  };
  var fprint_graph = function (ppf, graph) {
    var SG = $$Map.Make({
          compare: $$String.compare
        });
    var subgraphs = {
      contents: SG.empty
    };
    var print_nodes = function (ppf) {
      var default_node_attributes = Curry._1(param.default_vertex_attributes, graph);
      if (default_node_attributes !== /* [] */0) {
        var partial_arg = Curry._1(partial_arg_Attributes.fprint_vertex_list, /* COMMA */0);
        Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "node",
                    _1: {
                      TAG: /* Alpha */15,
                      _0: {
                        TAG: /* Char_literal */12,
                        _0: /* ';' */59,
                        _1: {
                          TAG: /* Formatting_lit */17,
                          _0: {
                            TAG: /* Break */0,
                            _0: "@ ",
                            _1: 1,
                            _2: 0
                          },
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "node%a;@ "
                }), (function (param, param$1) {
                return fprint_square_not_empty(partial_arg, param, param$1);
              }), default_node_attributes);
      }
      return Curry._2(param.iter_vertex, (function (node) {
                    var sg = Curry._1(param.get_subgraph, node);
                    if (sg !== undefined) {
                      var match = Curry._2(SG.mem, sg.sg_name, subgraphs.contents) ? Curry._2(SG.find, sg.sg_name, subgraphs.contents) : [
                          sg,
                          /* [] */0
                        ];
                      var sg$1 = match[0];
                      subgraphs.contents = Curry._3(SG.add, sg$1.sg_name, [
                            sg$1,
                            {
                              hd: node,
                              tl: match[1]
                            }
                          ], subgraphs.contents);
                    }
                    var partial_arg = Curry._1(partial_arg_Attributes.fprint_vertex_list, /* COMMA */0);
                    return Curry._3(Format.fprintf(ppf, /* Format */{
                                    _0: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: {
                                        TAG: /* Alpha */15,
                                        _0: {
                                          TAG: /* Char_literal */12,
                                          _0: /* ';' */59,
                                          _1: {
                                            TAG: /* Formatting_lit */17,
                                            _0: {
                                              TAG: /* Break */0,
                                              _0: "@ ",
                                              _1: 1,
                                              _2: 0
                                            },
                                            _1: /* End_of_format */0
                                          }
                                        }
                                      }
                                    },
                                    _1: "%s%a;@ "
                                  }), Curry._1(param.vertex_name, node), (function (param, param$1) {
                                  return fprint_square_not_empty(partial_arg, param, param$1);
                                }), Curry._1(param.vertex_attributes, node));
                  }), graph);
    };
    var print_nested_subgraphs = function (ppf, _param) {
      while(true) {
        var param$1 = _param;
        if (!param$1) {
          return ;
        }
        var name = param$1.hd;
        var match = Curry._2(SG.find, name, subgraphs.contents);
        var nodes = match[1];
        var children = Curry._2(SG.filter, (function(name){
            return function (param, param$1) {
              return Caml_obj.caml_equal(param$1[0].sg_parent, name);
            }
            }(name)), subgraphs.contents);
        Curry._5(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* Formatting_gen */18,
                    _0: {
                      TAG: /* Open_box */1,
                      _0: /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "<v 2>",
                          _1: /* End_of_format */0
                        },
                        _1: "<v 2>"
                      }
                    },
                    _1: {
                      TAG: /* String_literal */11,
                      _0: "subgraph cluster_",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " { ",
                          _1: {
                            TAG: /* Alpha */15,
                            _0: {
                              TAG: /* Theta */16,
                              _0: {
                                TAG: /* Formatting_lit */17,
                                _0: {
                                  TAG: /* Break */0,
                                  _0: "@ ",
                                  _1: 1,
                                  _2: 0
                                },
                                _1: {
                                  TAG: /* Theta */16,
                                  _0: {
                                    TAG: /* String_literal */11,
                                    _0: " };",
                                    _1: {
                                      TAG: /* Formatting_lit */17,
                                      _0: /* Close_box */0,
                                      _1: {
                                        TAG: /* Formatting_lit */17,
                                        _0: /* Force_newline */3,
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "@[<v 2>subgraph cluster_%s { %a%t@ %t };@]@\n"
                }), name, Curry._1(partial_arg_Attributes.fprint_vertex_list, /* SEMI */1), match[0].sg_attributes, (function(nodes){
            return function (ppf) {
              return List.iter((function (n) {
                            return Curry._1(Format.fprintf(ppf, /* Format */{
                                            _0: {
                                              TAG: /* String */2,
                                              _0: /* No_padding */0,
                                              _1: {
                                                TAG: /* Char_literal */12,
                                                _0: /* ';' */59,
                                                _1: /* End_of_format */0
                                              }
                                            },
                                            _1: "%s;"
                                          }), Curry._1(param.vertex_name, n));
                          }), nodes);
            }
            }(nodes)), (function(children){
            return function (ppf) {
              return print_nested_subgraphs(ppf, List.map((function (prim) {
                                return prim[0];
                              }), Curry._1(SG.bindings, children)));
            }
            }(children)));
        _param = param$1.tl;
        continue ;
      };
    };
    var print_subgraphs = function (ppf) {
      var root_worklist = Curry._2(SG.filter, (function (param, param$1) {
              return param$1[0].sg_parent === undefined;
            }), subgraphs.contents);
      return print_nested_subgraphs(ppf, List.map((function (prim) {
                        return prim[0];
                      }), Curry._1(SG.bindings, root_worklist)));
    };
    var print_edges = function (ppf) {
      var default_edge_attributes = Curry._1(param.default_edge_attributes, graph);
      if (default_edge_attributes !== /* [] */0) {
        var partial_arg = Curry._1(partial_arg_Attributes.fprint_edge_list, /* COMMA */0);
        Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "edge",
                    _1: {
                      TAG: /* Alpha */15,
                      _0: {
                        TAG: /* Char_literal */12,
                        _0: /* ';' */59,
                        _1: {
                          TAG: /* Formatting_lit */17,
                          _0: {
                            TAG: /* Break */0,
                            _0: "@ ",
                            _1: 1,
                            _2: 0
                          },
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "edge%a;@ "
                }), (function (param, param$1) {
                return fprint_square_not_empty(partial_arg, param, param$1);
              }), default_edge_attributes);
      }
      return Curry._2(param.iter_edges_e, (function (edge) {
                    var partial_arg = Curry._1(partial_arg_Attributes.fprint_edge_list, /* COMMA */0);
                    return Curry._5(Format.fprintf(ppf, /* Format */{
                                    _0: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: {
                                        TAG: /* Char_literal */12,
                                        _0: /* ' ' */32,
                                        _1: {
                                          TAG: /* String */2,
                                          _0: /* No_padding */0,
                                          _1: {
                                            TAG: /* Char_literal */12,
                                            _0: /* ' ' */32,
                                            _1: {
                                              TAG: /* String */2,
                                              _0: /* No_padding */0,
                                              _1: {
                                                TAG: /* Alpha */15,
                                                _0: {
                                                  TAG: /* Char_literal */12,
                                                  _0: /* ';' */59,
                                                  _1: {
                                                    TAG: /* Formatting_lit */17,
                                                    _0: {
                                                      TAG: /* Break */0,
                                                      _0: "@ ",
                                                      _1: 1,
                                                      _2: 0
                                                    },
                                                    _1: /* End_of_format */0
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    _1: "%s %s %s%a;@ "
                                  }), Curry._1(param.vertex_name, Curry._1(param.E.src, edge)), "->", Curry._1(param.vertex_name, Curry._1(param.E.dst, edge)), (function (param, param$1) {
                                  return fprint_square_not_empty(partial_arg, param, param$1);
                                }), Curry._1(param.edge_attributes, edge));
                  }), graph);
    };
    Curry._3(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Formatting_gen */18,
                _0: {
                  TAG: /* Open_box */1,
                  _0: /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "<v>",
                      _1: /* End_of_format */0
                    },
                    _1: "<v>"
                  }
                },
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String_literal */11,
                    _0: " G {",
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: {
                        TAG: /* Break */0,
                        _0: "@ ",
                        _1: 1,
                        _2: 0
                      },
                      _1: {
                        TAG: /* Formatting_gen */18,
                        _0: {
                          TAG: /* Open_box */1,
                          _0: /* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "<v 2>",
                              _1: /* End_of_format */0
                            },
                            _1: "<v 2>"
                          }
                        },
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "  ",
                          _1: {
                            TAG: /* Alpha */15,
                            _0: /* End_of_format */0
                          }
                        }
                      }
                    }
                  }
                }
              },
              _1: "@[<v>%s G {@ @[<v 2>  %a"
            }), "digraph", fprint_graph_attributes, Curry._1(param.graph_attributes, graph));
    Curry._1(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Theta */16,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: {
                    TAG: /* Break */0,
                    _0: "@ ",
                    _1: 1,
                    _2: 0
                  },
                  _1: /* End_of_format */0
                }
              },
              _1: "%t@ "
            }), print_nodes);
    Curry._1(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Theta */16,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: {
                    TAG: /* Break */0,
                    _0: "@ ",
                    _1: 1,
                    _2: 0
                  },
                  _1: /* End_of_format */0
                }
              },
              _1: "%t@ "
            }), print_subgraphs);
    Curry._1(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Theta */16,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: {
                    TAG: /* Break */0,
                    _0: "@ ",
                    _1: 1,
                    _2: 0
                  },
                  _1: /* End_of_format */0
                }
              },
              _1: "%t@ "
            }), print_edges);
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Close_box */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* '}' */125,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: /* End_of_format */0
                    }
                  }
                },
                _1: "@]}@]"
              });
  };
  var output_graph = function (oc, graph) {
    var ppf = Format.formatter_of_out_channel(oc);
    fprint_graph(ppf, graph);
    return Format.pp_print_flush(ppf, undefined);
  };
  return {
          command: command,
          set_command: set_command,
          $$Error: $$Error,
          handle_error: handle_error,
          fprint_graph_attributes: fprint_graph_attributes,
          fprint_graph: fprint_graph,
          output_graph: output_graph
        };
}

function fprint_graph$2(ppf, att) {
  if (typeof att !== "object") {
    return fprint_graph(ppf, att);
  }
  var variant = att.NAME;
  if (variant !== "Margin") {
    if (variant === "Spline") {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "spline=",
                        _1: {
                          TAG: /* Bool */9,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      },
                      _1: "spline=%b"
                    }), att.VAL);
    } else if (variant === "Overlap") {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "overlap=",
                        _1: {
                          TAG: /* Bool */9,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      },
                      _1: "overlap=%b"
                    }), att.VAL);
    } else if (variant === "Sep") {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "sep=",
                        _1: {
                          TAG: /* Float */8,
                          _0: /* Float_f */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: /* End_of_format */0
                        }
                      },
                      _1: "sep=%f"
                    }), att.VAL);
    } else if (variant === "Start") {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "start=",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_i */3,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: /* End_of_format */0
                        }
                      },
                      _1: "start=%i"
                    }), att.VAL);
    } else {
      return fprint_graph(ppf, att);
    }
  }
  var match = att.VAL;
  return Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "margin=\"",
                    _1: {
                      TAG: /* Float */8,
                      _0: /* Float_f */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Char_literal */12,
                        _0: /* ',' */44,
                        _1: {
                          TAG: /* Float */8,
                          _0: /* Float_f */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* '"' */34,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "margin=\"%f,%f\""
                }), match[0], match[1]);
}

function fprint_vertex$2(ppf, att) {
  if (att.NAME !== "Pos") {
    return fprint_vertex(ppf, att);
  }
  var match = att.VAL;
  return Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "pos=\"",
                    _1: {
                      TAG: /* Float */8,
                      _0: /* Float_f */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Char_literal */12,
                        _0: /* ',' */44,
                        _1: {
                          TAG: /* Float */8,
                          _0: /* Float_f */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* '"' */34,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "pos=\"%f,%f\""
                }), match[0], match[1]);
}

function fprint_edge$2(ppf, att) {
  var variant = att.NAME;
  if (variant === "Id") {
    return Curry._2(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "id=",
                      _1: {
                        TAG: /* Alpha */15,
                        _0: /* End_of_format */0
                      }
                    },
                    _1: "id=%a"
                  }), fprint_string, att.VAL);
  } else if (variant === "Len") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "len=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "len=%f"
                  }), att.VAL);
  } else if (variant === "Weight") {
    return Curry._1(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "weight=",
                      _1: {
                        TAG: /* Float */8,
                        _0: /* Float_f */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: /* End_of_format */0
                      }
                    },
                    _1: "weight=%f"
                  }), att.VAL);
  } else {
    return fprint_edge(ppf, att);
  }
}

function fprint_vertex_list$1(param, param$1, param$2) {
  return fprint_attributes(fprint_style_list, fprint_vertex$2, param, param$1, param$2);
}

function fprint_edge_list$1(param, param$1, param$2) {
  return fprint_attributes(fprint_style_list, fprint_edge$2, param, param$1, param$2);
}

var partial_arg_Attributes$1 = {
  fprint_graph: fprint_graph$2,
  fprint_vertex_list: fprint_vertex_list$1,
  fprint_edge_list: fprint_edge_list$1
};

function Neato(param) {
  var command = {
    contents: "neato"
  };
  var set_command = function (cmd) {
    command.contents = cmd;
    
  };
  var $$Error = /* @__PURE__ */Caml_exceptions.create("Graphviz.MakeEngine(EN)(X).Error");
  var handle_error = function (f, arg) {
    try {
      return Curry._1(f, arg);
    }
    catch (raw_msg){
      var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
      if (msg.RE_EXN_ID === $$Error) {
        Curry._3(Printf.eprintf(/* Format */{
                  _0: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: ": ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " failure\n   ",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* Char_literal */12,
                              _0: /* '\n' */10,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "%s: %s failure\n   %s\n"
                }), Caml_array.get(Sys.argv, 0), "neato", msg._1);
        Pervasives.flush(Pervasives.stderr);
        return Pervasives.exit(2);
      }
      throw msg;
    }
  };
  var fprint_graph_attributes = function (ppf, list) {
    return List.iter((function (att) {
                  return Curry._2(Format.fprintf(ppf, /* Format */{
                                  _0: {
                                    TAG: /* Alpha */15,
                                    _0: {
                                      TAG: /* Char_literal */12,
                                      _0: /* ';' */59,
                                      _1: {
                                        TAG: /* Formatting_lit */17,
                                        _0: {
                                          TAG: /* Break */0,
                                          _0: "@ ",
                                          _1: 1,
                                          _2: 0
                                        },
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  },
                                  _1: "%a;@ "
                                }), partial_arg_Attributes$1.fprint_graph, att);
                }), list);
  };
  var fprint_graph = function (ppf, graph) {
    var SG = $$Map.Make({
          compare: $$String.compare
        });
    var subgraphs = {
      contents: SG.empty
    };
    var print_nodes = function (ppf) {
      var default_node_attributes = Curry._1(param.default_vertex_attributes, graph);
      if (default_node_attributes !== /* [] */0) {
        var partial_arg = Curry._1(partial_arg_Attributes$1.fprint_vertex_list, /* COMMA */0);
        Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "node",
                    _1: {
                      TAG: /* Alpha */15,
                      _0: {
                        TAG: /* Char_literal */12,
                        _0: /* ';' */59,
                        _1: {
                          TAG: /* Formatting_lit */17,
                          _0: {
                            TAG: /* Break */0,
                            _0: "@ ",
                            _1: 1,
                            _2: 0
                          },
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "node%a;@ "
                }), (function (param, param$1) {
                return fprint_square_not_empty(partial_arg, param, param$1);
              }), default_node_attributes);
      }
      return Curry._2(param.iter_vertex, (function (node) {
                    var sg = Curry._1(param.get_subgraph, node);
                    if (sg !== undefined) {
                      var match = Curry._2(SG.mem, sg.sg_name, subgraphs.contents) ? Curry._2(SG.find, sg.sg_name, subgraphs.contents) : [
                          sg,
                          /* [] */0
                        ];
                      var sg$1 = match[0];
                      subgraphs.contents = Curry._3(SG.add, sg$1.sg_name, [
                            sg$1,
                            {
                              hd: node,
                              tl: match[1]
                            }
                          ], subgraphs.contents);
                    }
                    var partial_arg = Curry._1(partial_arg_Attributes$1.fprint_vertex_list, /* COMMA */0);
                    return Curry._3(Format.fprintf(ppf, /* Format */{
                                    _0: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: {
                                        TAG: /* Alpha */15,
                                        _0: {
                                          TAG: /* Char_literal */12,
                                          _0: /* ';' */59,
                                          _1: {
                                            TAG: /* Formatting_lit */17,
                                            _0: {
                                              TAG: /* Break */0,
                                              _0: "@ ",
                                              _1: 1,
                                              _2: 0
                                            },
                                            _1: /* End_of_format */0
                                          }
                                        }
                                      }
                                    },
                                    _1: "%s%a;@ "
                                  }), Curry._1(param.vertex_name, node), (function (param, param$1) {
                                  return fprint_square_not_empty(partial_arg, param, param$1);
                                }), Curry._1(param.vertex_attributes, node));
                  }), graph);
    };
    var print_nested_subgraphs = function (ppf, _param) {
      while(true) {
        var param$1 = _param;
        if (!param$1) {
          return ;
        }
        var name = param$1.hd;
        var match = Curry._2(SG.find, name, subgraphs.contents);
        var nodes = match[1];
        var children = Curry._2(SG.filter, (function(name){
            return function (param, param$1) {
              return Caml_obj.caml_equal(param$1[0].sg_parent, name);
            }
            }(name)), subgraphs.contents);
        Curry._5(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* Formatting_gen */18,
                    _0: {
                      TAG: /* Open_box */1,
                      _0: /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "<v 2>",
                          _1: /* End_of_format */0
                        },
                        _1: "<v 2>"
                      }
                    },
                    _1: {
                      TAG: /* String_literal */11,
                      _0: "subgraph cluster_",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " { ",
                          _1: {
                            TAG: /* Alpha */15,
                            _0: {
                              TAG: /* Theta */16,
                              _0: {
                                TAG: /* Formatting_lit */17,
                                _0: {
                                  TAG: /* Break */0,
                                  _0: "@ ",
                                  _1: 1,
                                  _2: 0
                                },
                                _1: {
                                  TAG: /* Theta */16,
                                  _0: {
                                    TAG: /* String_literal */11,
                                    _0: " };",
                                    _1: {
                                      TAG: /* Formatting_lit */17,
                                      _0: /* Close_box */0,
                                      _1: {
                                        TAG: /* Formatting_lit */17,
                                        _0: /* Force_newline */3,
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "@[<v 2>subgraph cluster_%s { %a%t@ %t };@]@\n"
                }), name, Curry._1(partial_arg_Attributes$1.fprint_vertex_list, /* SEMI */1), match[0].sg_attributes, (function(nodes){
            return function (ppf) {
              return List.iter((function (n) {
                            return Curry._1(Format.fprintf(ppf, /* Format */{
                                            _0: {
                                              TAG: /* String */2,
                                              _0: /* No_padding */0,
                                              _1: {
                                                TAG: /* Char_literal */12,
                                                _0: /* ';' */59,
                                                _1: /* End_of_format */0
                                              }
                                            },
                                            _1: "%s;"
                                          }), Curry._1(param.vertex_name, n));
                          }), nodes);
            }
            }(nodes)), (function(children){
            return function (ppf) {
              return print_nested_subgraphs(ppf, List.map((function (prim) {
                                return prim[0];
                              }), Curry._1(SG.bindings, children)));
            }
            }(children)));
        _param = param$1.tl;
        continue ;
      };
    };
    var print_subgraphs = function (ppf) {
      var root_worklist = Curry._2(SG.filter, (function (param, param$1) {
              return param$1[0].sg_parent === undefined;
            }), subgraphs.contents);
      return print_nested_subgraphs(ppf, List.map((function (prim) {
                        return prim[0];
                      }), Curry._1(SG.bindings, root_worklist)));
    };
    var print_edges = function (ppf) {
      var default_edge_attributes = Curry._1(param.default_edge_attributes, graph);
      if (default_edge_attributes !== /* [] */0) {
        var partial_arg = Curry._1(partial_arg_Attributes$1.fprint_edge_list, /* COMMA */0);
        Curry._2(Format.fprintf(ppf, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "edge",
                    _1: {
                      TAG: /* Alpha */15,
                      _0: {
                        TAG: /* Char_literal */12,
                        _0: /* ';' */59,
                        _1: {
                          TAG: /* Formatting_lit */17,
                          _0: {
                            TAG: /* Break */0,
                            _0: "@ ",
                            _1: 1,
                            _2: 0
                          },
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "edge%a;@ "
                }), (function (param, param$1) {
                return fprint_square_not_empty(partial_arg, param, param$1);
              }), default_edge_attributes);
      }
      return Curry._2(param.iter_edges_e, (function (edge) {
                    var partial_arg = Curry._1(partial_arg_Attributes$1.fprint_edge_list, /* COMMA */0);
                    return Curry._5(Format.fprintf(ppf, /* Format */{
                                    _0: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: {
                                        TAG: /* Char_literal */12,
                                        _0: /* ' ' */32,
                                        _1: {
                                          TAG: /* String */2,
                                          _0: /* No_padding */0,
                                          _1: {
                                            TAG: /* Char_literal */12,
                                            _0: /* ' ' */32,
                                            _1: {
                                              TAG: /* String */2,
                                              _0: /* No_padding */0,
                                              _1: {
                                                TAG: /* Alpha */15,
                                                _0: {
                                                  TAG: /* Char_literal */12,
                                                  _0: /* ';' */59,
                                                  _1: {
                                                    TAG: /* Formatting_lit */17,
                                                    _0: {
                                                      TAG: /* Break */0,
                                                      _0: "@ ",
                                                      _1: 1,
                                                      _2: 0
                                                    },
                                                    _1: /* End_of_format */0
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    _1: "%s %s %s%a;@ "
                                  }), Curry._1(param.vertex_name, Curry._1(param.E.src, edge)), "--", Curry._1(param.vertex_name, Curry._1(param.E.dst, edge)), (function (param, param$1) {
                                  return fprint_square_not_empty(partial_arg, param, param$1);
                                }), Curry._1(param.edge_attributes, edge));
                  }), graph);
    };
    Curry._3(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Formatting_gen */18,
                _0: {
                  TAG: /* Open_box */1,
                  _0: /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "<v>",
                      _1: /* End_of_format */0
                    },
                    _1: "<v>"
                  }
                },
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String_literal */11,
                    _0: " G {",
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: {
                        TAG: /* Break */0,
                        _0: "@ ",
                        _1: 1,
                        _2: 0
                      },
                      _1: {
                        TAG: /* Formatting_gen */18,
                        _0: {
                          TAG: /* Open_box */1,
                          _0: /* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "<v 2>",
                              _1: /* End_of_format */0
                            },
                            _1: "<v 2>"
                          }
                        },
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "  ",
                          _1: {
                            TAG: /* Alpha */15,
                            _0: /* End_of_format */0
                          }
                        }
                      }
                    }
                  }
                }
              },
              _1: "@[<v>%s G {@ @[<v 2>  %a"
            }), "graph", fprint_graph_attributes, Curry._1(param.graph_attributes, graph));
    Curry._1(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Theta */16,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: {
                    TAG: /* Break */0,
                    _0: "@ ",
                    _1: 1,
                    _2: 0
                  },
                  _1: /* End_of_format */0
                }
              },
              _1: "%t@ "
            }), print_nodes);
    Curry._1(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Theta */16,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: {
                    TAG: /* Break */0,
                    _0: "@ ",
                    _1: 1,
                    _2: 0
                  },
                  _1: /* End_of_format */0
                }
              },
              _1: "%t@ "
            }), print_subgraphs);
    Curry._1(Format.fprintf(ppf, /* Format */{
              _0: {
                TAG: /* Theta */16,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: {
                    TAG: /* Break */0,
                    _0: "@ ",
                    _1: 1,
                    _2: 0
                  },
                  _1: /* End_of_format */0
                }
              },
              _1: "%t@ "
            }), print_edges);
    return Format.fprintf(ppf, /* Format */{
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Close_box */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* '}' */125,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: /* End_of_format */0
                    }
                  }
                },
                _1: "@]}@]"
              });
  };
  var output_graph = function (oc, graph) {
    var ppf = Format.formatter_of_out_channel(oc);
    fprint_graph(ppf, graph);
    return Format.pp_print_flush(ppf, undefined);
  };
  return {
          command: command,
          set_command: set_command,
          $$Error: $$Error,
          handle_error: handle_error,
          fprint_graph_attributes: fprint_graph_attributes,
          fprint_graph: fprint_graph,
          output_graph: output_graph
        };
}

var CommonAttributes = {};

var DotAttributes = {};

function Dot$1(funarg) {
  var $$let = Dot({
        V: funarg.V,
        E: funarg.E,
        iter_vertex: funarg.iter_vertex,
        iter_edges_e: funarg.iter_edges_e,
        graph_attributes: funarg.graph_attributes,
        default_vertex_attributes: funarg.default_vertex_attributes,
        vertex_name: funarg.vertex_name,
        vertex_attributes: funarg.vertex_attributes,
        default_edge_attributes: funarg.default_edge_attributes,
        edge_attributes: funarg.edge_attributes,
        get_subgraph: funarg.get_subgraph
      });
  return {
          fprint_graph: $$let.fprint_graph,
          output_graph: $$let.output_graph
        };
}

var NeatoAttributes = {};

function Neato$1(funarg) {
  var $$let = Neato({
        V: funarg.V,
        E: funarg.E,
        iter_vertex: funarg.iter_vertex,
        iter_edges_e: funarg.iter_edges_e,
        graph_attributes: funarg.graph_attributes,
        default_vertex_attributes: funarg.default_vertex_attributes,
        vertex_name: funarg.vertex_name,
        vertex_attributes: funarg.vertex_attributes,
        default_edge_attributes: funarg.default_edge_attributes,
        edge_attributes: funarg.edge_attributes,
        get_subgraph: funarg.get_subgraph
      });
  return {
          set_command: $$let.set_command,
          $$Error: $$let.$$Error,
          handle_error: $$let.handle_error,
          fprint_graph: $$let.fprint_graph,
          output_graph: $$let.output_graph
        };
}

export {
  color_to_color_with_transparency ,
  CommonAttributes ,
  DotAttributes ,
  Dot$1 as Dot,
  NeatoAttributes ,
  Neato$1 as Neato,
  
}
/* Format Not a pure module */
