// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";

function Bron_Kerbosch(funarg) {
  var bron_kerbosch = function (cliquelst, graph, clique, candidates, used) {
    if (!candidates) {
      if (used) {
        return cliquelst;
      } else {
        return {
                hd: clique,
                tl: cliquelst
              };
      }
    }
    var match = List.fold_left((function (param, v) {
            var u = param[1];
            var c = param[0];
            var n = List.filter(function (nb) {
                    return !Curry._2(funarg.V.equal, nb, v);
                  })(Curry._2(funarg.succ, graph, v));
            var c$p = List.filter(function (cv) {
                    return List.exists((function (v) {
                                  return Curry._2(funarg.V.equal, v, cv);
                                }), n);
                  })(c);
            var u$p = List.filter(function (cv) {
                    return List.exists((function (v) {
                                  return Curry._2(funarg.V.equal, v, cv);
                                }), n);
                  })(u);
            var c_minus_v = List.filter(function (cv) {
                    return !Curry._2(funarg.V.equal, cv, v);
                  })(c);
            return [
                    c_minus_v,
                    {
                      hd: v,
                      tl: u
                    },
                    bron_kerbosch(param[2], graph, {
                          hd: v,
                          tl: clique
                        }, c$p, u$p)
                  ];
          }), [
          candidates,
          used,
          /* [] */0
        ], candidates);
    return Pervasives.$at(match[2], cliquelst);
  };
  var maximalcliques = function (g) {
    var vertices = Curry._3(funarg.fold_vertex, (function (v, acc) {
            return {
                    hd: v,
                    tl: acc
                  };
          }), g, /* [] */0);
    return bron_kerbosch(/* [] */0, g, /* [] */0, vertices, /* [] */0);
  };
  return {
          maximalcliques: maximalcliques
        };
}

export {
  Bron_Kerbosch ,
  
}
/* No side effect */
