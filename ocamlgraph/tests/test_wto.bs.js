// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "../../node_modules/rescript/lib/es6/list.js";
import * as Curry from "../../node_modules/rescript/lib/es6/curry.js";
import * as Hashtbl from "../../node_modules/rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "../../node_modules/rescript/lib/es6/caml_obj.js";
import * as Persistent from "../src/persistent.bs.js";
import * as Pervasives from "../../node_modules/rescript/lib/es6/pervasives.js";
import * as WeakTopological from "../src/weakTopological.bs.js";

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var Vertex = {
  compare: compare,
  hash: Hashtbl.hash,
  equal: equal
};

var G = Persistent.Digraph.Concrete(Vertex);

var Wto = WeakTopological.Make({
      V: G.V,
      iter_vertex: G.iter_vertex,
      iter_succ: G.iter_succ
    });

function print_element(v) {
  if (v.TAG === /* Vertex */0) {
    return Pervasives.print_string(v._0);
  }
  Pervasives.print_string("(");
  Pervasives.print_string(v._0);
  Pervasives.print_string(" ");
  print_components(v._1);
  return Pervasives.print_string(")");
}

function print_components(components) {
  return WeakTopological.fold_left((function (param, elem) {
                print_element(elem);
                return Pervasives.print_string(" ");
              }), undefined, components);
}

var edges = {
  hd: [
    "1",
    "4"
  ],
  tl: {
    hd: [
      "1",
      "2"
    ],
    tl: {
      hd: [
        "2",
        "3"
      ],
      tl: {
        hd: [
          "3",
          "6"
        ],
        tl: {
          hd: [
            "4",
            "1'"
          ],
          tl: {
            hd: [
              "5",
              "6"
            ],
            tl: {
              hd: [
                "6",
                "5'"
              ],
              tl: {
                hd: [
                  "1'",
                  "2'"
                ],
                tl: {
                  hd: [
                    "1'",
                    "4'"
                  ],
                  tl: {
                    hd: [
                      "2'",
                      "3'"
                    ],
                    tl: {
                      hd: [
                        "3'",
                        "6'"
                      ],
                      tl: {
                        hd: [
                          "4'",
                          "1"
                        ],
                        tl: {
                          hd: [
                            "5'",
                            "6'"
                          ],
                          tl: {
                            hd: [
                              "6'",
                              "5"
                            ],
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

var g = List.fold_left((function (acc, param) {
        return Curry._3(G.add_edge, acc, param[0], param[1]);
      }), G.empty, edges);

var result = Curry._2(Wto.recursive_scc, g, "1");

print_components(result);

export {
  Vertex ,
  G ,
  Wto ,
  print_element ,
  print_components ,
  edges ,
  g ,
  result ,
  
}
/* G Not a pure module */
