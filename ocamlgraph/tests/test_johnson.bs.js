// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Path from "../src/path.bs.js";
import * as Curry from "../../node_modules/rescript/lib/es6/curry.js";
import * as Printf from "../../node_modules/rescript/lib/es6/printf.js";
import * as Hashtbl from "../../node_modules/rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "../../node_modules/rescript/lib/es6/caml_obj.js";
import * as Imperative from "../src/imperative.bs.js";

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var Int = {
  compare: compare,
  hash: Hashtbl.hash,
  equal: equal,
  $$default: 0
};

var param = {
  compare: compare,
  $$default: 0
};

var G = Imperative.Digraph.ConcreteLabeled(Int, param);

function weight(e) {
  return Curry._1(G.E.label, e);
}

function add(prim0, prim1) {
  return prim0 + prim1 | 0;
}

function sub(prim0, prim1) {
  return prim0 - prim1 | 0;
}

var compare$1 = Caml_obj.caml_compare;

var W = {
  weight: weight,
  zero: 0,
  add: add,
  sub: sub,
  compare: compare$1
};

var $$let = G.E;

var partial_arg_V = G.V;

var partial_arg_E = {
  label: $$let.label,
  src: $$let.src,
  dst: $$let.dst,
  create: $$let.create
};

var partial_arg_iter_vertex = G.iter_vertex;

var partial_arg_fold_vertex = G.fold_vertex;

var partial_arg_iter_succ = G.iter_succ;

var partial_arg_iter_succ_e = G.iter_succ_e;

var partial_arg_fold_edges_e = G.fold_edges_e;

var partial_arg_nb_vertex = G.nb_vertex;

var partial_arg = {
  V: partial_arg_V,
  E: partial_arg_E,
  iter_vertex: partial_arg_iter_vertex,
  fold_vertex: partial_arg_fold_vertex,
  iter_succ: partial_arg_iter_succ,
  iter_succ_e: partial_arg_iter_succ_e,
  fold_edges_e: partial_arg_fold_edges_e,
  nb_vertex: partial_arg_nb_vertex
};

var J = Path.Johnson(partial_arg, {
      weight: weight,
      compare: compare$1,
      add: add,
      zero: 0,
      sub: sub
    });

var g = Curry._2(G.create, undefined, undefined);

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 1, 3, 2));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 1, -4, 5));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 1, 8, 3));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 2, 7, 5));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 2, 1, 4));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 3, 4, 2));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 4, -5, 3));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 4, 2, 1));

Curry._2(G.add_edge_e, g, Curry._3(G.E.create, 5, 6, 4));

var test = Curry._1(J.all_pairs_shortest_paths, g);

Curry._2(J.HVV.iter, (function (param, d) {
        return Curry._3(Printf.printf(/* Format */{
                        _0: {
                          TAG: /* Char_literal */12,
                          _0: /* '[' */91,
                          _1: {
                            TAG: /* Int */4,
                            _0: /* Int_d */0,
                            _1: /* No_padding */0,
                            _2: /* No_precision */0,
                            _3: {
                              TAG: /* String_literal */11,
                              _0: " -> ",
                              _1: {
                                TAG: /* Int */4,
                                _0: /* Int_d */0,
                                _1: /* No_padding */0,
                                _2: /* No_precision */0,
                                _3: {
                                  TAG: /* String_literal */11,
                                  _0: " : ",
                                  _1: {
                                    TAG: /* Int */4,
                                    _0: /* Int_d */0,
                                    _1: /* No_padding */0,
                                    _2: /* No_precision */0,
                                    _3: {
                                      TAG: /* String_literal */11,
                                      _0: "]\n",
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        _1: "[%d -> %d : %d]\n"
                      }), param[0], param[1], d);
      }), test);

export {
  Int ,
  G ,
  W ,
  J ,
  g ,
  
}
/* G Not a pure module */
