// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Clique from "../src/clique.bs.js";
import * as Hashtbl from "rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Persistent from "../src/persistent.bs.js";

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var G = Persistent.Graph.Concrete({
      compare: compare,
      hash: Hashtbl.hash,
      equal: equal
    });

var BK = Clique.Bron_Kerbosch({
      V: G.V,
      succ: G.succ,
      fold_vertex: G.fold_vertex
    });

var g = List.fold_left((function (graph, v) {
        return Curry._2(G.add_vertex, graph, v);
      }), G.empty, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: {
              hd: 5,
              tl: {
                hd: 6,
                tl: {
                  hd: 7,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    });

var g$1 = List.fold_left((function (graph, param) {
        return Curry._3(G.add_edge, graph, param[0], param[1]);
      }), g, {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          1,
          5
        ],
        tl: {
          hd: [
            2,
            5
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                4,
                5
              ],
              tl: {
                hd: [
                  3,
                  4
                ],
                tl: {
                  hd: [
                    4,
                    6
                  ],
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    });

var cliques = Curry._1(BK.maximalcliques, g$1);

if (List.length(cliques) !== 6) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          21,
          2
        ],
        Error: new Error()
      };
}

if (!List.exists((function (cl) {
          if (List.length(cl) === 2 && List.mem(2, cl)) {
            return List.mem(3, cl);
          } else {
            return false;
          }
        }), cliques)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          22,
          2
        ],
        Error: new Error()
      };
}

if (!List.exists((function (cl) {
          if (List.length(cl) === 2 && List.mem(3, cl)) {
            return List.mem(4, cl);
          } else {
            return false;
          }
        }), cliques)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          23,
          2
        ],
        Error: new Error()
      };
}

if (!List.exists((function (cl) {
          if (List.length(cl) === 3 && List.mem(1, cl) && List.mem(2, cl)) {
            return List.mem(5, cl);
          } else {
            return false;
          }
        }), cliques)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          24,
          2
        ],
        Error: new Error()
      };
}

if (!List.exists((function (cl) {
          if (List.length(cl) === 2 && List.mem(4, cl)) {
            return List.mem(5, cl);
          } else {
            return false;
          }
        }), cliques)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          25,
          2
        ],
        Error: new Error()
      };
}

if (!List.exists((function (cl) {
          if (List.length(cl) === 2 && List.mem(4, cl)) {
            return List.mem(6, cl);
          } else {
            return false;
          }
        }), cliques)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          26,
          2
        ],
        Error: new Error()
      };
}

if (!List.exists((function (cl) {
          if (List.length(cl) === 1) {
            return List.mem(7, cl);
          } else {
            return false;
          }
        }), cliques)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_clique.ml",
          27,
          2
        ],
        Error: new Error()
      };
}

export {
  G ,
  BK ,
  
}
/* G Not a pure module */
