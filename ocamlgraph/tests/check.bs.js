// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flow from "../src/flow.bs.js";
import * as List from "../../node_modules/rescript/lib/es6/list.js";
import * as Oper from "../src/oper.bs.js";
import * as Pack from "../src/pack.bs.js";
import * as Path from "../src/path.bs.js";
import * as Util from "../src/util.bs.js";
import * as Curry from "../../node_modules/rescript/lib/es6/curry.js";
import * as Format from "../../node_modules/rescript/lib/es6/format.js";
import * as Minsep from "../src/minsep.bs.js";
import * as Builder from "../src/builder.bs.js";
import * as Hashtbl from "../../node_modules/rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "../../node_modules/rescript/lib/es6/caml_obj.js";
import * as Traverse from "../src/traverse.bs.js";
import * as Imperative from "../src/imperative.bs.js";
import * as Persistent from "../src/persistent.bs.js";
import * as Pervasives from "../../node_modules/rescript/lib/es6/pervasives.js";
import * as Test_clique from "./test_clique.bs.js";
import * as Caml_js_exceptions from "../../node_modules/rescript/lib/es6/caml_js_exceptions.js";

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var Int = {
  compare: compare,
  hash: Hashtbl.hash,
  equal: equal,
  $$default: 0
};

function compare$1(param, param$1) {
  return Caml_obj.caml_compare(param[0], param$1[0]);
}

function hash(param) {
  return Hashtbl.hash(param[0]);
}

function equal$1(param, param$1) {
  return Caml_obj.caml_equal(param[0], param$1[0]);
}

var $$default = [
  0,
  0
];

var Pair = {
  compare: compare$1,
  hash: hash,
  equal: equal$1,
  $$default: $$default
};

function W(E) {
  var add = function (prim0, prim1) {
    return prim0 + prim1 | 0;
  };
  var compare = Caml_obj.caml_compare;
  return {
          weight: E.label,
          zero: 0,
          add: add,
          compare: compare
        };
}

function Make(G, V) {
  var O = Oper.I(G);
  var test_mirror = function (g) {
    if (!G.is_directed) {
      return ;
    }
    var g$p = Curry._1(O.mirror, g);
    if (Curry._1(G.nb_vertex, g) !== Curry._1(G.nb_vertex, g$p)) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "check.ml",
              62,
              1
            ],
            Error: new Error()
          };
    }
    Curry._2(G.iter_edges, (function (v1, v2) {
            if (Curry._3(G.mem_edge, g$p, v2, v1)) {
              return ;
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "check.ml",
                    63,
                    28
                  ],
                  Error: new Error()
                };
          }), g);
    Curry._2(G.iter_edges, (function (v1, v2) {
            if (Curry._3(G.mem_edge, g, v2, v1)) {
              return ;
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "check.ml",
                    64,
                    28
                  ],
                  Error: new Error()
                };
          }), g$p);
    
  };
  var g = Curry._2(G.create, undefined, undefined);
  var v1 = Curry._1(G.V.create, 1);
  var v2 = Curry._1(G.V.create, 2);
  var v3 = Curry._1(G.V.create, 3);
  test_mirror(g);
  Curry._3(G.add_edge, g, v1, v2);
  Curry._3(G.add_edge, g, v1, v3);
  Curry._3(G.add_edge, g, v2, v1);
  Curry._3(G.add_edge, g, v2, v2);
  Curry._3(G.add_edge, g, v2, v2);
  test_mirror(g);
  if (!(Curry._1(G.nb_vertex, g) === V.v && Curry._1(G.nb_edges, g) === V.e)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            80,
            6
          ],
          Error: new Error()
        };
  }
  Curry._2(G.remove_vertex, g, v1);
  if (!(Curry._1(G.nb_vertex, g) === 2 && Curry._1(G.nb_edges, g) === 1)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            82,
            6
          ],
          Error: new Error()
        };
  }
  Curry._2(G.remove_vertex, g, v2);
  if (!(Curry._1(G.nb_vertex, g) === 1 && Curry._1(G.nb_edges, g) === 0)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            84,
            6
          ],
          Error: new Error()
        };
  }
  test_mirror(g);
  Curry._1(G.clear, g);
  if (!(Curry._1(G.nb_vertex, g) === 0 && Curry._1(G.nb_edges, g) === 0)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            87,
            6
          ],
          Error: new Error()
        };
  }
  return {
          O: O,
          test_mirror: test_mirror,
          g: g
        };
}

var param = {
  compare: compare,
  $$default: 0
};

var partial_arg = Imperative.Digraph.ConcreteLabeled(Int, param);

var O = Oper.I(partial_arg);

function test_mirror(g) {
  if (!partial_arg.is_directed) {
    return ;
  }
  var g$p = Curry._1(O.mirror, g);
  if (Curry._1(partial_arg.nb_vertex, g) !== Curry._1(partial_arg.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g = Curry._2(partial_arg.create, undefined, undefined);

var v1 = Curry._1(partial_arg.V.create, 1);

var v2 = Curry._1(partial_arg.V.create, 2);

var v3 = Curry._1(partial_arg.V.create, 3);

test_mirror(g);

Curry._3(partial_arg.add_edge, g, v1, v2);

Curry._3(partial_arg.add_edge, g, v1, v3);

Curry._3(partial_arg.add_edge, g, v2, v1);

Curry._3(partial_arg.add_edge, g, v2, v2);

Curry._3(partial_arg.add_edge, g, v2, v2);

test_mirror(g);

if (!(Curry._1(partial_arg.nb_vertex, g) === 3 && Curry._1(partial_arg.nb_edges, g) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg.remove_vertex, g, v1);

if (!(Curry._1(partial_arg.nb_vertex, g) === 2 && Curry._1(partial_arg.nb_edges, g) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg.remove_vertex, g, v2);

if (!(Curry._1(partial_arg.nb_vertex, g) === 1 && Curry._1(partial_arg.nb_edges, g) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror(g);

Curry._1(partial_arg.clear, g);

if (!(Curry._1(partial_arg.nb_vertex, g) === 0 && Curry._1(partial_arg.nb_edges, g) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var param$1 = {
  compare: compare,
  $$default: 0
};

var partial_arg$1 = Imperative.Graph.ConcreteLabeled(Int, param$1);

var O$1 = Oper.I(partial_arg$1);

function test_mirror$1(g) {
  if (!partial_arg$1.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$1.mirror, g);
  if (Curry._1(partial_arg$1.nb_vertex, g) !== Curry._1(partial_arg$1.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$1.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$1.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$1.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$1.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$1 = Curry._2(partial_arg$1.create, undefined, undefined);

var v1$1 = Curry._1(partial_arg$1.V.create, 1);

var v2$1 = Curry._1(partial_arg$1.V.create, 2);

var v3$1 = Curry._1(partial_arg$1.V.create, 3);

test_mirror$1(g$1);

Curry._3(partial_arg$1.add_edge, g$1, v1$1, v2$1);

Curry._3(partial_arg$1.add_edge, g$1, v1$1, v3$1);

Curry._3(partial_arg$1.add_edge, g$1, v2$1, v1$1);

Curry._3(partial_arg$1.add_edge, g$1, v2$1, v2$1);

Curry._3(partial_arg$1.add_edge, g$1, v2$1, v2$1);

test_mirror$1(g$1);

if (!(Curry._1(partial_arg$1.nb_vertex, g$1) === 3 && Curry._1(partial_arg$1.nb_edges, g$1) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$1.remove_vertex, g$1, v1$1);

if (!(Curry._1(partial_arg$1.nb_vertex, g$1) === 2 && Curry._1(partial_arg$1.nb_edges, g$1) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$1.remove_vertex, g$1, v2$1);

if (!(Curry._1(partial_arg$1.nb_vertex, g$1) === 1 && Curry._1(partial_arg$1.nb_edges, g$1) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$1(g$1);

Curry._1(partial_arg$1.clear, g$1);

if (!(Curry._1(partial_arg$1.nb_vertex, g$1) === 0 && Curry._1(partial_arg$1.nb_edges, g$1) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$2 = {};

var param$2 = {
  compare: compare,
  $$default: 0
};

var partial_arg$3 = Imperative.Digraph.AbstractLabeled(partial_arg$2, param$2);

var O$2 = Oper.I(partial_arg$3);

function test_mirror$2(g) {
  if (!partial_arg$3.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$2.mirror, g);
  if (Curry._1(partial_arg$3.nb_vertex, g) !== Curry._1(partial_arg$3.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$3.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$3.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$3.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$3.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$2 = Curry._2(partial_arg$3.create, undefined, undefined);

var v1$2 = Curry._1(partial_arg$3.V.create, 1);

var v2$2 = Curry._1(partial_arg$3.V.create, 2);

var v3$2 = Curry._1(partial_arg$3.V.create, 3);

test_mirror$2(g$2);

Curry._3(partial_arg$3.add_edge, g$2, v1$2, v2$2);

Curry._3(partial_arg$3.add_edge, g$2, v1$2, v3$2);

Curry._3(partial_arg$3.add_edge, g$2, v2$2, v1$2);

Curry._3(partial_arg$3.add_edge, g$2, v2$2, v2$2);

Curry._3(partial_arg$3.add_edge, g$2, v2$2, v2$2);

test_mirror$2(g$2);

if (!(Curry._1(partial_arg$3.nb_vertex, g$2) === 3 && Curry._1(partial_arg$3.nb_edges, g$2) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$3.remove_vertex, g$2, v1$2);

if (!(Curry._1(partial_arg$3.nb_vertex, g$2) === 2 && Curry._1(partial_arg$3.nb_edges, g$2) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$3.remove_vertex, g$2, v2$2);

if (!(Curry._1(partial_arg$3.nb_vertex, g$2) === 1 && Curry._1(partial_arg$3.nb_edges, g$2) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$2(g$2);

Curry._1(partial_arg$3.clear, g$2);

if (!(Curry._1(partial_arg$3.nb_vertex, g$2) === 0 && Curry._1(partial_arg$3.nb_edges, g$2) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$4 = {};

var param$3 = {
  compare: compare,
  $$default: 0
};

var partial_arg$5 = Imperative.Graph.AbstractLabeled(partial_arg$4, param$3);

var O$3 = Oper.I(partial_arg$5);

function test_mirror$3(g) {
  if (!partial_arg$5.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$3.mirror, g);
  if (Curry._1(partial_arg$5.nb_vertex, g) !== Curry._1(partial_arg$5.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$5.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$5.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$5.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$5.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$3 = Curry._2(partial_arg$5.create, undefined, undefined);

var v1$3 = Curry._1(partial_arg$5.V.create, 1);

var v2$3 = Curry._1(partial_arg$5.V.create, 2);

var v3$3 = Curry._1(partial_arg$5.V.create, 3);

test_mirror$3(g$3);

Curry._3(partial_arg$5.add_edge, g$3, v1$3, v2$3);

Curry._3(partial_arg$5.add_edge, g$3, v1$3, v3$3);

Curry._3(partial_arg$5.add_edge, g$3, v2$3, v1$3);

Curry._3(partial_arg$5.add_edge, g$3, v2$3, v2$3);

Curry._3(partial_arg$5.add_edge, g$3, v2$3, v2$3);

test_mirror$3(g$3);

if (!(Curry._1(partial_arg$5.nb_vertex, g$3) === 3 && Curry._1(partial_arg$5.nb_edges, g$3) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$5.remove_vertex, g$3, v1$3);

if (!(Curry._1(partial_arg$5.nb_vertex, g$3) === 2 && Curry._1(partial_arg$5.nb_edges, g$3) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$5.remove_vertex, g$3, v2$3);

if (!(Curry._1(partial_arg$5.nb_vertex, g$3) === 1 && Curry._1(partial_arg$5.nb_edges, g$3) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$3(g$3);

Curry._1(partial_arg$5.clear, g$3);

if (!(Curry._1(partial_arg$5.nb_vertex, g$3) === 0 && Curry._1(partial_arg$5.nb_edges, g$3) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$6 = Imperative.Digraph.Concrete(Int);

var O$4 = Oper.I(partial_arg$6);

function test_mirror$4(g) {
  if (!partial_arg$6.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$4.mirror, g);
  if (Curry._1(partial_arg$6.nb_vertex, g) !== Curry._1(partial_arg$6.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$6.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$6.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$6.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$6.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$4 = Curry._2(partial_arg$6.create, undefined, undefined);

var v1$4 = Curry._1(partial_arg$6.V.create, 1);

var v2$4 = Curry._1(partial_arg$6.V.create, 2);

var v3$4 = Curry._1(partial_arg$6.V.create, 3);

test_mirror$4(g$4);

Curry._3(partial_arg$6.add_edge, g$4, v1$4, v2$4);

Curry._3(partial_arg$6.add_edge, g$4, v1$4, v3$4);

Curry._3(partial_arg$6.add_edge, g$4, v2$4, v1$4);

Curry._3(partial_arg$6.add_edge, g$4, v2$4, v2$4);

Curry._3(partial_arg$6.add_edge, g$4, v2$4, v2$4);

test_mirror$4(g$4);

if (!(Curry._1(partial_arg$6.nb_vertex, g$4) === 3 && Curry._1(partial_arg$6.nb_edges, g$4) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$6.remove_vertex, g$4, v1$4);

if (!(Curry._1(partial_arg$6.nb_vertex, g$4) === 2 && Curry._1(partial_arg$6.nb_edges, g$4) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$6.remove_vertex, g$4, v2$4);

if (!(Curry._1(partial_arg$6.nb_vertex, g$4) === 1 && Curry._1(partial_arg$6.nb_edges, g$4) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$4(g$4);

Curry._1(partial_arg$6.clear, g$4);

if (!(Curry._1(partial_arg$6.nb_vertex, g$4) === 0 && Curry._1(partial_arg$6.nb_edges, g$4) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$7 = Imperative.Graph.Concrete(Int);

var O$5 = Oper.I(partial_arg$7);

function test_mirror$5(g) {
  if (!partial_arg$7.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$5.mirror, g);
  if (Curry._1(partial_arg$7.nb_vertex, g) !== Curry._1(partial_arg$7.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$7.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$7.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$7.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$7.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$5 = Curry._2(partial_arg$7.create, undefined, undefined);

var v1$5 = Curry._1(partial_arg$7.V.create, 1);

var v2$5 = Curry._1(partial_arg$7.V.create, 2);

var v3$5 = Curry._1(partial_arg$7.V.create, 3);

test_mirror$5(g$5);

Curry._3(partial_arg$7.add_edge, g$5, v1$5, v2$5);

Curry._3(partial_arg$7.add_edge, g$5, v1$5, v3$5);

Curry._3(partial_arg$7.add_edge, g$5, v2$5, v1$5);

Curry._3(partial_arg$7.add_edge, g$5, v2$5, v2$5);

Curry._3(partial_arg$7.add_edge, g$5, v2$5, v2$5);

test_mirror$5(g$5);

if (!(Curry._1(partial_arg$7.nb_vertex, g$5) === 3 && Curry._1(partial_arg$7.nb_edges, g$5) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$7.remove_vertex, g$5, v1$5);

if (!(Curry._1(partial_arg$7.nb_vertex, g$5) === 2 && Curry._1(partial_arg$7.nb_edges, g$5) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$7.remove_vertex, g$5, v2$5);

if (!(Curry._1(partial_arg$7.nb_vertex, g$5) === 1 && Curry._1(partial_arg$7.nb_edges, g$5) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$5(g$5);

Curry._1(partial_arg$7.clear, g$5);

if (!(Curry._1(partial_arg$7.nb_vertex, g$5) === 0 && Curry._1(partial_arg$7.nb_edges, g$5) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$8 = Imperative.Digraph.Abstract({});

var O$6 = Oper.I(partial_arg$8);

function test_mirror$6(g) {
  if (!partial_arg$8.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$6.mirror, g);
  if (Curry._1(partial_arg$8.nb_vertex, g) !== Curry._1(partial_arg$8.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$8.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$8.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$8.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$8.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$6 = Curry._2(partial_arg$8.create, undefined, undefined);

var v1$6 = Curry._1(partial_arg$8.V.create, 1);

var v2$6 = Curry._1(partial_arg$8.V.create, 2);

var v3$6 = Curry._1(partial_arg$8.V.create, 3);

test_mirror$6(g$6);

Curry._3(partial_arg$8.add_edge, g$6, v1$6, v2$6);

Curry._3(partial_arg$8.add_edge, g$6, v1$6, v3$6);

Curry._3(partial_arg$8.add_edge, g$6, v2$6, v1$6);

Curry._3(partial_arg$8.add_edge, g$6, v2$6, v2$6);

Curry._3(partial_arg$8.add_edge, g$6, v2$6, v2$6);

test_mirror$6(g$6);

if (!(Curry._1(partial_arg$8.nb_vertex, g$6) === 3 && Curry._1(partial_arg$8.nb_edges, g$6) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$8.remove_vertex, g$6, v1$6);

if (!(Curry._1(partial_arg$8.nb_vertex, g$6) === 2 && Curry._1(partial_arg$8.nb_edges, g$6) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$8.remove_vertex, g$6, v2$6);

if (!(Curry._1(partial_arg$8.nb_vertex, g$6) === 1 && Curry._1(partial_arg$8.nb_edges, g$6) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$6(g$6);

Curry._1(partial_arg$8.clear, g$6);

if (!(Curry._1(partial_arg$8.nb_vertex, g$6) === 0 && Curry._1(partial_arg$8.nb_edges, g$6) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$9 = Imperative.Graph.Abstract({});

var O$7 = Oper.I(partial_arg$9);

function test_mirror$7(g) {
  if (!partial_arg$9.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$7.mirror, g);
  if (Curry._1(partial_arg$9.nb_vertex, g) !== Curry._1(partial_arg$9.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$9.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$9.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$9.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$9.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$7 = Curry._2(partial_arg$9.create, undefined, undefined);

var v1$7 = Curry._1(partial_arg$9.V.create, 1);

var v2$7 = Curry._1(partial_arg$9.V.create, 2);

var v3$7 = Curry._1(partial_arg$9.V.create, 3);

test_mirror$7(g$7);

Curry._3(partial_arg$9.add_edge, g$7, v1$7, v2$7);

Curry._3(partial_arg$9.add_edge, g$7, v1$7, v3$7);

Curry._3(partial_arg$9.add_edge, g$7, v2$7, v1$7);

Curry._3(partial_arg$9.add_edge, g$7, v2$7, v2$7);

Curry._3(partial_arg$9.add_edge, g$7, v2$7, v2$7);

test_mirror$7(g$7);

if (!(Curry._1(partial_arg$9.nb_vertex, g$7) === 3 && Curry._1(partial_arg$9.nb_edges, g$7) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$9.remove_vertex, g$7, v1$7);

if (!(Curry._1(partial_arg$9.nb_vertex, g$7) === 2 && Curry._1(partial_arg$9.nb_edges, g$7) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$9.remove_vertex, g$7, v2$7);

if (!(Curry._1(partial_arg$9.nb_vertex, g$7) === 1 && Curry._1(partial_arg$9.nb_edges, g$7) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$7(g$7);

Curry._1(partial_arg$9.clear, g$7);

if (!(Curry._1(partial_arg$9.nb_vertex, g$7) === 0 && Curry._1(partial_arg$9.nb_edges, g$7) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$10 = Imperative.Digraph.ConcreteBidirectional(Int);

var O$8 = Oper.I(partial_arg$10);

function test_mirror$8(g) {
  if (!partial_arg$10.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$8.mirror, g);
  if (Curry._1(partial_arg$10.nb_vertex, g) !== Curry._1(partial_arg$10.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$10.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$10.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$10.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$10.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$8 = Curry._2(partial_arg$10.create, undefined, undefined);

var v1$8 = Curry._1(partial_arg$10.V.create, 1);

var v2$8 = Curry._1(partial_arg$10.V.create, 2);

var v3$8 = Curry._1(partial_arg$10.V.create, 3);

test_mirror$8(g$8);

Curry._3(partial_arg$10.add_edge, g$8, v1$8, v2$8);

Curry._3(partial_arg$10.add_edge, g$8, v1$8, v3$8);

Curry._3(partial_arg$10.add_edge, g$8, v2$8, v1$8);

Curry._3(partial_arg$10.add_edge, g$8, v2$8, v2$8);

Curry._3(partial_arg$10.add_edge, g$8, v2$8, v2$8);

test_mirror$8(g$8);

if (!(Curry._1(partial_arg$10.nb_vertex, g$8) === 3 && Curry._1(partial_arg$10.nb_edges, g$8) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$10.remove_vertex, g$8, v1$8);

if (!(Curry._1(partial_arg$10.nb_vertex, g$8) === 2 && Curry._1(partial_arg$10.nb_edges, g$8) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$10.remove_vertex, g$8, v2$8);

if (!(Curry._1(partial_arg$10.nb_vertex, g$8) === 1 && Curry._1(partial_arg$10.nb_edges, g$8) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$8(g$8);

Curry._1(partial_arg$10.clear, g$8);

if (!(Curry._1(partial_arg$10.nb_vertex, g$8) === 0 && Curry._1(partial_arg$10.nb_edges, g$8) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

var param$4 = {
  compare: compare,
  $$default: 0
};

var partial_arg$11 = Imperative.Digraph.ConcreteBidirectionalLabeled(Int, param$4);

var O$9 = Oper.I(partial_arg$11);

function test_mirror$9(g) {
  if (!partial_arg$11.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$9.mirror, g);
  if (Curry._1(partial_arg$11.nb_vertex, g) !== Curry._1(partial_arg$11.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            62,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$11.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$11.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  63,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$11.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$11.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  64,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$9 = Curry._2(partial_arg$11.create, undefined, undefined);

var v1$9 = Curry._1(partial_arg$11.V.create, 1);

var v2$9 = Curry._1(partial_arg$11.V.create, 2);

var v3$9 = Curry._1(partial_arg$11.V.create, 3);

test_mirror$9(g$9);

Curry._3(partial_arg$11.add_edge, g$9, v1$9, v2$9);

Curry._3(partial_arg$11.add_edge, g$9, v1$9, v3$9);

Curry._3(partial_arg$11.add_edge, g$9, v2$9, v1$9);

Curry._3(partial_arg$11.add_edge, g$9, v2$9, v2$9);

Curry._3(partial_arg$11.add_edge, g$9, v2$9, v2$9);

test_mirror$9(g$9);

if (!(Curry._1(partial_arg$11.nb_vertex, g$9) === 3 && Curry._1(partial_arg$11.nb_edges, g$9) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          80,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$11.remove_vertex, g$9, v1$9);

if (!(Curry._1(partial_arg$11.nb_vertex, g$9) === 2 && Curry._1(partial_arg$11.nb_edges, g$9) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          82,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$11.remove_vertex, g$9, v2$9);

if (!(Curry._1(partial_arg$11.nb_vertex, g$9) === 1 && Curry._1(partial_arg$11.nb_edges, g$9) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          84,
          6
        ],
        Error: new Error()
      };
}

test_mirror$9(g$9);

Curry._1(partial_arg$11.clear, g$9);

if (!(Curry._1(partial_arg$11.nb_vertex, g$9) === 0 && Curry._1(partial_arg$11.nb_edges, g$9) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          87,
          6
        ],
        Error: new Error()
      };
}

function MakeP(G, V) {
  var O = Oper.P(G);
  var test_mirror = function (g) {
    var g$p = Curry._1(O.mirror, g);
    if (Curry._1(G.nb_vertex, g) === Curry._1(G.nb_vertex, g$p)) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            143,
            6
          ],
          Error: new Error()
        };
  };
  var g = G.empty;
  var v1 = Curry._1(G.V.create, 1);
  var v2 = Curry._1(G.V.create, 2);
  var v3 = Curry._1(G.V.create, 3);
  test_mirror(g);
  var g$1 = Curry._3(G.add_edge, g, v1, v2);
  var g$2 = Curry._3(G.add_edge, g$1, v1, v3);
  var g$3 = Curry._3(G.add_edge, g$2, v2, v1);
  var g$4 = Curry._3(G.add_edge, g$3, v2, v2);
  var g$5 = Curry._3(G.add_edge, g$4, v2, v2);
  test_mirror(g$5);
  if (!(Curry._1(G.nb_vertex, g$5) === V.v && Curry._1(G.nb_edges, g$5) === V.e)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            157,
            6
          ],
          Error: new Error()
        };
  }
  var g$6 = Curry._2(G.remove_vertex, g$5, v1);
  if (!(Curry._1(G.nb_vertex, g$6) === 2 && Curry._1(G.nb_edges, g$6) === 1)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            159,
            6
          ],
          Error: new Error()
        };
  }
  var g$7 = Curry._2(G.remove_vertex, g$6, v2);
  if (!(Curry._1(G.nb_vertex, g$7) === 1 && Curry._1(G.nb_edges, g$7) === 0)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            161,
            6
          ],
          Error: new Error()
        };
  }
  test_mirror(g$7);
  return {
          O: O,
          test_mirror: test_mirror
        };
}

var param$5 = {
  compare: compare,
  $$default: 0
};

var partial_arg$12 = Persistent.Digraph.ConcreteLabeled(Int, param$5);

var O$10 = Oper.P(partial_arg$12);

function test_mirror$10(g) {
  var g$p = Curry._1(O$10.mirror, g);
  if (Curry._1(partial_arg$12.nb_vertex, g) === Curry._1(partial_arg$12.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$10 = partial_arg$12.empty;

var v1$10 = Curry._1(partial_arg$12.V.create, 1);

var v2$10 = Curry._1(partial_arg$12.V.create, 2);

var v3$10 = Curry._1(partial_arg$12.V.create, 3);

test_mirror$10(g$10);

var g$11 = Curry._3(partial_arg$12.add_edge, g$10, v1$10, v2$10);

var g$12 = Curry._3(partial_arg$12.add_edge, g$11, v1$10, v3$10);

var g$13 = Curry._3(partial_arg$12.add_edge, g$12, v2$10, v1$10);

var g$14 = Curry._3(partial_arg$12.add_edge, g$13, v2$10, v2$10);

var g$15 = Curry._3(partial_arg$12.add_edge, g$14, v2$10, v2$10);

test_mirror$10(g$15);

if (!(Curry._1(partial_arg$12.nb_vertex, g$15) === 3 && Curry._1(partial_arg$12.nb_edges, g$15) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$16 = Curry._2(partial_arg$12.remove_vertex, g$15, v1$10);

if (!(Curry._1(partial_arg$12.nb_vertex, g$16) === 2 && Curry._1(partial_arg$12.nb_edges, g$16) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$17 = Curry._2(partial_arg$12.remove_vertex, g$16, v2$10);

if (!(Curry._1(partial_arg$12.nb_vertex, g$17) === 1 && Curry._1(partial_arg$12.nb_edges, g$17) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$10(g$17);

var param$6 = {
  compare: compare,
  $$default: 0
};

var partial_arg$13 = Persistent.Graph.ConcreteLabeled(Int, param$6);

var O$11 = Oper.P(partial_arg$13);

function test_mirror$11(g) {
  var g$p = Curry._1(O$11.mirror, g);
  if (Curry._1(partial_arg$13.nb_vertex, g) === Curry._1(partial_arg$13.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$18 = partial_arg$13.empty;

var v1$11 = Curry._1(partial_arg$13.V.create, 1);

var v2$11 = Curry._1(partial_arg$13.V.create, 2);

var v3$11 = Curry._1(partial_arg$13.V.create, 3);

test_mirror$11(g$18);

var g$19 = Curry._3(partial_arg$13.add_edge, g$18, v1$11, v2$11);

var g$20 = Curry._3(partial_arg$13.add_edge, g$19, v1$11, v3$11);

var g$21 = Curry._3(partial_arg$13.add_edge, g$20, v2$11, v1$11);

var g$22 = Curry._3(partial_arg$13.add_edge, g$21, v2$11, v2$11);

var g$23 = Curry._3(partial_arg$13.add_edge, g$22, v2$11, v2$11);

test_mirror$11(g$23);

if (!(Curry._1(partial_arg$13.nb_vertex, g$23) === 3 && Curry._1(partial_arg$13.nb_edges, g$23) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$24 = Curry._2(partial_arg$13.remove_vertex, g$23, v1$11);

if (!(Curry._1(partial_arg$13.nb_vertex, g$24) === 2 && Curry._1(partial_arg$13.nb_edges, g$24) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$25 = Curry._2(partial_arg$13.remove_vertex, g$24, v2$11);

if (!(Curry._1(partial_arg$13.nb_vertex, g$25) === 1 && Curry._1(partial_arg$13.nb_edges, g$25) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$11(g$25);

var partial_arg$14 = {};

var param$7 = {
  compare: compare,
  $$default: 0
};

var partial_arg$15 = Persistent.Digraph.AbstractLabeled(partial_arg$14, param$7);

var O$12 = Oper.P(partial_arg$15);

function test_mirror$12(g) {
  var g$p = Curry._1(O$12.mirror, g);
  if (Curry._1(partial_arg$15.nb_vertex, g) === Curry._1(partial_arg$15.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$26 = partial_arg$15.empty;

var v1$12 = Curry._1(partial_arg$15.V.create, 1);

var v2$12 = Curry._1(partial_arg$15.V.create, 2);

var v3$12 = Curry._1(partial_arg$15.V.create, 3);

test_mirror$12(g$26);

var g$27 = Curry._3(partial_arg$15.add_edge, g$26, v1$12, v2$12);

var g$28 = Curry._3(partial_arg$15.add_edge, g$27, v1$12, v3$12);

var g$29 = Curry._3(partial_arg$15.add_edge, g$28, v2$12, v1$12);

var g$30 = Curry._3(partial_arg$15.add_edge, g$29, v2$12, v2$12);

var g$31 = Curry._3(partial_arg$15.add_edge, g$30, v2$12, v2$12);

test_mirror$12(g$31);

if (!(Curry._1(partial_arg$15.nb_vertex, g$31) === 3 && Curry._1(partial_arg$15.nb_edges, g$31) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$32 = Curry._2(partial_arg$15.remove_vertex, g$31, v1$12);

if (!(Curry._1(partial_arg$15.nb_vertex, g$32) === 2 && Curry._1(partial_arg$15.nb_edges, g$32) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$33 = Curry._2(partial_arg$15.remove_vertex, g$32, v2$12);

if (!(Curry._1(partial_arg$15.nb_vertex, g$33) === 1 && Curry._1(partial_arg$15.nb_edges, g$33) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$12(g$33);

var partial_arg$16 = {};

var param$8 = {
  compare: compare,
  $$default: 0
};

var partial_arg$17 = Persistent.Graph.AbstractLabeled(partial_arg$16, param$8);

var O$13 = Oper.P(partial_arg$17);

function test_mirror$13(g) {
  var g$p = Curry._1(O$13.mirror, g);
  if (Curry._1(partial_arg$17.nb_vertex, g) === Curry._1(partial_arg$17.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$34 = partial_arg$17.empty;

var v1$13 = Curry._1(partial_arg$17.V.create, 1);

var v2$13 = Curry._1(partial_arg$17.V.create, 2);

var v3$13 = Curry._1(partial_arg$17.V.create, 3);

test_mirror$13(g$34);

var g$35 = Curry._3(partial_arg$17.add_edge, g$34, v1$13, v2$13);

var g$36 = Curry._3(partial_arg$17.add_edge, g$35, v1$13, v3$13);

var g$37 = Curry._3(partial_arg$17.add_edge, g$36, v2$13, v1$13);

var g$38 = Curry._3(partial_arg$17.add_edge, g$37, v2$13, v2$13);

var g$39 = Curry._3(partial_arg$17.add_edge, g$38, v2$13, v2$13);

test_mirror$13(g$39);

if (!(Curry._1(partial_arg$17.nb_vertex, g$39) === 3 && Curry._1(partial_arg$17.nb_edges, g$39) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$40 = Curry._2(partial_arg$17.remove_vertex, g$39, v1$13);

if (!(Curry._1(partial_arg$17.nb_vertex, g$40) === 2 && Curry._1(partial_arg$17.nb_edges, g$40) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$41 = Curry._2(partial_arg$17.remove_vertex, g$40, v2$13);

if (!(Curry._1(partial_arg$17.nb_vertex, g$41) === 1 && Curry._1(partial_arg$17.nb_edges, g$41) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$13(g$41);

var partial_arg$18 = Persistent.Digraph.Concrete(Int);

var O$14 = Oper.P(partial_arg$18);

function test_mirror$14(g) {
  var g$p = Curry._1(O$14.mirror, g);
  if (Curry._1(partial_arg$18.nb_vertex, g) === Curry._1(partial_arg$18.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$42 = partial_arg$18.empty;

var v1$14 = Curry._1(partial_arg$18.V.create, 1);

var v2$14 = Curry._1(partial_arg$18.V.create, 2);

var v3$14 = Curry._1(partial_arg$18.V.create, 3);

test_mirror$14(g$42);

var g$43 = Curry._3(partial_arg$18.add_edge, g$42, v1$14, v2$14);

var g$44 = Curry._3(partial_arg$18.add_edge, g$43, v1$14, v3$14);

var g$45 = Curry._3(partial_arg$18.add_edge, g$44, v2$14, v1$14);

var g$46 = Curry._3(partial_arg$18.add_edge, g$45, v2$14, v2$14);

var g$47 = Curry._3(partial_arg$18.add_edge, g$46, v2$14, v2$14);

test_mirror$14(g$47);

if (!(Curry._1(partial_arg$18.nb_vertex, g$47) === 3 && Curry._1(partial_arg$18.nb_edges, g$47) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$48 = Curry._2(partial_arg$18.remove_vertex, g$47, v1$14);

if (!(Curry._1(partial_arg$18.nb_vertex, g$48) === 2 && Curry._1(partial_arg$18.nb_edges, g$48) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$49 = Curry._2(partial_arg$18.remove_vertex, g$48, v2$14);

if (!(Curry._1(partial_arg$18.nb_vertex, g$49) === 1 && Curry._1(partial_arg$18.nb_edges, g$49) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$14(g$49);

var partial_arg$19 = Persistent.Graph.Concrete(Int);

var O$15 = Oper.P(partial_arg$19);

function test_mirror$15(g) {
  var g$p = Curry._1(O$15.mirror, g);
  if (Curry._1(partial_arg$19.nb_vertex, g) === Curry._1(partial_arg$19.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$50 = partial_arg$19.empty;

var v1$15 = Curry._1(partial_arg$19.V.create, 1);

var v2$15 = Curry._1(partial_arg$19.V.create, 2);

var v3$15 = Curry._1(partial_arg$19.V.create, 3);

test_mirror$15(g$50);

var g$51 = Curry._3(partial_arg$19.add_edge, g$50, v1$15, v2$15);

var g$52 = Curry._3(partial_arg$19.add_edge, g$51, v1$15, v3$15);

var g$53 = Curry._3(partial_arg$19.add_edge, g$52, v2$15, v1$15);

var g$54 = Curry._3(partial_arg$19.add_edge, g$53, v2$15, v2$15);

var g$55 = Curry._3(partial_arg$19.add_edge, g$54, v2$15, v2$15);

test_mirror$15(g$55);

if (!(Curry._1(partial_arg$19.nb_vertex, g$55) === 3 && Curry._1(partial_arg$19.nb_edges, g$55) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$56 = Curry._2(partial_arg$19.remove_vertex, g$55, v1$15);

if (!(Curry._1(partial_arg$19.nb_vertex, g$56) === 2 && Curry._1(partial_arg$19.nb_edges, g$56) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$57 = Curry._2(partial_arg$19.remove_vertex, g$56, v2$15);

if (!(Curry._1(partial_arg$19.nb_vertex, g$57) === 1 && Curry._1(partial_arg$19.nb_edges, g$57) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$15(g$57);

var partial_arg$20 = Persistent.Digraph.Abstract({});

var O$16 = Oper.P(partial_arg$20);

function test_mirror$16(g) {
  var g$p = Curry._1(O$16.mirror, g);
  if (Curry._1(partial_arg$20.nb_vertex, g) === Curry._1(partial_arg$20.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$58 = partial_arg$20.empty;

var v1$16 = Curry._1(partial_arg$20.V.create, 1);

var v2$16 = Curry._1(partial_arg$20.V.create, 2);

var v3$16 = Curry._1(partial_arg$20.V.create, 3);

test_mirror$16(g$58);

var g$59 = Curry._3(partial_arg$20.add_edge, g$58, v1$16, v2$16);

var g$60 = Curry._3(partial_arg$20.add_edge, g$59, v1$16, v3$16);

var g$61 = Curry._3(partial_arg$20.add_edge, g$60, v2$16, v1$16);

var g$62 = Curry._3(partial_arg$20.add_edge, g$61, v2$16, v2$16);

var g$63 = Curry._3(partial_arg$20.add_edge, g$62, v2$16, v2$16);

test_mirror$16(g$63);

if (!(Curry._1(partial_arg$20.nb_vertex, g$63) === 3 && Curry._1(partial_arg$20.nb_edges, g$63) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$64 = Curry._2(partial_arg$20.remove_vertex, g$63, v1$16);

if (!(Curry._1(partial_arg$20.nb_vertex, g$64) === 2 && Curry._1(partial_arg$20.nb_edges, g$64) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$65 = Curry._2(partial_arg$20.remove_vertex, g$64, v2$16);

if (!(Curry._1(partial_arg$20.nb_vertex, g$65) === 1 && Curry._1(partial_arg$20.nb_edges, g$65) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$16(g$65);

var partial_arg$21 = Persistent.Graph.Abstract({});

var O$17 = Oper.P(partial_arg$21);

function test_mirror$17(g) {
  var g$p = Curry._1(O$17.mirror, g);
  if (Curry._1(partial_arg$21.nb_vertex, g) === Curry._1(partial_arg$21.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$66 = partial_arg$21.empty;

var v1$17 = Curry._1(partial_arg$21.V.create, 1);

var v2$17 = Curry._1(partial_arg$21.V.create, 2);

var v3$17 = Curry._1(partial_arg$21.V.create, 3);

test_mirror$17(g$66);

var g$67 = Curry._3(partial_arg$21.add_edge, g$66, v1$17, v2$17);

var g$68 = Curry._3(partial_arg$21.add_edge, g$67, v1$17, v3$17);

var g$69 = Curry._3(partial_arg$21.add_edge, g$68, v2$17, v1$17);

var g$70 = Curry._3(partial_arg$21.add_edge, g$69, v2$17, v2$17);

var g$71 = Curry._3(partial_arg$21.add_edge, g$70, v2$17, v2$17);

test_mirror$17(g$71);

if (!(Curry._1(partial_arg$21.nb_vertex, g$71) === 3 && Curry._1(partial_arg$21.nb_edges, g$71) === 3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$72 = Curry._2(partial_arg$21.remove_vertex, g$71, v1$17);

if (!(Curry._1(partial_arg$21.nb_vertex, g$72) === 2 && Curry._1(partial_arg$21.nb_edges, g$72) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$73 = Curry._2(partial_arg$21.remove_vertex, g$72, v2$17);

if (!(Curry._1(partial_arg$21.nb_vertex, g$73) === 1 && Curry._1(partial_arg$21.nb_edges, g$73) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$17(g$73);

var partial_arg$22 = Persistent.Digraph.ConcreteBidirectional(Int);

var O$18 = Oper.P(partial_arg$22);

function test_mirror$18(g) {
  var g$p = Curry._1(O$18.mirror, g);
  if (Curry._1(partial_arg$22.nb_vertex, g) === Curry._1(partial_arg$22.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$74 = partial_arg$22.empty;

var v1$18 = Curry._1(partial_arg$22.V.create, 1);

var v2$18 = Curry._1(partial_arg$22.V.create, 2);

var v3$18 = Curry._1(partial_arg$22.V.create, 3);

test_mirror$18(g$74);

var g$75 = Curry._3(partial_arg$22.add_edge, g$74, v1$18, v2$18);

var g$76 = Curry._3(partial_arg$22.add_edge, g$75, v1$18, v3$18);

var g$77 = Curry._3(partial_arg$22.add_edge, g$76, v2$18, v1$18);

var g$78 = Curry._3(partial_arg$22.add_edge, g$77, v2$18, v2$18);

var g$79 = Curry._3(partial_arg$22.add_edge, g$78, v2$18, v2$18);

test_mirror$18(g$79);

if (!(Curry._1(partial_arg$22.nb_vertex, g$79) === 3 && Curry._1(partial_arg$22.nb_edges, g$79) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$80 = Curry._2(partial_arg$22.remove_vertex, g$79, v1$18);

if (!(Curry._1(partial_arg$22.nb_vertex, g$80) === 2 && Curry._1(partial_arg$22.nb_edges, g$80) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$81 = Curry._2(partial_arg$22.remove_vertex, g$80, v2$18);

if (!(Curry._1(partial_arg$22.nb_vertex, g$81) === 1 && Curry._1(partial_arg$22.nb_edges, g$81) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$18(g$81);

var param$9 = {
  compare: compare,
  $$default: 0
};

var partial_arg$23 = Persistent.Digraph.ConcreteBidirectionalLabeled(Int, param$9);

var O$19 = Oper.P(partial_arg$23);

function test_mirror$19(g) {
  var g$p = Curry._1(O$19.mirror, g);
  if (Curry._1(partial_arg$23.nb_vertex, g) === Curry._1(partial_arg$23.nb_vertex, g$p)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          143,
          6
        ],
        Error: new Error()
      };
}

var g$82 = partial_arg$23.empty;

var v1$19 = Curry._1(partial_arg$23.V.create, 1);

var v2$19 = Curry._1(partial_arg$23.V.create, 2);

var v3$19 = Curry._1(partial_arg$23.V.create, 3);

test_mirror$19(g$82);

var g$83 = Curry._3(partial_arg$23.add_edge, g$82, v1$19, v2$19);

var g$84 = Curry._3(partial_arg$23.add_edge, g$83, v1$19, v3$19);

var g$85 = Curry._3(partial_arg$23.add_edge, g$84, v2$19, v1$19);

var g$86 = Curry._3(partial_arg$23.add_edge, g$85, v2$19, v2$19);

var g$87 = Curry._3(partial_arg$23.add_edge, g$86, v2$19, v2$19);

test_mirror$19(g$87);

if (!(Curry._1(partial_arg$23.nb_vertex, g$87) === 3 && Curry._1(partial_arg$23.nb_edges, g$87) === 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          157,
          6
        ],
        Error: new Error()
      };
}

var g$88 = Curry._2(partial_arg$23.remove_vertex, g$87, v1$19);

if (!(Curry._1(partial_arg$23.nb_vertex, g$88) === 2 && Curry._1(partial_arg$23.nb_edges, g$88) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          159,
          6
        ],
        Error: new Error()
      };
}

var g$89 = Curry._2(partial_arg$23.remove_vertex, g$88, v2$19);

if (!(Curry._1(partial_arg$23.nb_vertex, g$89) === 1 && Curry._1(partial_arg$23.nb_edges, g$89) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          161,
          6
        ],
        Error: new Error()
      };
}

test_mirror$19(g$89);

function Make_pair(G, V) {
  var O = Oper.I(G);
  var test_mirror = function (g) {
    if (!G.is_directed) {
      return ;
    }
    var g$p = Curry._1(O.mirror, g);
    if (Curry._1(G.nb_vertex, g) !== Curry._1(G.nb_vertex, g$p)) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "check.ml",
              219,
              1
            ],
            Error: new Error()
          };
    }
    Curry._2(G.iter_edges, (function (v1, v2) {
            if (Curry._3(G.mem_edge, g$p, v2, v1)) {
              return ;
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "check.ml",
                    220,
                    28
                  ],
                  Error: new Error()
                };
          }), g);
    Curry._2(G.iter_edges, (function (v1, v2) {
            if (Curry._3(G.mem_edge, g, v2, v1)) {
              return ;
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "check.ml",
                    221,
                    28
                  ],
                  Error: new Error()
                };
          }), g$p);
    
  };
  var g = Curry._2(G.create, undefined, undefined);
  var v1 = Curry._1(G.V.create, [
        1,
        0
      ]);
  var v2 = Curry._1(G.V.create, [
        2,
        0
      ]);
  var v3 = Curry._1(G.V.create, [
        2,
        1
      ]);
  test_mirror(g);
  Curry._3(G.add_edge, g, v1, v2);
  Curry._3(G.add_edge, g, v2, v1);
  Curry._3(G.add_edge, g, v1, v3);
  Curry._2(G.iter_vertex, (function (v) {
          if (Curry._1(G.V.label, v)[1] === 0) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  234,
                  30
                ],
                Error: new Error()
              };
        }), g);
  test_mirror(g);
  if (!(Curry._1(G.nb_vertex, g) === V.v && Curry._1(G.nb_edges, g) === V.e)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            236,
            6
          ],
          Error: new Error()
        };
  }
  Curry._2(G.remove_vertex, g, v3);
  if (!(Curry._1(G.nb_vertex, g) === 1 && Curry._1(G.nb_edges, g) === 0)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            238,
            6
          ],
          Error: new Error()
        };
  }
  test_mirror(g);
  Curry._1(G.clear, g);
  if (!(Curry._1(G.nb_vertex, g) === 0 && Curry._1(G.nb_edges, g) === 0)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            241,
            6
          ],
          Error: new Error()
        };
  }
  return {
          O: O,
          test_mirror: test_mirror,
          g: g
        };
}

var param$10 = {
  compare: compare$1,
  $$default: $$default
};

var partial_arg$24 = Imperative.Digraph.ConcreteLabeled(Pair, param$10);

var O$20 = Oper.I(partial_arg$24);

function test_mirror$20(g) {
  if (!partial_arg$24.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$20.mirror, g);
  if (Curry._1(partial_arg$24.nb_vertex, g) !== Curry._1(partial_arg$24.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            219,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$24.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$24.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  220,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$24.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$24.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  221,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$90 = Curry._2(partial_arg$24.create, undefined, undefined);

var v1$20 = Curry._1(partial_arg$24.V.create, [
      1,
      0
    ]);

var v2$20 = Curry._1(partial_arg$24.V.create, [
      2,
      0
    ]);

var v3$20 = Curry._1(partial_arg$24.V.create, [
      2,
      1
    ]);

test_mirror$20(g$90);

Curry._3(partial_arg$24.add_edge, g$90, v1$20, v2$20);

Curry._3(partial_arg$24.add_edge, g$90, v2$20, v1$20);

Curry._3(partial_arg$24.add_edge, g$90, v1$20, v3$20);

Curry._2(partial_arg$24.iter_vertex, (function (v) {
        if (Curry._1(partial_arg$24.V.label, v)[1] === 0) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "check.ml",
                234,
                30
              ],
              Error: new Error()
            };
      }), g$90);

test_mirror$20(g$90);

if (!(Curry._1(partial_arg$24.nb_vertex, g$90) === 2 && Curry._1(partial_arg$24.nb_edges, g$90) === 2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          236,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$24.remove_vertex, g$90, v3$20);

if (!(Curry._1(partial_arg$24.nb_vertex, g$90) === 1 && Curry._1(partial_arg$24.nb_edges, g$90) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          238,
          6
        ],
        Error: new Error()
      };
}

test_mirror$20(g$90);

Curry._1(partial_arg$24.clear, g$90);

if (!(Curry._1(partial_arg$24.nb_vertex, g$90) === 0 && Curry._1(partial_arg$24.nb_edges, g$90) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          241,
          6
        ],
        Error: new Error()
      };
}

var param$11 = {
  compare: compare$1,
  $$default: $$default
};

var partial_arg$25 = Imperative.Graph.ConcreteLabeled(Pair, param$11);

var O$21 = Oper.I(partial_arg$25);

function test_mirror$21(g) {
  if (!partial_arg$25.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$21.mirror, g);
  if (Curry._1(partial_arg$25.nb_vertex, g) !== Curry._1(partial_arg$25.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            219,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$25.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$25.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  220,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$25.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$25.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  221,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$91 = Curry._2(partial_arg$25.create, undefined, undefined);

var v1$21 = Curry._1(partial_arg$25.V.create, [
      1,
      0
    ]);

var v2$21 = Curry._1(partial_arg$25.V.create, [
      2,
      0
    ]);

var v3$21 = Curry._1(partial_arg$25.V.create, [
      2,
      1
    ]);

test_mirror$21(g$91);

Curry._3(partial_arg$25.add_edge, g$91, v1$21, v2$21);

Curry._3(partial_arg$25.add_edge, g$91, v2$21, v1$21);

Curry._3(partial_arg$25.add_edge, g$91, v1$21, v3$21);

Curry._2(partial_arg$25.iter_vertex, (function (v) {
        if (Curry._1(partial_arg$25.V.label, v)[1] === 0) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "check.ml",
                234,
                30
              ],
              Error: new Error()
            };
      }), g$91);

test_mirror$21(g$91);

if (!(Curry._1(partial_arg$25.nb_vertex, g$91) === 2 && Curry._1(partial_arg$25.nb_edges, g$91) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          236,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$25.remove_vertex, g$91, v3$21);

if (!(Curry._1(partial_arg$25.nb_vertex, g$91) === 1 && Curry._1(partial_arg$25.nb_edges, g$91) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          238,
          6
        ],
        Error: new Error()
      };
}

test_mirror$21(g$91);

Curry._1(partial_arg$25.clear, g$91);

if (!(Curry._1(partial_arg$25.nb_vertex, g$91) === 0 && Curry._1(partial_arg$25.nb_edges, g$91) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          241,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$26 = Imperative.Digraph.Concrete(Pair);

var O$22 = Oper.I(partial_arg$26);

function test_mirror$22(g) {
  if (!partial_arg$26.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$22.mirror, g);
  if (Curry._1(partial_arg$26.nb_vertex, g) !== Curry._1(partial_arg$26.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            219,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$26.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$26.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  220,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$26.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$26.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  221,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$92 = Curry._2(partial_arg$26.create, undefined, undefined);

var v1$22 = Curry._1(partial_arg$26.V.create, [
      1,
      0
    ]);

var v2$22 = Curry._1(partial_arg$26.V.create, [
      2,
      0
    ]);

var v3$22 = Curry._1(partial_arg$26.V.create, [
      2,
      1
    ]);

test_mirror$22(g$92);

Curry._3(partial_arg$26.add_edge, g$92, v1$22, v2$22);

Curry._3(partial_arg$26.add_edge, g$92, v2$22, v1$22);

Curry._3(partial_arg$26.add_edge, g$92, v1$22, v3$22);

Curry._2(partial_arg$26.iter_vertex, (function (v) {
        if (Curry._1(partial_arg$26.V.label, v)[1] === 0) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "check.ml",
                234,
                30
              ],
              Error: new Error()
            };
      }), g$92);

test_mirror$22(g$92);

if (!(Curry._1(partial_arg$26.nb_vertex, g$92) === 2 && Curry._1(partial_arg$26.nb_edges, g$92) === 2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          236,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$26.remove_vertex, g$92, v3$22);

if (!(Curry._1(partial_arg$26.nb_vertex, g$92) === 1 && Curry._1(partial_arg$26.nb_edges, g$92) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          238,
          6
        ],
        Error: new Error()
      };
}

test_mirror$22(g$92);

Curry._1(partial_arg$26.clear, g$92);

if (!(Curry._1(partial_arg$26.nb_vertex, g$92) === 0 && Curry._1(partial_arg$26.nb_edges, g$92) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          241,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$27 = Imperative.Graph.Concrete(Pair);

var O$23 = Oper.I(partial_arg$27);

function test_mirror$23(g) {
  if (!partial_arg$27.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$23.mirror, g);
  if (Curry._1(partial_arg$27.nb_vertex, g) !== Curry._1(partial_arg$27.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            219,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$27.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$27.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  220,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$27.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$27.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  221,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$93 = Curry._2(partial_arg$27.create, undefined, undefined);

var v1$23 = Curry._1(partial_arg$27.V.create, [
      1,
      0
    ]);

var v2$23 = Curry._1(partial_arg$27.V.create, [
      2,
      0
    ]);

var v3$23 = Curry._1(partial_arg$27.V.create, [
      2,
      1
    ]);

test_mirror$23(g$93);

Curry._3(partial_arg$27.add_edge, g$93, v1$23, v2$23);

Curry._3(partial_arg$27.add_edge, g$93, v2$23, v1$23);

Curry._3(partial_arg$27.add_edge, g$93, v1$23, v3$23);

Curry._2(partial_arg$27.iter_vertex, (function (v) {
        if (Curry._1(partial_arg$27.V.label, v)[1] === 0) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "check.ml",
                234,
                30
              ],
              Error: new Error()
            };
      }), g$93);

test_mirror$23(g$93);

if (!(Curry._1(partial_arg$27.nb_vertex, g$93) === 2 && Curry._1(partial_arg$27.nb_edges, g$93) === 1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          236,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$27.remove_vertex, g$93, v3$23);

if (!(Curry._1(partial_arg$27.nb_vertex, g$93) === 1 && Curry._1(partial_arg$27.nb_edges, g$93) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          238,
          6
        ],
        Error: new Error()
      };
}

test_mirror$23(g$93);

Curry._1(partial_arg$27.clear, g$93);

if (!(Curry._1(partial_arg$27.nb_vertex, g$93) === 0 && Curry._1(partial_arg$27.nb_edges, g$93) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          241,
          6
        ],
        Error: new Error()
      };
}

var partial_arg$28 = Imperative.Digraph.ConcreteBidirectional(Pair);

var O$24 = Oper.I(partial_arg$28);

function test_mirror$24(g) {
  if (!partial_arg$28.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$24.mirror, g);
  if (Curry._1(partial_arg$28.nb_vertex, g) !== Curry._1(partial_arg$28.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            219,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$28.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$28.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  220,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$28.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$28.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  221,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$94 = Curry._2(partial_arg$28.create, undefined, undefined);

var v1$24 = Curry._1(partial_arg$28.V.create, [
      1,
      0
    ]);

var v2$24 = Curry._1(partial_arg$28.V.create, [
      2,
      0
    ]);

var v3$24 = Curry._1(partial_arg$28.V.create, [
      2,
      1
    ]);

test_mirror$24(g$94);

Curry._3(partial_arg$28.add_edge, g$94, v1$24, v2$24);

Curry._3(partial_arg$28.add_edge, g$94, v2$24, v1$24);

Curry._3(partial_arg$28.add_edge, g$94, v1$24, v3$24);

Curry._2(partial_arg$28.iter_vertex, (function (v) {
        if (Curry._1(partial_arg$28.V.label, v)[1] === 0) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "check.ml",
                234,
                30
              ],
              Error: new Error()
            };
      }), g$94);

test_mirror$24(g$94);

if (!(Curry._1(partial_arg$28.nb_vertex, g$94) === 2 && Curry._1(partial_arg$28.nb_edges, g$94) === 2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          236,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$28.remove_vertex, g$94, v3$24);

if (!(Curry._1(partial_arg$28.nb_vertex, g$94) === 1 && Curry._1(partial_arg$28.nb_edges, g$94) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          238,
          6
        ],
        Error: new Error()
      };
}

test_mirror$24(g$94);

Curry._1(partial_arg$28.clear, g$94);

if (!(Curry._1(partial_arg$28.nb_vertex, g$94) === 0 && Curry._1(partial_arg$28.nb_edges, g$94) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          241,
          6
        ],
        Error: new Error()
      };
}

var param$12 = {
  compare: compare$1,
  $$default: $$default
};

var partial_arg$29 = Imperative.Digraph.ConcreteBidirectionalLabeled(Pair, param$12);

var O$25 = Oper.I(partial_arg$29);

function test_mirror$25(g) {
  if (!partial_arg$29.is_directed) {
    return ;
  }
  var g$p = Curry._1(O$25.mirror, g);
  if (Curry._1(partial_arg$29.nb_vertex, g) !== Curry._1(partial_arg$29.nb_vertex, g$p)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            219,
            1
          ],
          Error: new Error()
        };
  }
  Curry._2(partial_arg$29.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$29.mem_edge, g$p, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  220,
                  28
                ],
                Error: new Error()
              };
        }), g);
  Curry._2(partial_arg$29.iter_edges, (function (v1, v2) {
          if (Curry._3(partial_arg$29.mem_edge, g, v2, v1)) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "check.ml",
                  221,
                  28
                ],
                Error: new Error()
              };
        }), g$p);
  
}

var g$95 = Curry._2(partial_arg$29.create, undefined, undefined);

var v1$25 = Curry._1(partial_arg$29.V.create, [
      1,
      0
    ]);

var v2$25 = Curry._1(partial_arg$29.V.create, [
      2,
      0
    ]);

var v3$25 = Curry._1(partial_arg$29.V.create, [
      2,
      1
    ]);

test_mirror$25(g$95);

Curry._3(partial_arg$29.add_edge, g$95, v1$25, v2$25);

Curry._3(partial_arg$29.add_edge, g$95, v2$25, v1$25);

Curry._3(partial_arg$29.add_edge, g$95, v1$25, v3$25);

Curry._2(partial_arg$29.iter_vertex, (function (v) {
        if (Curry._1(partial_arg$29.V.label, v)[1] === 0) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "check.ml",
                234,
                30
              ],
              Error: new Error()
            };
      }), g$95);

test_mirror$25(g$95);

if (!(Curry._1(partial_arg$29.nb_vertex, g$95) === 2 && Curry._1(partial_arg$29.nb_edges, g$95) === 2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          236,
          6
        ],
        Error: new Error()
      };
}

Curry._2(partial_arg$29.remove_vertex, g$95, v3$25);

if (!(Curry._1(partial_arg$29.nb_vertex, g$95) === 1 && Curry._1(partial_arg$29.nb_edges, g$95) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          238,
          6
        ],
        Error: new Error()
      };
}

test_mirror$25(g$95);

Curry._1(partial_arg$29.clear, g$95);

if (!(Curry._1(partial_arg$29.nb_vertex, g$95) === 0 && Curry._1(partial_arg$29.nb_edges, g$95) === 0)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          241,
          6
        ],
        Error: new Error()
      };
}

function Make2(G) {
  var g = Curry._2(G.create, undefined, undefined);
  var test_exn = function (v1, v2) {
    if (Curry._3(G.find_all_edges, g, v1, v2) !== /* [] */0) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "check.ml",
              283,
              6
            ],
            Error: new Error()
          };
    }
    try {
      Curry._3(G.find_edge, g, v1, v2);
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "check.ml",
              286,
              1
            ],
            Error: new Error()
          };
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Not_found") {
        return ;
      }
      throw exn;
    }
  };
  var e1 = [
    1,
    0,
    2
  ];
  var e3 = [
    2,
    2,
    1
  ];
  Curry._2(G.add_edge_e, g, e1);
  Curry._2(G.add_edge_e, g, [
        1,
        1,
        3
      ]);
  Curry._2(G.add_edge_e, g, [
        1,
        2,
        3
      ]);
  Curry._2(G.add_edge_e, g, e3);
  Curry._2(G.add_edge_e, g, e3);
  if (!Caml_obj.caml_equal(Curry._3(G.find_edge, g, 1, 2), e1)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            300,
            6
          ],
          Error: new Error()
        };
  }
  if (List.length(Curry._3(G.find_all_edges, g, 1, 3)) !== 2) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            301,
            6
          ],
          Error: new Error()
        };
  }
  test_exn(2, 3);
  test_exn(2, 4);
  test_exn(5, 2);
  Curry._2(G.remove_vertex, g, 2);
  if (!(Curry._1(G.nb_vertex, g) === 2 && Curry._1(G.nb_edges, g) === 2)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            306,
            6
          ],
          Error: new Error()
        };
  }
  return {
          g: g,
          test_exn: test_exn
        };
}

var param$13 = {
  compare: compare,
  $$default: 0
};

var G = Imperative.Digraph.ConcreteLabeled(Int, param$13);

var g$96 = Curry._2(G.create, undefined, undefined);

function test_exn(v1, v2) {
  if (Curry._3(G.find_all_edges, g$96, v1, v2) !== /* [] */0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            283,
            6
          ],
          Error: new Error()
        };
  }
  try {
    Curry._3(G.find_edge, g$96, v1, v2);
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            286,
            1
          ],
          Error: new Error()
        };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

var e1 = [
  1,
  0,
  2
];

var e3 = [
  2,
  2,
  1
];

Curry._2(G.add_edge_e, g$96, e1);

Curry._2(G.add_edge_e, g$96, [
      1,
      1,
      3
    ]);

Curry._2(G.add_edge_e, g$96, [
      1,
      2,
      3
    ]);

Curry._2(G.add_edge_e, g$96, e3);

Curry._2(G.add_edge_e, g$96, e3);

if (!Caml_obj.caml_equal(Curry._3(G.find_edge, g$96, 1, 2), e1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          300,
          6
        ],
        Error: new Error()
      };
}

if (List.length(Curry._3(G.find_all_edges, g$96, 1, 3)) !== 2) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          301,
          6
        ],
        Error: new Error()
      };
}

test_exn(2, 3);

test_exn(2, 4);

test_exn(5, 2);

Curry._2(G.remove_vertex, g$96, 2);

if (!(Curry._1(G.nb_vertex, g$96) === 2 && Curry._1(G.nb_edges, g$96) === 2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          306,
          6
        ],
        Error: new Error()
      };
}

test_exn(3, 1);

var param$14 = {
  compare: compare,
  $$default: 0
};

var G$1 = Imperative.Graph.ConcreteLabeled(Int, param$14);

var g$97 = Curry._2(G$1.create, undefined, undefined);

function test_exn$1(v1, v2) {
  if (Curry._3(G$1.find_all_edges, g$97, v1, v2) !== /* [] */0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            283,
            6
          ],
          Error: new Error()
        };
  }
  try {
    Curry._3(G$1.find_edge, g$97, v1, v2);
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            286,
            1
          ],
          Error: new Error()
        };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

var e1$1 = [
  1,
  0,
  2
];

var e3$1 = [
  2,
  2,
  1
];

Curry._2(G$1.add_edge_e, g$97, e1$1);

Curry._2(G$1.add_edge_e, g$97, [
      1,
      1,
      3
    ]);

Curry._2(G$1.add_edge_e, g$97, [
      1,
      2,
      3
    ]);

Curry._2(G$1.add_edge_e, g$97, e3$1);

Curry._2(G$1.add_edge_e, g$97, e3$1);

if (!Caml_obj.caml_equal(Curry._3(G$1.find_edge, g$97, 1, 2), e1$1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          300,
          6
        ],
        Error: new Error()
      };
}

if (List.length(Curry._3(G$1.find_all_edges, g$97, 1, 3)) !== 2) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          301,
          6
        ],
        Error: new Error()
      };
}

test_exn$1(2, 3);

test_exn$1(2, 4);

test_exn$1(5, 2);

Curry._2(G$1.remove_vertex, g$97, 2);

if (!(Curry._1(G$1.nb_vertex, g$97) === 2 && Curry._1(G$1.nb_edges, g$97) === 2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          306,
          6
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(Curry._3(G$1.find_edge, g$97, 3, 1), [
        3,
        1,
        1
      ])) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          315,
          4
        ],
        Error: new Error()
      };
}

var Generic = {
  Make: Make,
  MakeP: MakeP,
  Make_pair: Make_pair,
  Make2: Make2
};

function TestDijkstra(G, B) {
  var g = Curry._1(B.empty, undefined);
  var v1 = Curry._1(G.V.create, 1);
  var g$1 = Curry._2(B.add_vertex, g, v1);
  var v2 = Curry._1(G.V.create, 2);
  var g$2 = Curry._2(B.add_vertex, g$1, v2);
  var v3 = Curry._1(G.V.create, 3);
  var g$3 = Curry._2(B.add_vertex, g$2, v3);
  var v4 = Curry._1(G.V.create, 4);
  var g$4 = Curry._2(B.add_vertex, g$3, v4);
  var v5 = Curry._1(G.V.create, 5);
  var g$5 = Curry._2(B.add_vertex, g$4, v5);
  var g$6 = Curry._2(B.add_edge_e, g$5, Curry._3(G.E.create, v1, 10, v2));
  var g$7 = Curry._2(B.add_edge_e, g$6, Curry._3(G.E.create, v2, 50, v3));
  var g$8 = Curry._2(B.add_edge_e, g$7, Curry._3(G.E.create, v1, 30, v4));
  var g$9 = Curry._2(B.add_edge_e, g$8, Curry._3(G.E.create, v1, 100, v5));
  var g$10 = Curry._2(B.add_edge_e, g$9, Curry._3(G.E.create, v3, 10, v5));
  var g$11 = Curry._2(B.add_edge_e, g$10, Curry._3(G.E.create, v4, 20, v3));
  var g$12 = Curry._2(B.add_edge_e, g$11, Curry._3(G.E.create, v4, 60, v5));
  var $$let = G.E;
  var partial_arg_V = G.V;
  var partial_arg_E = {
    label: $$let.label,
    src: $$let.src,
    dst: $$let.dst,
    create: $$let.create
  };
  var partial_arg_iter_vertex = G.iter_vertex;
  var partial_arg_fold_vertex = G.fold_vertex;
  var partial_arg_iter_succ = G.iter_succ;
  var partial_arg_iter_succ_e = G.iter_succ_e;
  var partial_arg_fold_edges_e = G.fold_edges_e;
  var partial_arg_nb_vertex = G.nb_vertex;
  var partial_arg = {
    V: partial_arg_V,
    E: partial_arg_E,
    iter_vertex: partial_arg_iter_vertex,
    fold_vertex: partial_arg_fold_vertex,
    iter_succ: partial_arg_iter_succ,
    iter_succ_e: partial_arg_iter_succ_e,
    fold_edges_e: partial_arg_fold_edges_e,
    nb_vertex: partial_arg_nb_vertex
  };
  var add = function (prim0, prim1) {
    return prim0 + prim1 | 0;
  };
  var compare = Caml_obj.caml_compare;
  var Dij = Path.Dijkstra(partial_arg, {
        weight: G.E.label,
        compare: compare,
        add: add,
        zero: 0
      });
  var Dfs = Traverse.Dfs({
        is_directed: G.is_directed,
        V: G.V,
        iter_vertex: G.iter_vertex,
        fold_vertex: G.fold_vertex,
        iter_succ: G.iter_succ,
        fold_succ: G.fold_succ
      });
  var test = function (g, i, j, w, l) {
    var match = Curry._3(Dij.shortest_path, g, i, j);
    if (match[1] === w && List.length(match[0]) === l) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            355,
            6
          ],
          Error: new Error()
        };
  };
  var test_not_found = function (g, i, j) {
    try {
      Curry._3(Dij.shortest_path, g, i, j);
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "check.ml",
              357,
              45
            ],
            Error: new Error()
          };
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === "Not_found") {
        return ;
      }
      throw exn;
    }
  };
  test(g$12, v1, v5, 60, 3);
  test(g$12, v1, v1, 0, 0);
  if (G.is_directed) {
    test_not_found(g$12, v5, v1);
  }
  if (Curry._1(Dfs.has_cycle, g$12)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            362,
            13
          ],
          Error: new Error()
        };
  }
  var gc = Curry._2(B.add_edge_e, g$12, Curry._3(G.E.create, v5, 10, v1));
  var v6 = Curry._1(G.V.create, 6);
  var gc$1 = Curry._2(B.add_vertex, gc, v6);
  if (G.is_directed) {
    test(gc$1, v1, v5, 60, 3);
  }
  test(gc$1, v5, v1, 10, 1);
  test_not_found(gc$1, v1, v6);
  if (!Curry._1(Dfs.has_cycle, gc$1)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            370,
            13
          ],
          Error: new Error()
        };
  }
  return {
          v1: v1,
          v2: v2,
          v3: v3,
          v4: v4,
          v5: v5,
          g: g$12,
          Dij: Dij,
          Dfs: Dfs,
          test: test,
          test_not_found: test_not_found,
          v6: v6,
          gc: gc$1
        };
}

var param$15 = {
  compare: compare,
  $$default: 0
};

var G$2 = Persistent.Digraph.ConcreteLabeled(Int, param$15);

var B = Builder.P(G$2);

var g$98 = Curry._1(B.empty, undefined);

var v1$26 = Curry._1(G$2.V.create, 1);

var g$99 = Curry._2(B.add_vertex, g$98, v1$26);

var v2$26 = Curry._1(G$2.V.create, 2);

var g$100 = Curry._2(B.add_vertex, g$99, v2$26);

var v3$26 = Curry._1(G$2.V.create, 3);

var g$101 = Curry._2(B.add_vertex, g$100, v3$26);

var v4 = Curry._1(G$2.V.create, 4);

var g$102 = Curry._2(B.add_vertex, g$101, v4);

var v5 = Curry._1(G$2.V.create, 5);

var g$103 = Curry._2(B.add_vertex, g$102, v5);

var g$104 = Curry._2(B.add_edge_e, g$103, Curry._3(G$2.E.create, v1$26, 10, v2$26));

var g$105 = Curry._2(B.add_edge_e, g$104, Curry._3(G$2.E.create, v2$26, 50, v3$26));

var g$106 = Curry._2(B.add_edge_e, g$105, Curry._3(G$2.E.create, v1$26, 30, v4));

var g$107 = Curry._2(B.add_edge_e, g$106, Curry._3(G$2.E.create, v1$26, 100, v5));

var g$108 = Curry._2(B.add_edge_e, g$107, Curry._3(G$2.E.create, v3$26, 10, v5));

var g$109 = Curry._2(B.add_edge_e, g$108, Curry._3(G$2.E.create, v4, 20, v3$26));

var g$110 = Curry._2(B.add_edge_e, g$109, Curry._3(G$2.E.create, v4, 60, v5));

var $$let = G$2.E;

var partial_arg_V = G$2.V;

var partial_arg_E = {
  label: $$let.label,
  src: $$let.src,
  dst: $$let.dst,
  create: $$let.create
};

var partial_arg_iter_vertex = G$2.iter_vertex;

var partial_arg_fold_vertex = G$2.fold_vertex;

var partial_arg_iter_succ = G$2.iter_succ;

var partial_arg_iter_succ_e = G$2.iter_succ_e;

var partial_arg_fold_edges_e = G$2.fold_edges_e;

var partial_arg_nb_vertex = G$2.nb_vertex;

var partial_arg$30 = {
  V: partial_arg_V,
  E: partial_arg_E,
  iter_vertex: partial_arg_iter_vertex,
  fold_vertex: partial_arg_fold_vertex,
  iter_succ: partial_arg_iter_succ,
  iter_succ_e: partial_arg_iter_succ_e,
  fold_edges_e: partial_arg_fold_edges_e,
  nb_vertex: partial_arg_nb_vertex
};

function add(prim0, prim1) {
  return prim0 + prim1 | 0;
}

var compare$2 = Caml_obj.caml_compare;

var Dij = Path.Dijkstra(partial_arg$30, {
      weight: G$2.E.label,
      compare: compare$2,
      add: add,
      zero: 0
    });

var Dfs = Traverse.Dfs({
      is_directed: G$2.is_directed,
      V: G$2.V,
      iter_vertex: G$2.iter_vertex,
      fold_vertex: G$2.fold_vertex,
      iter_succ: G$2.iter_succ,
      fold_succ: G$2.fold_succ
    });

function test(g, i, j, w, l) {
  var match = Curry._3(Dij.shortest_path, g, i, j);
  if (match[1] === w && List.length(match[0]) === l) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          355,
          6
        ],
        Error: new Error()
      };
}

function test_not_found(g, i, j) {
  try {
    Curry._3(Dij.shortest_path, g, i, j);
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            357,
            45
          ],
          Error: new Error()
        };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

test(g$110, v1$26, v5, 60, 3);

test(g$110, v1$26, v1$26, 0, 0);

if (G$2.is_directed) {
  test_not_found(g$110, v5, v1$26);
}

if (Curry._1(Dfs.has_cycle, g$110)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          362,
          13
        ],
        Error: new Error()
      };
}

var gc = Curry._2(B.add_edge_e, g$110, Curry._3(G$2.E.create, v5, 10, v1$26));

var v6 = Curry._1(G$2.V.create, 6);

var gc$1 = Curry._2(B.add_vertex, gc, v6);

if (G$2.is_directed) {
  test(gc$1, v1$26, v5, 60, 3);
}

test(gc$1, v5, v1$26, 10, 1);

test_not_found(gc$1, v1$26, v6);

if (!Curry._1(Dfs.has_cycle, gc$1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          370,
          13
        ],
        Error: new Error()
      };
}

var Test1 = {
  v1: v1$26,
  v2: v2$26,
  v3: v3$26,
  v4: v4,
  v5: v5,
  g: g$110,
  Dij: Dij,
  Dfs: Dfs,
  test: test,
  test_not_found: test_not_found,
  v6: v6,
  gc: gc$1
};

var partial_arg$31 = {};

var param$16 = {
  compare: compare,
  $$default: 0
};

var G2 = Persistent.Digraph.AbstractLabeled(partial_arg$31, param$16);

var B$1 = Builder.P(G2);

var g$111 = Curry._1(B$1.empty, undefined);

var v1$27 = Curry._1(G2.V.create, 1);

var g$112 = Curry._2(B$1.add_vertex, g$111, v1$27);

var v2$27 = Curry._1(G2.V.create, 2);

var g$113 = Curry._2(B$1.add_vertex, g$112, v2$27);

var v3$27 = Curry._1(G2.V.create, 3);

var g$114 = Curry._2(B$1.add_vertex, g$113, v3$27);

var v4$1 = Curry._1(G2.V.create, 4);

var g$115 = Curry._2(B$1.add_vertex, g$114, v4$1);

var v5$1 = Curry._1(G2.V.create, 5);

var g$116 = Curry._2(B$1.add_vertex, g$115, v5$1);

var g$117 = Curry._2(B$1.add_edge_e, g$116, Curry._3(G2.E.create, v1$27, 10, v2$27));

var g$118 = Curry._2(B$1.add_edge_e, g$117, Curry._3(G2.E.create, v2$27, 50, v3$27));

var g$119 = Curry._2(B$1.add_edge_e, g$118, Curry._3(G2.E.create, v1$27, 30, v4$1));

var g$120 = Curry._2(B$1.add_edge_e, g$119, Curry._3(G2.E.create, v1$27, 100, v5$1));

var g$121 = Curry._2(B$1.add_edge_e, g$120, Curry._3(G2.E.create, v3$27, 10, v5$1));

var g$122 = Curry._2(B$1.add_edge_e, g$121, Curry._3(G2.E.create, v4$1, 20, v3$27));

var g$123 = Curry._2(B$1.add_edge_e, g$122, Curry._3(G2.E.create, v4$1, 60, v5$1));

var $$let$1 = G2.E;

var partial_arg_V$1 = G2.V;

var partial_arg_E$1 = {
  label: $$let$1.label,
  src: $$let$1.src,
  dst: $$let$1.dst,
  create: $$let$1.create
};

var partial_arg_iter_vertex$1 = G2.iter_vertex;

var partial_arg_fold_vertex$1 = G2.fold_vertex;

var partial_arg_iter_succ$1 = G2.iter_succ;

var partial_arg_iter_succ_e$1 = G2.iter_succ_e;

var partial_arg_fold_edges_e$1 = G2.fold_edges_e;

var partial_arg_nb_vertex$1 = G2.nb_vertex;

var partial_arg$32 = {
  V: partial_arg_V$1,
  E: partial_arg_E$1,
  iter_vertex: partial_arg_iter_vertex$1,
  fold_vertex: partial_arg_fold_vertex$1,
  iter_succ: partial_arg_iter_succ$1,
  iter_succ_e: partial_arg_iter_succ_e$1,
  fold_edges_e: partial_arg_fold_edges_e$1,
  nb_vertex: partial_arg_nb_vertex$1
};

function add$1(prim0, prim1) {
  return prim0 + prim1 | 0;
}

var compare$3 = Caml_obj.caml_compare;

var Dij$1 = Path.Dijkstra(partial_arg$32, {
      weight: G2.E.label,
      compare: compare$3,
      add: add$1,
      zero: 0
    });

var Dfs$1 = Traverse.Dfs({
      is_directed: G2.is_directed,
      V: G2.V,
      iter_vertex: G2.iter_vertex,
      fold_vertex: G2.fold_vertex,
      iter_succ: G2.iter_succ,
      fold_succ: G2.fold_succ
    });

function test$1(g, i, j, w, l) {
  var match = Curry._3(Dij$1.shortest_path, g, i, j);
  if (match[1] === w && List.length(match[0]) === l) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          355,
          6
        ],
        Error: new Error()
      };
}

function test_not_found$1(g, i, j) {
  try {
    Curry._3(Dij$1.shortest_path, g, i, j);
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            357,
            45
          ],
          Error: new Error()
        };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

test$1(g$123, v1$27, v5$1, 60, 3);

test$1(g$123, v1$27, v1$27, 0, 0);

if (G2.is_directed) {
  test_not_found$1(g$123, v5$1, v1$27);
}

if (Curry._1(Dfs$1.has_cycle, g$123)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          362,
          13
        ],
        Error: new Error()
      };
}

var gc$2 = Curry._2(B$1.add_edge_e, g$123, Curry._3(G2.E.create, v5$1, 10, v1$27));

var v6$1 = Curry._1(G2.V.create, 6);

var gc$3 = Curry._2(B$1.add_vertex, gc$2, v6$1);

if (G2.is_directed) {
  test$1(gc$3, v1$27, v5$1, 60, 3);
}

test$1(gc$3, v5$1, v1$27, 10, 1);

test_not_found$1(gc$3, v1$27, v6$1);

if (!Curry._1(Dfs$1.has_cycle, gc$3)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          370,
          13
        ],
        Error: new Error()
      };
}

var Test2 = {
  v1: v1$27,
  v2: v2$27,
  v3: v3$27,
  v4: v4$1,
  v5: v5$1,
  g: g$123,
  Dij: Dij$1,
  Dfs: Dfs$1,
  test: test$1,
  test_not_found: test_not_found$1,
  v6: v6$1,
  gc: gc$3
};

var param$17 = {
  compare: compare,
  $$default: 0
};

var G3 = Imperative.Digraph.ConcreteLabeled(Int, param$17);

var B$2 = Builder.I(G3);

var g$124 = Curry._1(B$2.empty, undefined);

var v1$28 = Curry._1(G3.V.create, 1);

var g$125 = Curry._2(B$2.add_vertex, g$124, v1$28);

var v2$28 = Curry._1(G3.V.create, 2);

var g$126 = Curry._2(B$2.add_vertex, g$125, v2$28);

var v3$28 = Curry._1(G3.V.create, 3);

var g$127 = Curry._2(B$2.add_vertex, g$126, v3$28);

var v4$2 = Curry._1(G3.V.create, 4);

var g$128 = Curry._2(B$2.add_vertex, g$127, v4$2);

var v5$2 = Curry._1(G3.V.create, 5);

var g$129 = Curry._2(B$2.add_vertex, g$128, v5$2);

var g$130 = Curry._2(B$2.add_edge_e, g$129, Curry._3(G3.E.create, v1$28, 10, v2$28));

var g$131 = Curry._2(B$2.add_edge_e, g$130, Curry._3(G3.E.create, v2$28, 50, v3$28));

var g$132 = Curry._2(B$2.add_edge_e, g$131, Curry._3(G3.E.create, v1$28, 30, v4$2));

var g$133 = Curry._2(B$2.add_edge_e, g$132, Curry._3(G3.E.create, v1$28, 100, v5$2));

var g$134 = Curry._2(B$2.add_edge_e, g$133, Curry._3(G3.E.create, v3$28, 10, v5$2));

var g$135 = Curry._2(B$2.add_edge_e, g$134, Curry._3(G3.E.create, v4$2, 20, v3$28));

var g$136 = Curry._2(B$2.add_edge_e, g$135, Curry._3(G3.E.create, v4$2, 60, v5$2));

var $$let$2 = G3.E;

var partial_arg_V$2 = G3.V;

var partial_arg_E$2 = {
  label: $$let$2.label,
  src: $$let$2.src,
  dst: $$let$2.dst,
  create: $$let$2.create
};

var partial_arg_iter_vertex$2 = G3.iter_vertex;

var partial_arg_fold_vertex$2 = G3.fold_vertex;

var partial_arg_iter_succ$2 = G3.iter_succ;

var partial_arg_iter_succ_e$2 = G3.iter_succ_e;

var partial_arg_fold_edges_e$2 = G3.fold_edges_e;

var partial_arg_nb_vertex$2 = G3.nb_vertex;

var partial_arg$33 = {
  V: partial_arg_V$2,
  E: partial_arg_E$2,
  iter_vertex: partial_arg_iter_vertex$2,
  fold_vertex: partial_arg_fold_vertex$2,
  iter_succ: partial_arg_iter_succ$2,
  iter_succ_e: partial_arg_iter_succ_e$2,
  fold_edges_e: partial_arg_fold_edges_e$2,
  nb_vertex: partial_arg_nb_vertex$2
};

function add$2(prim0, prim1) {
  return prim0 + prim1 | 0;
}

var compare$4 = Caml_obj.caml_compare;

var Dij$2 = Path.Dijkstra(partial_arg$33, {
      weight: G3.E.label,
      compare: compare$4,
      add: add$2,
      zero: 0
    });

var Dfs$2 = Traverse.Dfs({
      is_directed: G3.is_directed,
      V: G3.V,
      iter_vertex: G3.iter_vertex,
      fold_vertex: G3.fold_vertex,
      iter_succ: G3.iter_succ,
      fold_succ: G3.fold_succ
    });

function test$2(g, i, j, w, l) {
  var match = Curry._3(Dij$2.shortest_path, g, i, j);
  if (match[1] === w && List.length(match[0]) === l) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          355,
          6
        ],
        Error: new Error()
      };
}

function test_not_found$2(g, i, j) {
  try {
    Curry._3(Dij$2.shortest_path, g, i, j);
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "check.ml",
            357,
            45
          ],
          Error: new Error()
        };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return ;
    }
    throw exn;
  }
}

test$2(g$136, v1$28, v5$2, 60, 3);

test$2(g$136, v1$28, v1$28, 0, 0);

if (G3.is_directed) {
  test_not_found$2(g$136, v5$2, v1$28);
}

if (Curry._1(Dfs$2.has_cycle, g$136)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          362,
          13
        ],
        Error: new Error()
      };
}

var gc$4 = Curry._2(B$2.add_edge_e, g$136, Curry._3(G3.E.create, v5$2, 10, v1$28));

var v6$2 = Curry._1(G3.V.create, 6);

var gc$5 = Curry._2(B$2.add_vertex, gc$4, v6$2);

if (G3.is_directed) {
  test$2(gc$5, v1$28, v5$2, 60, 3);
}

test$2(gc$5, v5$2, v1$28, 10, 1);

test_not_found$2(gc$5, v1$28, v6$2);

if (!Curry._1(Dfs$2.has_cycle, gc$5)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          370,
          13
        ],
        Error: new Error()
      };
}

var Test3 = {
  v1: v1$28,
  v2: v2$28,
  v3: v3$28,
  v4: v4$2,
  v5: v5$2,
  g: g$136,
  Dij: Dij$2,
  Dfs: Dfs$2,
  test: test$2,
  test_not_found: test_not_found$2,
  v6: v6$2,
  gc: gc$5
};

var Dijkstra = {
  TestDijkstra: TestDijkstra,
  G: G$2,
  Test1: Test1,
  G2: G2,
  Test2: Test2,
  G3: G3,
  Test3: Test3
};

var partial_arg$34 = {};

var param$18 = {
  compare: compare,
  $$default: 0
};

var G$3 = Imperative.Digraph.AbstractLabeled(partial_arg$34, param$18);

var Dfs$3 = Traverse.Dfs({
      is_directed: G$3.is_directed,
      V: G$3.V,
      iter_vertex: G$3.iter_vertex,
      fold_vertex: G$3.fold_vertex,
      iter_succ: G$3.iter_succ,
      fold_succ: G$3.fold_succ
    });

var Mark = Traverse.Mark({
      V: {},
      iter_vertex: G$3.iter_vertex,
      iter_succ: G$3.iter_succ,
      Mark: G$3.Mark
    });

var g$137 = Curry._2(G$3.create, undefined, undefined);

function newv(g) {
  var v = Curry._1(G$3.V.create, 0);
  Curry._2(G$3.add_vertex, g, v);
  return v;
}

var v1$29 = newv(g$137);

var v2$29 = newv(g$137);

var v3$29 = newv(g$137);

var v4$3 = newv(g$137);

var v5$3 = newv(g$137);

function add_edge(g, v1, l, v2) {
  return Curry._2(G$3.add_edge_e, g, Curry._3(G$3.E.create, v1, l, v2));
}

add_edge(g$137, v1$29, 10, v2$29);

add_edge(g$137, v2$29, 50, v3$29);

add_edge(g$137, v1$29, 30, v4$3);

add_edge(g$137, v1$29, 100, v5$3);

add_edge(g$137, v3$29, 10, v5$3);

add_edge(g$137, v4$3, 20, v3$29);

add_edge(g$137, v4$3, 60, v5$3);

if (!(!Curry._1(Mark.has_cycle, g$137) && !Curry._1(Dfs$3.has_cycle, g$137))) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          417,
          11
        ],
        Error: new Error()
      };
}

var v6$3 = newv(g$137);

if (!(!Curry._1(Mark.has_cycle, g$137) && !Curry._1(Dfs$3.has_cycle, g$137))) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          419,
          11
        ],
        Error: new Error()
      };
}

add_edge(g$137, v5$3, 10, v1$29);

if (!(Curry._1(Mark.has_cycle, g$137) && Curry._1(Dfs$3.has_cycle, g$137))) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          421,
          11
        ],
        Error: new Error()
      };
}

var g$138 = Curry._2(G$3.create, undefined, undefined);

function newv$1(i) {
  var v = Curry._1(G$3.V.create, i);
  Curry._2(G$3.add_vertex, g$138, v);
  return v;
}

var u = newv$1(1);

var v = newv$1(2);

var w = newv$1(3);

var x = newv$1(4);

var y = newv$1(5);

var z = newv$1(6);

function edge(a, b) {
  return add_edge(g$138, a, 0, b);
}

edge(u, v);

edge(u, x);

edge(v, y);

edge(w, y);

edge(w, z);

edge(x, v);

edge(y, x);

edge(z, z);

function pre(v) {
  return Curry._1(Format.printf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "pre ",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "pre %d@."
                }), Curry._1(G$3.V.label, v));
}

function post(v) {
  return Curry._1(Format.printf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "post ",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  },
                  _1: "post %d@."
                }), Curry._1(G$3.V.label, v));
}

Format.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "iter:",
        _1: {
          TAG: /* Formatting_lit */17,
          _0: /* Flush_newline */4,
          _1: /* End_of_format */0
        }
      },
      _1: "iter:@."
    });

Curry._4(Dfs$3.iter_component, pre, post, g$138, w);

Format.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "prefix:",
        _1: {
          TAG: /* Formatting_lit */17,
          _0: /* Flush_newline */4,
          _1: /* End_of_format */0
        }
      },
      _1: "prefix:@."
    });

Curry._3(Dfs$3.prefix_component, pre, g$138, w);

Format.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "step:",
        _1: {
          TAG: /* Formatting_lit */17,
          _0: /* Flush_newline */4,
          _1: /* End_of_format */0
        }
      },
      _1: "step:@."
    });

function visit(_it) {
  while(true) {
    var it = _it;
    var v = Curry._1(Dfs$3.get, it);
    Curry._1(Format.printf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "visit ",
                _1: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Flush_newline */4,
                    _1: /* End_of_format */0
                  }
                }
              },
              _1: "visit %d@."
            }), Curry._1(G$3.V.label, v));
    _it = Curry._1(Dfs$3.step, it);
    continue ;
  };
}

try {
  visit(Curry._1(Dfs$3.start, g$138));
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn.RE_EXN_ID !== Pervasives.Exit) {
    throw exn;
  }
  
}

var Traversal = {
  G: G$3,
  Dfs: Dfs$3,
  Mark: Mark,
  v1: v1$29,
  v2: v2$29,
  v3: v3$29,
  v4: v4$3,
  v5: v5$3,
  add_edge: add_edge,
  v6: v6$3,
  g: g$138,
  newv: newv$1,
  u: u,
  v: v,
  w: w,
  x: x,
  y: y,
  z: z,
  edge: edge,
  pre: pre,
  post: post
};

var param$19 = {
  compare: compare,
  $$default: 0
};

var G$4 = Persistent.Digraph.ConcreteLabeled(Int, param$19);

function add_edge$1(g, v1, l, v2) {
  return Curry._2(G$4.add_edge_e, g, Curry._3(G$4.E.create, v1, l, v2));
}

var g$139 = add_edge$1(G$4.empty, 1, 16, 2);

var g$140 = add_edge$1(g$139, 1, 13, 3);

var g$141 = add_edge$1(g$140, 2, 10, 3);

var g$142 = add_edge$1(g$141, 3, 4, 2);

var g$143 = add_edge$1(g$142, 2, 12, 4);

var g$144 = add_edge$1(g$143, 4, 9, 3);

var g$145 = add_edge$1(g$144, 3, 14, 5);

var g$146 = add_edge$1(g$145, 5, 7, 4);

var g$147 = add_edge$1(g$146, 4, 20, 6);

var g$148 = add_edge$1(g$147, 5, 4, 6);

function max_capacity(x) {
  return x;
}

function min_capacity(param) {
  return 0;
}

function flow(param) {
  return 0;
}

function add$3(prim0, prim1) {
  return prim0 + prim1 | 0;
}

function sub(prim0, prim1) {
  return prim0 - prim1 | 0;
}

var compare$5 = Caml_obj.caml_compare;

var F = {
  max_capacity: max_capacity,
  min_capacity: min_capacity,
  flow: flow,
  add: add$3,
  sub: sub,
  compare: compare$5,
  zero: 0
};

var $$let$3 = G$4.V;

var $$let$4 = G$4.E;

var partial_arg_V$3 = {
  hash: $$let$3.hash,
  equal: $$let$3.equal
};

var partial_arg_E$3 = {
  src: $$let$4.src,
  dst: $$let$4.dst,
  label: $$let$4.label
};

var partial_arg_iter_succ_e$3 = G$4.iter_succ_e;

var partial_arg_iter_pred_e = G$4.iter_pred_e;

var partial_arg$35 = {
  V: partial_arg_V$3,
  E: partial_arg_E$3,
  iter_succ_e: partial_arg_iter_succ_e$3,
  iter_pred_e: partial_arg_iter_pred_e
};

var FF = Flow.Ford_Fulkerson(partial_arg$35, {
      max_capacity: max_capacity,
      flow: flow,
      add: add$3,
      sub: sub,
      zero: 0,
      compare: compare$5,
      min_capacity: min_capacity
    });

var partial_arg_V$4 = G$4.V;

var partial_arg_E$4 = G$4.E;

var partial_arg_nb_vertex$3 = G$4.nb_vertex;

var partial_arg_nb_edges = G$4.nb_edges;

var partial_arg_fold_edges_e$3 = G$4.fold_edges_e;

var partial_arg_fold_succ_e = G$4.fold_succ_e;

var partial_arg_fold_pred_e = G$4.fold_pred_e;

var partial_arg$36 = {
  V: partial_arg_V$4,
  E: partial_arg_E$4,
  nb_vertex: partial_arg_nb_vertex$3,
  nb_edges: partial_arg_nb_edges,
  fold_edges_e: partial_arg_fold_edges_e$3,
  fold_succ_e: partial_arg_fold_succ_e,
  fold_pred_e: partial_arg_fold_pred_e
};

var Gold = Flow.Goldberg_Tarjan(partial_arg$36, {
      max_capacity: max_capacity,
      flow: flow,
      add: add$3,
      sub: sub,
      zero: 0,
      compare: compare$5
    });

if (Curry._3(FF.maxflow, g$148, 1, 6)[1] !== 23) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          494,
          4
        ],
        Error: new Error()
      };
}

if (Curry._3(Gold.maxflow, g$148, 1, 6)[1] !== 23) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          495,
          4
        ],
        Error: new Error()
      };
}

if (Curry._3(FF.maxflow, g$148, 1, 1)[1] !== 0) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          496,
          4
        ],
        Error: new Error()
      };
}

if (Curry._3(Gold.maxflow, g$148, 1, 1)[1] !== 0) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          497,
          4
        ],
        Error: new Error()
      };
}

var include = Util.OTProduct(Int, Int);

var param_compare = include.compare;

var param_default = [
  0,
  0
];

var param$20 = {
  compare: param_compare,
  $$default: param_default
};

var G2$1 = Persistent.Digraph.ConcreteLabeled(Int, param$20);

function add_edge$2(g, v1, l, v2) {
  return Curry._2(G2$1.add_edge_e, g, Curry._3(G2$1.E.create, v1, l, v2));
}

var g$149 = add_edge$2(G2$1.empty, 1, [
      1,
      1
    ], 2);

var g$150 = add_edge$2(g$149, 1, [
      3,
      0
    ], 3);

var g$151 = add_edge$2(g$150, 2, [
      1,
      1
    ], 3);

var g$152 = add_edge$2(g$151, 3, [
      1,
      0
    ], 2);

var g$153 = add_edge$2(g$152, 2, [
      3,
      0
    ], 4);

var g$154 = add_edge$2(g$153, 3, [
      1,
      1
    ], 4);

function max_capacity$1(prim) {
  return prim[0];
}

function min_capacity$1(param) {
  return 0;
}

function flow$1(prim) {
  return prim[1];
}

function add$4(prim0, prim1) {
  return prim0 + prim1 | 0;
}

function sub$1(prim0, prim1) {
  return prim0 - prim1 | 0;
}

var compare$6 = Caml_obj.caml_compare;

var F2 = {
  max_capacity: max_capacity$1,
  min_capacity: min_capacity$1,
  flow: flow$1,
  add: add$4,
  sub: sub$1,
  compare: compare$6,
  zero: 0
};

var $$let$5 = G2$1.V;

var $$let$6 = G2$1.E;

var partial_arg_V$5 = {
  hash: $$let$5.hash,
  equal: $$let$5.equal
};

var partial_arg_E$5 = {
  src: $$let$6.src,
  dst: $$let$6.dst,
  label: $$let$6.label
};

var partial_arg_iter_succ_e$4 = G2$1.iter_succ_e;

var partial_arg_iter_pred_e$1 = G2$1.iter_pred_e;

var partial_arg$37 = {
  V: partial_arg_V$5,
  E: partial_arg_E$5,
  iter_succ_e: partial_arg_iter_succ_e$4,
  iter_pred_e: partial_arg_iter_pred_e$1
};

var FF2 = Flow.Ford_Fulkerson(partial_arg$37, {
      max_capacity: max_capacity$1,
      flow: flow$1,
      add: add$4,
      sub: sub$1,
      zero: 0,
      compare: compare$6,
      min_capacity: min_capacity$1
    });

if (Curry._3(FF2.maxflow, g$154, 1, 4)[1] !== 2) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          529,
          4
        ],
        Error: new Error()
      };
}

var FF_Goldberg = {
  G: G$4,
  F: F,
  FF: FF,
  Gold: Gold,
  G2: G2$1,
  add_edge: add_edge$2,
  g: g$154,
  F2: F2,
  FF2: FF2
};

var G$5 = Imperative.Graph.Concrete(Int);

var g$155 = Curry._2(G$5.create, undefined, undefined);

var add$5 = Curry._1(G$5.add_edge, g$155);

Curry._2(add$5, 1, 2);

Curry._2(add$5, 1, 3);

Curry._2(add$5, 1, 4);

Curry._2(add$5, 2, 5);

Curry._2(add$5, 3, 5);

Curry._2(add$5, 4, 5);

Curry._2(add$5, 5, 6);

var N = Oper.Neighbourhood({
      V: G$5.V,
      fold_succ: G$5.fold_succ,
      succ: G$5.succ
    });

var s2 = Curry._2(N.Vertex_Set.add, 1, Curry._1(N.Vertex_Set.singleton, 5));

if (!Curry._2(N.Vertex_Set.equal, Curry._2(N.set_from_vertex, g$155, 2), s2)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          558,
          11
        ],
        Error: new Error()
      };
}

var s25 = Curry._2(N.Vertex_Set.add, 1, Curry._2(N.Vertex_Set.add, 3, Curry._2(N.Vertex_Set.add, 4, Curry._1(N.Vertex_Set.singleton, 6))));

if (!Curry._2(N.Vertex_Set.equal, Curry._2(N.set_from_vertices, g$155, {
            hd: 2,
            tl: {
              hd: 5,
              tl: /* [] */0
            }
          }), s25)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          560,
          11
        ],
        Error: new Error()
      };
}

var Neighbourhood = {
  G: G$5,
  g: g$155,
  add: add$5,
  N: N,
  V: undefined,
  s2: s2,
  s25: s25
};

var G$6 = Persistent.Graph.Concrete(Int);

var g$156 = Curry._3(G$6.add_edge, G$6.empty, 1, 2);

var g$157 = Curry._3(G$6.add_edge, g$156, 1, 3);

var g$158 = Curry._3(G$6.add_edge, g$157, 1, 4);

var g$159 = Curry._3(G$6.add_edge, g$158, 2, 5);

var g$160 = Curry._3(G$6.add_edge, g$159, 3, 5);

var g$161 = Curry._3(G$6.add_edge, g$160, 4, 5);

var g$162 = Curry._3(G$6.add_edge, g$161, 5, 6);

var M = Minsep.P({
      V: G$6.V,
      succ: G$6.succ,
      iter_succ: G$6.iter_succ,
      fold_succ: G$6.fold_succ,
      iter_vertex: G$6.iter_vertex,
      fold_vertex: G$6.fold_vertex,
      remove_vertex: G$6.remove_vertex
    });

var s5 = Curry._1(M.Vertex_Set.singleton, 5);

var s15 = Curry._2(M.Vertex_Set.add, 1, s5);

var s234 = Curry._2(M.Vertex_Set.add, 2, Curry._2(M.Vertex_Set.add, 3, Curry._1(M.Vertex_Set.singleton, 4)));

var bigs = Curry._2(M.VSetset.add, s5, Curry._2(M.VSetset.add, s15, Curry._1(M.VSetset.singleton, s234)));

if (!Curry._2(M.VSetset.equal, Curry._1(M.set_of_allminsep, g$162), bigs)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          592,
          13
        ],
        Error: new Error()
      };
}

var P = {
  G: G$6,
  g: g$162,
  M: M,
  S: undefined,
  VS: undefined,
  s5: s5,
  s15: s15,
  s234: s234,
  bigs: bigs
};

var G$7 = Imperative.Graph.Abstract({});

var g$163 = Curry._2(G$7.create, undefined, undefined);

var v1$30 = Curry._1(G$7.V.create, undefined);

var v2$30 = Curry._1(G$7.V.create, undefined);

var v3$30 = Curry._1(G$7.V.create, undefined);

var v4$4 = Curry._1(G$7.V.create, undefined);

var v5$4 = Curry._1(G$7.V.create, undefined);

var v6$4 = Curry._1(G$7.V.create, undefined);

var add$6 = Curry._1(G$7.add_edge, g$163);

Curry._2(add$6, v1$30, v2$30);

Curry._2(add$6, v1$30, v3$30);

Curry._2(add$6, v1$30, v4$4);

Curry._2(add$6, v2$30, v5$4);

Curry._2(add$6, v3$30, v5$4);

Curry._2(add$6, v4$4, v5$4);

Curry._2(add$6, v5$4, v6$4);

var M$1 = Minsep.I({
      V: G$7.V,
      succ: G$7.succ,
      iter_succ: G$7.iter_succ,
      fold_succ: G$7.fold_succ,
      iter_vertex: G$7.iter_vertex,
      fold_vertex: G$7.fold_vertex,
      Mark: G$7.Mark
    });

var s5$1 = Curry._1(M$1.Vertex_Set.singleton, v5$4);

var s15$1 = Curry._2(M$1.Vertex_Set.add, v1$30, s5$1);

var s234$1 = Curry._2(M$1.Vertex_Set.add, v2$30, Curry._2(M$1.Vertex_Set.add, v3$30, Curry._1(M$1.Vertex_Set.singleton, v4$4)));

var bigs$1 = Curry._2(M$1.VSetset.add, s5$1, Curry._2(M$1.VSetset.add, s15$1, Curry._1(M$1.VSetset.singleton, s234$1)));

Curry._1(G$7.copy, g$163);

if (!Curry._2(M$1.VSetset.equal, Curry._1(M$1.set_of_allminsep, g$163), bigs$1)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "check.ml",
          628,
          6
        ],
        Error: new Error()
      };
}

var I = {
  G: G$7,
  g: g$163,
  v1: v1$30,
  v2: v2$30,
  v3: v3$30,
  v4: v4$4,
  v5: v5$4,
  v6: v6$4,
  add: add$6,
  M: M$1,
  S: undefined,
  VS: undefined,
  s5: s5$1,
  s15: s15$1,
  s234: s234$1,
  bigs: bigs$1
};

var Minsep$1 = {
  P: P,
  I: I
};

var Dfs$4 = Pack.Digraph.Dfs;

var TestSigPack_V = Pack.Digraph.V;

var TestSigPack_E = Pack.Digraph.E;

var TestSigPack_is_directed = Pack.Digraph.is_directed;

var TestSigPack_is_empty = Pack.Digraph.is_empty;

var TestSigPack_nb_vertex = Pack.Digraph.nb_vertex;

var TestSigPack_nb_edges = Pack.Digraph.nb_edges;

var TestSigPack_out_degree = Pack.Digraph.out_degree;

var TestSigPack_in_degree = Pack.Digraph.in_degree;

var TestSigPack_mem_vertex = Pack.Digraph.mem_vertex;

var TestSigPack_mem_edge = Pack.Digraph.mem_edge;

var TestSigPack_mem_edge_e = Pack.Digraph.mem_edge_e;

var TestSigPack_find_edge = Pack.Digraph.find_edge;

var TestSigPack_find_all_edges = Pack.Digraph.find_all_edges;

var TestSigPack_succ = Pack.Digraph.succ;

var TestSigPack_pred = Pack.Digraph.pred;

var TestSigPack_succ_e = Pack.Digraph.succ_e;

var TestSigPack_pred_e = Pack.Digraph.pred_e;

var TestSigPack_iter_vertex = Pack.Digraph.iter_vertex;

var TestSigPack_fold_vertex = Pack.Digraph.fold_vertex;

var TestSigPack_iter_edges = Pack.Digraph.iter_edges;

var TestSigPack_fold_edges = Pack.Digraph.fold_edges;

var TestSigPack_iter_edges_e = Pack.Digraph.iter_edges_e;

var TestSigPack_fold_edges_e = Pack.Digraph.fold_edges_e;

var TestSigPack_map_vertex = Pack.Digraph.map_vertex;

var TestSigPack_iter_succ = Pack.Digraph.iter_succ;

var TestSigPack_iter_pred = Pack.Digraph.iter_pred;

var TestSigPack_fold_succ = Pack.Digraph.fold_succ;

var TestSigPack_fold_pred = Pack.Digraph.fold_pred;

var TestSigPack_iter_succ_e = Pack.Digraph.iter_succ_e;

var TestSigPack_fold_succ_e = Pack.Digraph.fold_succ_e;

var TestSigPack_iter_pred_e = Pack.Digraph.iter_pred_e;

var TestSigPack_fold_pred_e = Pack.Digraph.fold_pred_e;

var TestSigPack_create = Pack.Digraph.create;

var TestSigPack_clear = Pack.Digraph.clear;

var TestSigPack_copy = Pack.Digraph.copy;

var TestSigPack_add_vertex = Pack.Digraph.add_vertex;

var TestSigPack_remove_vertex = Pack.Digraph.remove_vertex;

var TestSigPack_add_edge = Pack.Digraph.add_edge;

var TestSigPack_add_edge_e = Pack.Digraph.add_edge_e;

var TestSigPack_remove_edge = Pack.Digraph.remove_edge;

var TestSigPack_remove_edge_e = Pack.Digraph.remove_edge_e;

var TestSigPack_Mark = Pack.Digraph.Mark;

var TestSigPack_find_vertex = Pack.Digraph.find_vertex;

var TestSigPack_transitive_closure = Pack.Digraph.transitive_closure;

var TestSigPack_add_transitive_closure = Pack.Digraph.add_transitive_closure;

var TestSigPack_transitive_reduction = Pack.Digraph.transitive_reduction;

var TestSigPack_replace_by_transitive_reduction = Pack.Digraph.replace_by_transitive_reduction;

var TestSigPack_mirror = Pack.Digraph.mirror;

var TestSigPack_complement = Pack.Digraph.complement;

var TestSigPack_intersect = Pack.Digraph.intersect;

var TestSigPack_union = Pack.Digraph.union;

var TestSigPack_Dfs = {
  iter: Dfs$4.iter,
  prefix: Dfs$4.prefix,
  postfix: Dfs$4.postfix,
  iter_component: Dfs$4.iter_component,
  prefix_component: Dfs$4.prefix_component,
  postfix_component: Dfs$4.postfix_component,
  has_cycle: Dfs$4.has_cycle
};

var TestSigPack_Bfs = Pack.Digraph.Bfs;

var TestSigPack_Marking = Pack.Digraph.Marking;

var TestSigPack_Classic = Pack.Digraph.Classic;

var TestSigPack_Rand = Pack.Digraph.Rand;

var TestSigPack_Components = Pack.Digraph.Components;

var TestSigPack_shortest_path = Pack.Digraph.shortest_path;

var TestSigPack_ford_fulkerson = Pack.Digraph.ford_fulkerson;

var TestSigPack = {
  V: TestSigPack_V,
  E: TestSigPack_E,
  is_directed: TestSigPack_is_directed,
  is_empty: TestSigPack_is_empty,
  nb_vertex: TestSigPack_nb_vertex,
  nb_edges: TestSigPack_nb_edges,
  out_degree: TestSigPack_out_degree,
  in_degree: TestSigPack_in_degree,
  mem_vertex: TestSigPack_mem_vertex,
  mem_edge: TestSigPack_mem_edge,
  mem_edge_e: TestSigPack_mem_edge_e,
  find_edge: TestSigPack_find_edge,
  find_all_edges: TestSigPack_find_all_edges,
  succ: TestSigPack_succ,
  pred: TestSigPack_pred,
  succ_e: TestSigPack_succ_e,
  pred_e: TestSigPack_pred_e,
  iter_vertex: TestSigPack_iter_vertex,
  fold_vertex: TestSigPack_fold_vertex,
  iter_edges: TestSigPack_iter_edges,
  fold_edges: TestSigPack_fold_edges,
  iter_edges_e: TestSigPack_iter_edges_e,
  fold_edges_e: TestSigPack_fold_edges_e,
  map_vertex: TestSigPack_map_vertex,
  iter_succ: TestSigPack_iter_succ,
  iter_pred: TestSigPack_iter_pred,
  fold_succ: TestSigPack_fold_succ,
  fold_pred: TestSigPack_fold_pred,
  iter_succ_e: TestSigPack_iter_succ_e,
  fold_succ_e: TestSigPack_fold_succ_e,
  iter_pred_e: TestSigPack_iter_pred_e,
  fold_pred_e: TestSigPack_fold_pred_e,
  create: TestSigPack_create,
  clear: TestSigPack_clear,
  copy: TestSigPack_copy,
  add_vertex: TestSigPack_add_vertex,
  remove_vertex: TestSigPack_remove_vertex,
  add_edge: TestSigPack_add_edge,
  add_edge_e: TestSigPack_add_edge_e,
  remove_edge: TestSigPack_remove_edge,
  remove_edge_e: TestSigPack_remove_edge_e,
  Mark: TestSigPack_Mark,
  find_vertex: TestSigPack_find_vertex,
  transitive_closure: TestSigPack_transitive_closure,
  add_transitive_closure: TestSigPack_add_transitive_closure,
  transitive_reduction: TestSigPack_transitive_reduction,
  replace_by_transitive_reduction: TestSigPack_replace_by_transitive_reduction,
  mirror: TestSigPack_mirror,
  complement: TestSigPack_complement,
  intersect: TestSigPack_intersect,
  union: TestSigPack_union,
  Dfs: TestSigPack_Dfs,
  Bfs: TestSigPack_Bfs,
  Marking: TestSigPack_Marking,
  Classic: TestSigPack_Classic,
  Rand: TestSigPack_Rand,
  Components: TestSigPack_Components,
  shortest_path: TestSigPack_shortest_path,
  ford_fulkerson: TestSigPack_ford_fulkerson
};

var G$8 = Test_clique.G;

var BK = Test_clique.BK;

export {
  Int ,
  Pair ,
  W ,
  Generic ,
  Dijkstra ,
  Traversal ,
  FF_Goldberg ,
  Neighbourhood ,
  Minsep$1 as Minsep,
  TestSigPack ,
  G$8 as G,
  BK ,
  
}
/* partial_arg Not a pure module */
