// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "../node_modules/rescript-test/src/Test.bs.js";
import * as Test_Utils from "./Test_Utils.bs.js";
import * as Monad_Reader from "../src/Monad_Reader.bs.js";

Test.test("Reader Type", (function (param) {
        
      }));

Test.test("run()", (function (param) {
        var result = Monad_Reader.run(/* Reader */{
              _0: (function (e) {
                  return e + 1 | 0;
                })
            }, 1);
        return Test_Utils.intEqual(undefined, result, 2);
      }));

Test.test("return()", (function (param) {
        var result = Monad_Reader.run(Monad_Reader.$$return(99), 1);
        return Test_Utils.intEqual(undefined, result, 99);
      }));

Test.test("ask()", (function (param) {
        var result = Monad_Reader.run(Monad_Reader.ask(undefined), 123);
        return Test_Utils.intEqual(undefined, result, 123);
      }));

Test.test("local()", (function (param) {
        var __x = /* Reader */{
          _0: (function (e) {
              return e + 1 | 0;
            })
        };
        var result = Monad_Reader.run(Monad_Reader.local((function (e) {
                    return -e | 0;
                  }), __x), 1);
        return Test_Utils.intEqual(undefined, result, 0);
      }));

Test.test("map()", (function (param) {
        var __x = /* Reader */{
          _0: (function (e) {
              return e + 1 | 0;
            })
        };
        var result = Monad_Reader.run(Monad_Reader.map((function (x) {
                    return Math.imul(x, 10);
                  }), __x), 1);
        return Test_Utils.intEqual(undefined, result, 20);
      }));

Test.test("bind() 1", (function (param) {
        var __x = /* Reader */{
          _0: (function (e) {
              return e + 1 | 0;
            })
        };
        var result = Monad_Reader.run(Monad_Reader.bind((function (x) {
                    return /* Reader */{
                            _0: (function (param) {
                                return (x << 1);
                              })
                          };
                  }), __x), 1);
        return Test_Utils.intEqual(undefined, result, 4);
      }));

Test.test("bind() 2", (function (param) {
        var __x = /* Reader */{
          _0: (function (e) {
              return e + 1 | 0;
            })
        };
        var result = Monad_Reader.run(Monad_Reader.bind((function (x) {
                    return Monad_Reader.$$return((x << 1));
                  }), __x), 1);
        return Test_Utils.intEqual(undefined, result, 4);
      }));

Test.test("bind() 3", (function (param) {
        var greet = function (name, greeting) {
          return greeting + ": " + name;
        };
        var ra = /* Reader */{
          _0: (function (param) {
              return greet("One", param);
            })
        };
        var rb = /* Reader */{
          _0: (function (param) {
              return greet("Two", param);
            })
        };
        var rc = /* Reader */{
          _0: (function (param) {
              return greet("Three", param);
            })
        };
        var r12 = Monad_Reader.bind((function (a) {
                return Monad_Reader.bind((function (b) {
                              return Monad_Reader.bind((function (c) {
                                            return Monad_Reader.$$return([
                                                        a,
                                                        b,
                                                        c
                                                      ]);
                                          }), rc);
                            }), rb);
              }), ra);
        var result = Monad_Reader.run(r12, "Hello");
        return Test_Utils.stringArrayEqual(undefined, result, [
                    "Hello: One",
                    "Hello: Two",
                    "Hello: Three"
                  ]);
      }));

Test.test("bind() 3.1", (function (param) {
        var greet = function (name, greeting) {
          return greeting + ": " + name;
        };
        var __x = /* Reader */{
          _0: (function (param) {
              return greet("One", param);
            })
        };
        var result = Monad_Reader.run(Monad_Reader.bind((function (a) {
                    var __x = /* Reader */{
                      _0: (function (param) {
                          return greet("Two", param);
                        })
                    };
                    return Monad_Reader.bind((function (b) {
                                  var __x = /* Reader */{
                                    _0: (function (param) {
                                        return greet("Three", param);
                                      })
                                  };
                                  return Monad_Reader.bind((function (c) {
                                                return Monad_Reader.$$return([
                                                            a,
                                                            b,
                                                            c
                                                          ]);
                                              }), __x);
                                }), __x);
                  }), __x), "Hey");
        return Test_Utils.stringArrayEqual(undefined, result, [
                    "Hey: One",
                    "Hey: Two",
                    "Hey: Three"
                  ]);
      }));

export {
  
}
/*  Not a pure module */
