// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Bastet_Int from "rescript-bastet/src/Bastet_Int.res.mjs";
import * as Bastet_Bool from "rescript-bastet/src/Bastet_Bool.res.mjs";
import * as Bastet_List from "rescript-bastet/src/Bastet_List.res.mjs";
import * as Bastet_Option from "rescript-bastet/src/Bastet_Option.res.mjs";
import * as Bastet_Functors from "rescript-bastet/src/Bastet_Functors.res.mjs";
import * as Bastet_Functions from "rescript-bastet/src/Bastet_Functions.res.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

let prim = Bastet_Functors.ListF.Option.Traversable.sequence({
  hd: "foo",
  tl: {
    hd: "bar",
    tl: /* [] */0
  }
});

console.log(prim);

let prim$1 = Bastet_Functors.ListF.Int.Show.show({
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }
  }
});

console.log(prim$1);

let $great$eq$great = Bastet_Option.Infix.$great$eq$great;

function get_form() {
  return {
    name: "Foo",
    address: "123 Bar St."
  };
}

function get_address(form) {
  return form.address;
}

function get_form_address(extra) {
  return $great$eq$great(get_form, get_address, extra);
}

let prim$2 = $great$eq$great(get_form, get_address, undefined);

console.log(prim$2);

let fmap_add = Bastet_Functors.ArrayF.Int.Additive.Fold_Map.fold_map;

let __x = [
  1,
  2,
  3,
  4,
  5
];

let prim$3 = fmap_add(Bastet_Functions.id, __x);

console.log(prim$3);

function trim_all(strings) {
  return Bastet_List.Infix.$less$$great(s => s.trim(), strings);
}

let prim$4 = trim_all({
  hd: "foo   ",
  tl: {
    hd: "bar",
    tl: {
      hd: "    baz",
      tl: /* [] */0
    }
  }
});

console.log(prim$4);

function total_score(a, b) {
  return {
    score: Bastet_Int.Additive.Semigroup.append(a.score, b.score),
    disqualified: Bastet_Bool.Disjunctive.Semigroup.append(a.disqualified, b.disqualified)
  };
}

let result = total_score({
  score: 4,
  disqualified: false
}, {
  score: 2,
  disqualified: true
});

console.log(result);

let CoreString;

let T;

export {
  CoreString,
  log,
  log2,
  T,
  $great$eq$great,
  get_form,
  get_address,
  get_form_address,
  fmap_add,
  trim_all,
  total_score,
  result,
}
/* prim Not a pure module */
