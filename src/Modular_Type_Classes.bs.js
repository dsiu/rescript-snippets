// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

function eq(a, b) {
  return a === b;
}

var Eq_bool = {
  eq: eq
};

function eq$1(a, b) {
  return a === b;
}

var Eq_int = {
  eq: eq$1
};

function Eq_prod(X, Y) {
  var eq = function (param, param$1) {
    if (Curry._2(X.eq, param[0], param$1[0])) {
      return Curry._2(Y.eq, param[1], param$1[1]);
    } else {
      return false;
    }
  };
  return {
          eq: eq
        };
}

function eq$2(param, param$1) {
  if (eq(param[0], param$1[0])) {
    return eq$1(param[1], param$1[1]);
  } else {
    return false;
  }
}

var Eq_bool_int = {
  eq: eq$2
};

var lt = Caml_obj.caml_lessthan;

var Ord_int = {
  eq: eq$1,
  lt: lt
};

function Ord_prod(X, Y) {
  var eq = function (param, param$1) {
    if (Curry._2(X.eq, param[0], param$1[0])) {
      return Curry._2(Y.eq, param[1], param$1[1]);
    } else {
      return false;
    }
  };
  var include = {
    eq: eq
  };
  var lt = function (param, param$1) {
    var x2 = param$1[0];
    var x1 = param[0];
    if (Curry._2(X.lt, x1, x2)) {
      return true;
    } else if (Curry._2(X.eq, x1, x2)) {
      return Curry._2(Y.lt, param[1], param$1[1]);
    } else {
      return false;
    }
  };
  return {
          eq: include.eq,
          lt: lt
        };
}

function eq$3(param, param$1) {
  if (eq$1(param[0], param$1[0])) {
    return eq$1(param[1], param$1[1]);
  } else {
    return false;
  }
}

var include = {
  eq: eq$3
};

function lt$1(param, param$1) {
  var x2 = param$1[0];
  var x1 = param[0];
  if (lt(x1, x2)) {
    return true;
  } else if (eq$1(x1, x2)) {
    return lt(param[1], param$1[1]);
  } else {
    return false;
  }
}

var Ord_int_int_eq = include.eq;

var Ord_int_int = {
  eq: Ord_int_int_eq,
  lt: lt$1
};

var x = [
  1,
  2
];

var y = [
  1,
  4
];

var test_ord_int_int = !Curry._2(Ord_int_int_eq, x, y) && Curry._2(lt$1, x, y);

console.log(test_ord_int_int);

function show(prim) {
  return String(prim);
}

var Show_int = {
  show: show
};

function show$1(x) {
  if (x) {
    return "True";
  } else {
    return "False";
  }
}

var Show_bool = {
  show: show$1
};

function print(show, x) {
  console.log(Curry._1(show.show, x));
  
}

var test_print_1 = print(Show_bool, true);

var test_print_2 = print(Show_int, 3);

function from_int(x) {
  return x;
}

function $plus(x, y) {
  return x + y | 0;
}

var Num_int = {
  from_int: from_int,
  $plus: $plus
};

function from_int$1(x) {
  return x !== 0;
}

function $plus$1(x, y) {
  if (x) {
    return true;
  } else {
    return y;
  }
}

var Num_bool = {
  from_int: from_int$1,
  $plus: $plus$1
};

var show_int = Show_int;

var show_bool = Show_bool;

var num_int = Num_int;

var num_bool = Num_bool;

exports.Eq_bool = Eq_bool;
exports.Eq_int = Eq_int;
exports.Eq_prod = Eq_prod;
exports.Eq_bool_int = Eq_bool_int;
exports.Ord_int = Ord_int;
exports.Ord_prod = Ord_prod;
exports.Ord_int_int = Ord_int_int;
exports.test_ord_int_int = test_ord_int_int;
exports.Show_int = Show_int;
exports.Show_bool = Show_bool;
exports.show_int = show_int;
exports.show_bool = show_bool;
exports.print = print;
exports.test_print_1 = test_print_1;
exports.test_print_2 = test_print_2;
exports.Num_int = Num_int;
exports.num_int = num_int;
exports.Num_bool = Num_bool;
exports.num_bool = num_bool;
/* test_ord_int_int Not a pure module */
