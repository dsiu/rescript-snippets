// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_int = require("rescript/lib/js/js_int.js");
var Js_list = require("rescript/lib/js/js_list.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

function log(prim) {
  console.log(prim);
  
}

function logList(l) {
  var prim = Js_list.toVector(l);
  console.log(prim);
  
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
  
}

function logList2(l, str) {
  var prim1 = Js_list.toVector(l);
  console.log(str, prim1);
  
}

function fold_left(f, _a, _l) {
  while(true) {
    var l = _l;
    var a = _a;
    if (!l) {
      return a;
    }
    _l = l.tl;
    _a = Curry._2(f, a, l.hd);
    continue ;
  };
}

function fold_right(f, l, a) {
  if (l) {
    return Curry._2(f, l.hd, fold_right(f, l.tl, a));
  } else {
    return a;
  }
}

function plus(a, b) {
  return a + b | 0;
}

var prim = fold_left(plus, 0, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });

console.log(prim);

function max(a, b) {
  if (Caml_obj.caml_greaterthan(a, b)) {
    return a;
  } else {
    return b;
  }
}

var prim$1 = fold_left((function (prim0, prim1) {
        return Math.max(prim0, prim1);
      }), Js_int.min, {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 6,
          tl: {
            hd: 20,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    });

console.log(prim$1);

function all(l) {
  return fold_left((function (prim0, prim1) {
                if (prim0) {
                  return prim1;
                } else {
                  return false;
                }
              }), true, l);
}

function any(l) {
  return fold_left((function (prim0, prim1) {
                if (prim0) {
                  return true;
                } else {
                  return prim1;
                }
              }), false, l);
}

function map(f, l) {
  return fold_right((function (e, a) {
                return {
                        hd: Curry._1(f, e),
                        tl: a
                      };
              }), l, /* [] */0);
}

logList2(map((function (x) {
            return (x << 1);
          }), {
          hd: 2,
          tl: {
            hd: 9,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }), "map");

function fold_right_tr(f, l, e) {
  return fold_left((function (x, y) {
                return Curry._2(f, y, x);
              }), e, Js_list.rev(l));
}

function copy(l) {
  return fold_right((function (e, a) {
                return {
                        hd: e,
                        tl: a
                      };
              }), l, /* [] */0);
}

logList2(copy({
          hd: 2,
          tl: {
            hd: 5,
            tl: {
              hd: 6,
              tl: /* [] */0
            }
          }
        }), "copy");

function append(x, y) {
  return fold_right((function (e, a) {
                return {
                        hd: e,
                        tl: a
                      };
              }), x, y);
}

logList2(append({
          hd: 8,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: /* [] */0
            }
          }
        }, {
          hd: 9,
          tl: {
            hd: 6,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }), "append");

function split(l) {
  return fold_right((function (param, param$1) {
                return [
                        {
                          hd: param[0],
                          tl: param$1[0]
                        },
                        {
                          hd: param[1],
                          tl: param$1[1]
                        }
                      ];
              }), l, [
              /* [] */0,
              /* [] */0
            ]);
}

var prim$2 = split({
      hd: [
        1,
        "one"
      ],
      tl: {
        hd: [
          2,
          "two"
        ],
        tl: /* [] */0
      }
    });

console.log(prim$2);

var List;

exports.List = List;
exports.log = log;
exports.logList = logList;
exports.log2 = log2;
exports.logList2 = logList2;
exports.fold_left = fold_left;
exports.fold_right = fold_right;
exports.plus = plus;
exports.max = max;
exports.all = all;
exports.any = any;
exports.map = map;
exports.fold_right_tr = fold_right_tr;
exports.copy = copy;
exports.append = append;
exports.split = split;
/* prim Not a pure module */
