// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.res.mjs";
import * as Lists_99 from "./Lists_99.res.mjs";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";

Jest.describe("List_99", () => {
  let test1_0 = [
    Lists_99.last({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: /* [] */0
          }
        }
      }
    }),
    "d"
  ];
  let test1_1 = {
    hd: [
      Lists_99.last(/* [] */0),
      undefined
    ],
    tl: /* [] */0
  };
  let test1 = {
    hd: test1_0,
    tl: test1_1
  };
  Jest.testAll("1. last", test1, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test2_0 = [
    Lists_99.last_two({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: /* [] */0
          }
        }
      }
    }),
    {
      hd: "c",
      tl: {
        hd: "d",
        tl: /* [] */0
      }
    }
  ];
  let test2_1 = {
    hd: [
      Lists_99.last_two({
        hd: "a",
        tl: /* [] */0
      }),
      undefined
    ],
    tl: /* [] */0
  };
  let test2 = {
    hd: test2_0,
    tl: test2_1
  };
  Jest.testAll("2. last_two", test2, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test3_0 = [
    Lists_99.at({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: /* [] */0
            }
          }
        }
      }
    }, 3),
    "c"
  ];
  let test3_1 = {
    hd: [
      Lists_99.at({
        hd: "a",
        tl: /* [] */0
      }, 3),
      undefined
    ],
    tl: /* [] */0
  };
  let test3 = {
    hd: test3_0,
    tl: test3_1
  };
  Jest.testAll("3. at", test3, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test4_0 = [
    Lists_99.length({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: /* [] */0
            }
          }
        }
      }
    }),
    5
  ];
  let test4_1 = {
    hd: [
      Lists_99.length({
        hd: "a",
        tl: /* [] */0
      }),
      1
    ],
    tl: {
      hd: [
        Lists_99.length(/* [] */0),
        0
      ],
      tl: /* [] */0
    }
  };
  let test4 = {
    hd: test4_0,
    tl: test4_1
  };
  Jest.testAll("4. length", test4, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test5_0 = [
    Lists_99.rev({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: /* [] */0
            }
          }
        }
      }
    }),
    {
      hd: "e",
      tl: {
        hd: "d",
        tl: {
          hd: "c",
          tl: {
            hd: "b",
            tl: {
              hd: "a",
              tl: /* [] */0
            }
          }
        }
      }
    }
  ];
  let test5_1 = {
    hd: [
      Lists_99.rev(/* [] */0),
      /* [] */0
    ],
    tl: /* [] */0
  };
  let test5 = {
    hd: test5_0,
    tl: test5_1
  };
  Jest.testAll("5. rev", test5, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test6_0 = [
    Lists_99.is_palindrome({
      hd: "x",
      tl: {
        hd: "a",
        tl: {
          hd: "m",
          tl: {
            hd: "a",
            tl: {
              hd: "x",
              tl: /* [] */0
            }
          }
        }
      }
    }),
    true
  ];
  let test6_1 = {
    hd: [
      Lists_99.is_palindrome({
        hd: "a",
        tl: {
          hd: "b",
          tl: {
            hd: "c",
            tl: /* [] */0
          }
        }
      }),
      false
    ],
    tl: {
      hd: [
        Lists_99.is_palindrome({
          hd: "a",
          tl: /* [] */0
        }),
        true
      ],
      tl: {
        hd: [
          Lists_99.is_palindrome(/* [] */0),
          true
        ],
        tl: /* [] */0
      }
    }
  };
  let test6 = {
    hd: test6_0,
    tl: test6_1
  };
  Jest.testAll("6. is_palindrome", test6, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test7_0 = [
    Lists_99.flatten({
      hd: {
        TAG: "One",
        _0: "a"
      },
      tl: {
        hd: {
          TAG: "Many",
          _0: {
            hd: {
              TAG: "One",
              _0: "b"
            },
            tl: {
              hd: {
                TAG: "Many",
                _0: {
                  hd: {
                    TAG: "One",
                    _0: "c"
                  },
                  tl: {
                    hd: {
                      TAG: "One",
                      _0: "d"
                    },
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  TAG: "One",
                  _0: "e"
                },
                tl: /* [] */0
              }
            }
          }
        },
        tl: /* [] */0
      }
    }),
    {
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: /* [] */0
            }
          }
        }
      }
    }
  ];
  let test7 = {
    hd: test7_0,
    tl: /* [] */0
  };
  Jest.testAll("7. flatten", test7, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test8_0 = [
    Lists_99.compress({
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "a",
                      tl: {
                        hd: "d",
                        tl: {
                          hd: "e",
                          tl: {
                            hd: "e",
                            tl: {
                              hd: "e",
                              tl: {
                                hd: "e",
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }),
    {
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "a",
            tl: {
              hd: "d",
              tl: {
                hd: "e",
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  ];
  let test8_1 = {
    hd: [
      Lists_99.compress({
        hd: "a",
        tl: {
          hd: "a",
          tl: /* [] */0
        }
      }),
      {
        hd: "a",
        tl: /* [] */0
      }
    ],
    tl: {
      hd: [
        Lists_99.compress({
          hd: "a",
          tl: /* [] */0
        }),
        {
          hd: "a",
          tl: /* [] */0
        }
      ],
      tl: /* [] */0
    }
  };
  let test8 = {
    hd: test8_0,
    tl: test8_1
  };
  Jest.testAll("8. compress", test8, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test9_0 = [
    Belt_List.toArray(Belt_List.map(Lists_99.pack({
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "a",
                      tl: {
                        hd: "d",
                        tl: {
                          hd: "d",
                          tl: {
                            hd: "e",
                            tl: {
                              hd: "e",
                              tl: {
                                hd: "e",
                                tl: {
                                  hd: "e",
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }), Belt_List.toArray)),
    [
      [
        "a",
        "a",
        "a",
        "a"
      ],
      ["b"],
      [
        "c",
        "c"
      ],
      [
        "a",
        "a"
      ],
      [
        "d",
        "d"
      ],
      [
        "e",
        "e",
        "e",
        "e"
      ]
    ]
  ];
  let test9 = {
    hd: test9_0,
    tl: /* [] */0
  };
  Jest.testAll("9. pack", test9, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test10_0 = [
    Belt_List.toArray(Lists_99.encode({
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "a",
                      tl: {
                        hd: "d",
                        tl: {
                          hd: "e",
                          tl: {
                            hd: "e",
                            tl: {
                              hd: "e",
                              tl: {
                                hd: "e",
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    })),
    [
      [
        4,
        "a"
      ],
      [
        1,
        "b"
      ],
      [
        2,
        "c"
      ],
      [
        2,
        "a"
      ],
      [
        1,
        "d"
      ],
      [
        4,
        "e"
      ]
    ]
  ];
  let test10 = {
    hd: test10_0,
    tl: /* [] */0
  };
  Jest.testAll("10. encode", test10, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test11_0 = [
    Belt_List.toArray(Lists_99.encode_11({
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "a",
                      tl: {
                        hd: "d",
                        tl: {
                          hd: "e",
                          tl: {
                            hd: "e",
                            tl: {
                              hd: "e",
                              tl: {
                                hd: "e",
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    })),
    [
      {
        TAG: "Many",
        _0: 4,
        _1: "a"
      },
      {
        TAG: "One",
        _0: "b"
      },
      {
        TAG: "Many",
        _0: 2,
        _1: "c"
      },
      {
        TAG: "Many",
        _0: 2,
        _1: "a"
      },
      {
        TAG: "One",
        _0: "d"
      },
      {
        TAG: "Many",
        _0: 4,
        _1: "e"
      }
    ]
  ];
  let test11 = {
    hd: test11_0,
    tl: /* [] */0
  };
  Jest.testAll("11. encode", test11, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test12_0 = [
    Belt_List.toArray(Lists_99.decode({
      hd: {
        TAG: "Many",
        _0: 4,
        _1: "a"
      },
      tl: {
        hd: {
          TAG: "One",
          _0: "b"
        },
        tl: {
          hd: {
            TAG: "Many",
            _0: 2,
            _1: "c"
          },
          tl: {
            hd: {
              TAG: "Many",
              _0: 2,
              _1: "a"
            },
            tl: {
              hd: {
                TAG: "One",
                _0: "d"
              },
              tl: {
                hd: {
                  TAG: "Many",
                  _0: 4,
                  _1: "e"
                },
                tl: /* [] */0
              }
            }
          }
        }
      }
    })),
    Belt_List.toArray({
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "a",
                      tl: {
                        hd: "d",
                        tl: {
                          hd: "e",
                          tl: {
                            hd: "e",
                            tl: {
                              hd: "e",
                              tl: {
                                hd: "e",
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    })
  ];
  let test12 = {
    hd: test12_0,
    tl: /* [] */0
  };
  Jest.testAll("12. decode", test12, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test13_0 = [
    Belt_List.toArray(Lists_99.encode_13({
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "a",
                      tl: {
                        hd: "d",
                        tl: {
                          hd: "e",
                          tl: {
                            hd: "e",
                            tl: {
                              hd: "e",
                              tl: {
                                hd: "e",
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    })),
    [
      {
        TAG: "Many",
        _0: 4,
        _1: "a"
      },
      {
        TAG: "One",
        _0: "b"
      },
      {
        TAG: "Many",
        _0: 2,
        _1: "c"
      },
      {
        TAG: "Many",
        _0: 2,
        _1: "a"
      },
      {
        TAG: "One",
        _0: "d"
      },
      {
        TAG: "Many",
        _0: 4,
        _1: "e"
      }
    ]
  ];
  let test13 = {
    hd: test13_0,
    tl: /* [] */0
  };
  Jest.testAll("13. encode", test13, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test14_0 = [
    Lists_99.duplicate({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "c",
            tl: {
              hd: "d",
              tl: /* [] */0
            }
          }
        }
      }
    }),
    {
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "b",
          tl: {
            hd: "b",
            tl: {
              hd: "c",
              tl: {
                hd: "c",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "c",
                    tl: {
                      hd: "d",
                      tl: {
                        hd: "d",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ];
  let test14 = {
    hd: test14_0,
    tl: /* [] */0
  };
  Jest.testAll("14. duplicate", test14, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test15_0 = [
    Lists_99.replicate({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, 3),
    {
      hd: "a",
      tl: {
        hd: "a",
        tl: {
          hd: "a",
          tl: {
            hd: "b",
            tl: {
              hd: "b",
              tl: {
                hd: "b",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "c",
                    tl: {
                      hd: "c",
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ];
  let test15 = {
    hd: test15_0,
    tl: /* [] */0
  };
  Jest.testAll("15. replicate", test15, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test16_0 = [
    Lists_99.drop({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: {
                hd: "f",
                tl: {
                  hd: "g",
                  tl: {
                    hd: "h",
                    tl: {
                      hd: "i",
                      tl: {
                        hd: "j",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, 3),
    {
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "d",
          tl: {
            hd: "e",
            tl: {
              hd: "g",
              tl: {
                hd: "h",
                tl: {
                  hd: "j",
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    }
  ];
  let test16 = {
    hd: test16_0,
    tl: /* [] */0
  };
  Jest.testAll("16. drop", test16, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test17_0 = [
    Lists_99.split({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: {
                hd: "f",
                tl: {
                  hd: "g",
                  tl: {
                    hd: "h",
                    tl: {
                      hd: "i",
                      tl: {
                        hd: "j",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, 3),
    [
      {
        hd: "a",
        tl: {
          hd: "b",
          tl: {
            hd: "c",
            tl: /* [] */0
          }
        }
      },
      {
        hd: "d",
        tl: {
          hd: "e",
          tl: {
            hd: "f",
            tl: {
              hd: "g",
              tl: {
                hd: "h",
                tl: {
                  hd: "i",
                  tl: {
                    hd: "j",
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    ]
  ];
  let test17 = {
    hd: test17_0,
    tl: /* [] */0
  };
  Jest.testAll("17. split", test17, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test18_0 = [
    Lists_99.slice({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: {
                hd: "f",
                tl: {
                  hd: "g",
                  tl: {
                    hd: "h",
                    tl: {
                      hd: "i",
                      tl: {
                        hd: "j",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, 2, 6),
    {
      hd: "c",
      tl: {
        hd: "d",
        tl: {
          hd: "e",
          tl: {
            hd: "f",
            tl: {
              hd: "g",
              tl: /* [] */0
            }
          }
        }
      }
    }
  ];
  let test18 = {
    hd: test18_0,
    tl: /* [] */0
  };
  Jest.testAll("18. slice", test18, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test19_0 = [
    Lists_99.rotate({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: {
                hd: "f",
                tl: {
                  hd: "g",
                  tl: {
                    hd: "h",
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }, 3),
    {
      hd: "d",
      tl: {
        hd: "e",
        tl: {
          hd: "f",
          tl: {
            hd: "g",
            tl: {
              hd: "h",
              tl: {
                hd: "a",
                tl: {
                  hd: "b",
                  tl: {
                    hd: "c",
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  ];
  let test19 = {
    hd: test19_0,
    tl: /* [] */0
  };
  Jest.testAll("19. rotate", test19, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test20_0 = [
    Lists_99.remove_at({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: /* [] */0
          }
        }
      }
    }, 1),
    {
      hd: "a",
      tl: {
        hd: "c",
        tl: {
          hd: "d",
          tl: /* [] */0
        }
      }
    }
  ];
  let test20 = {
    hd: test20_0,
    tl: /* [] */0
  };
  Jest.testAll("20. remove_at", test20, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test21_0 = [
    Lists_99.insert_at({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: /* [] */0
          }
        }
      }
    }, 1, "alfa"),
    {
      hd: "a",
      tl: {
        hd: "alfa",
        tl: {
          hd: "b",
          tl: {
            hd: "c",
            tl: {
              hd: "d",
              tl: /* [] */0
            }
          }
        }
      }
    }
  ];
  let test21 = {
    hd: test21_0,
    tl: /* [] */0
  };
  Jest.testAll("21. insert_at", test21, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test22_0 = [
    Belt_List.toArray(Lists_99.range(4, 9)),
    Belt_List.toArray({
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: {
            hd: 7,
            tl: {
              hd: 8,
              tl: {
                hd: 9,
                tl: /* [] */0
              }
            }
          }
        }
      }
    })
  ];
  let test22 = {
    hd: test22_0,
    tl: /* [] */0
  };
  Jest.testAll("22. range", test22, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test23_0 = [
    Belt_List.toArray(Lists_99.range_tail_recur(3, 11)),
    Belt_List.toArray(Lists_99.range(3, 11))
  ];
  let test23 = {
    hd: test23_0,
    tl: /* [] */0
  };
  Jest.testAll("23. range", test23, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let test24_0 = [
    Belt_List.toArray(Lists_99.rand_select({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: {
            hd: "d",
            tl: {
              hd: "e",
              tl: {
                hd: "f",
                tl: {
                  hd: "g",
                  tl: {
                    hd: "h",
                    tl: {
                      hd: "i",
                      tl: {
                        hd: "j",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, 3)),
    Belt_List.toArray({
      hd: "d",
      tl: {
        hd: "i",
        tl: {
          hd: "e",
          tl: /* [] */0
        }
      }
    })
  ];
  let test24 = {
    hd: test24_0,
    tl: /* [] */0
  };
  Jest.Skip.testAll("24. rand_select", test24, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
});

/*  Not a pure module */
