// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function callbackWithResult(f) {
  return function (error, result) {
    if (!(error == null)) {
      return Curry._1(f, {
                  TAG: /* Error */1,
                  _0: error
                });
    }
    if (!(result == null)) {
      return Curry._1(f, {
                  TAG: /* Ok */0,
                  _0: result
                });
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "nodeCallback arguments invalid",
          Error: new Error()
        };
  };
}

function onResult(result) {
  var message;
  message = result.TAG === /* Ok */0 ? "Success: " + result._0 : "Error: " + Belt_Option.getWithDefault(result._0.message, "Unknown");
  console.log(message);
  
}

Fs.readFile("hello.txt", "UTF-8", callbackWithResult(onResult));

function callbackWithSuccessOrError(onSuccess, onError) {
  return function (error, result) {
    if (!(error == null)) {
      return Curry._1(onError, error);
    }
    if (!(result == null)) {
      return Curry._1(onSuccess, result);
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "nodeCallback arguments invalid",
          Error: new Error()
        };
  };
}

function onSuccess(result) {
  var message = "Success: " + result;
  console.log(message);
  
}

function onError(error) {
  var message = "Error: " + Belt_Option.getWithDefault(error.message, "Unknown");
  console.log(message);
  
}

Fs.readFile("hello.txt", "UTF-8", callbackWithSuccessOrError(onSuccess, onError));

function callbackWithPromise(f) {
  return function (error, result) {
    if (error == null) {
      if (result == null) {
        return Curry._1(f, Promise.reject({
                        RE_EXN_ID: "Failure",
                        _1: "nodeCallback arguments invalid"
                      }));
      } else {
        return Curry._1(f, Promise.resolve(result));
      }
    }
    var message = Belt_Option.getWithDefault(error.message, "Unknown");
    return Curry._1(f, Promise.reject({
                    RE_EXN_ID: "Failure",
                    _1: message
                  }));
  };
}

function handlePromise(promise) {
  var __x = promise.then(function (result) {
        return Promise.resolve("Success: " + result);
      });
  var __x$1 = __x.catch(function (_error) {
        return Promise.resolve("Error: Unknown");
      });
  __x$1.then(function (message) {
        console.log(message);
        return Promise.resolve(undefined);
      });
  
}

Fs.readFile("hello.txt", "UTF-8", callbackWithPromise(handlePromise));

exports.callbackWithResult = callbackWithResult;
exports.onResult = onResult;
exports.callbackWithSuccessOrError = callbackWithSuccessOrError;
exports.onSuccess = onSuccess;
exports.onError = onError;
exports.callbackWithPromise = callbackWithPromise;
exports.handlePromise = handlePromise;
/*  Not a pure module */
