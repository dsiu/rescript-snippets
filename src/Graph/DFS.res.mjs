// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../Utils.res.mjs";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Belt_MapString from "@rescript/runtime/lib/es6/Belt_MapString.js";

function log(prim) {
  console.log(prim);
}

function logList(l) {
  let prim = Belt_List.toArray(l);
  console.log(prim);
}

function log2(x, y) {
  console.log(y, x);
}

function logList2(l, str) {
  let x = Belt_List.toArray(l);
  console.log(str, x);
}

function mapListToString(m) {
  let b = Belt_MapString.toList(m);
  return ", ".concat(...Belt_List.toArray(Belt_List.map(b, param => param[0] + `: ` + param[1])));
}

function logStrMapList(m, str) {
  let prim = str + `: ` + mapListToString(m);
  console.log(prim);
}

function string_of_state(param) {
  let d_str = Utils.Printable.MapString.Int.toString(param.d, undefined);
  let f_str = Utils.Printable.MapString.Int.toString(param.f, undefined);
  let pred_str = Utils.Printable.MapString.$$String.toString(param.pred);
  return ` d = ` + d_str + `\n f = ` + f_str + `\n pred = ` + pred_str + `\n`;
}

function depth_first_search(g) {
  let node = (param, u) => {
    let match = param[1];
    let color = match.color;
    let pred = match.pred;
    let f = match.f;
    let d = match.d;
    let t = param[0];
    let dfs_visit = (t, u, param) => {
      let edge = (param, v) => {
        let match = param[1];
        let color = match.color;
        let pred = match.pred;
        let f = match.f;
        let d = match.d;
        let t = param[0];
        if (Belt_MapString.getExn(color, v) === "White") {
          return dfs_visit(t, v, {
            d: d,
            f: f,
            pred: Belt_MapString.set(pred, v, u),
            color: color
          });
        } else {
          return [
            t,
            {
              d: d,
              f: f,
              pred: pred,
              color: color
            }
          ];
        }
      };
      let t$1 = t + 1 | 0;
      let match = Belt_List.reduce(Belt_MapString.getExn(g, u), [
        t$1,
        {
          d: Belt_MapString.set(param.d, u, t$1),
          f: param.f,
          pred: param.pred,
          color: Belt_MapString.set(param.color, u, "Gray")
        }
      ], edge);
      let match$1 = match[1];
      let t$2 = match[0] + 1 | 0;
      return [
        t$2,
        {
          d: match$1.d,
          f: Belt_MapString.set(match$1.f, u, t$2),
          pred: match$1.pred,
          color: Belt_MapString.set(match$1.color, u, "Black")
        }
      ];
    };
    if (Belt_MapString.getExn(color, u) === "White") {
      return dfs_visit(t, u, {
        d: d,
        f: f,
        pred: pred,
        color: color
      });
    } else {
      return [
        t,
        {
          d: d,
          f: f,
          pred: pred,
          color: color
        }
      ];
    }
  };
  let v = Belt_List.reduce(Belt_MapString.toList(g), /* [] */0, (acc, param) => ({
    hd: param[0],
    tl: acc
  }));
  let initial_state_color = Belt_List.reduceReverse(v, undefined, (m, x) => Belt_MapString.set(m, x, "White"));
  let initial_state = {
    d: undefined,
    f: undefined,
    pred: undefined,
    color: initial_state_color
  };
  return Belt_List.reduceReverse(v, [
      0,
      initial_state
    ], node)[1];
}

let Dfs = {
  string_of_state: string_of_state,
  depth_first_search: depth_first_search
};

let g = Belt_List.reduceReverse({
  hd: [
    "u",
    {
      hd: "v",
      tl: {
        hd: "x",
        tl: /* [] */0
      }
    }
  ],
  tl: {
    hd: [
      "v",
      {
        hd: "y",
        tl: /* [] */0
      }
    ],
    tl: {
      hd: [
        "w",
        {
          hd: "z",
          tl: {
            hd: "y",
            tl: /* [] */0
          }
        }
      ],
      tl: {
        hd: [
          "x",
          {
            hd: "v",
            tl: /* [] */0
          }
        ],
        tl: {
          hd: [
            "y",
            {
              hd: "x",
              tl: /* [] */0
            }
          ],
          tl: {
            hd: [
              "z",
              {
                hd: "z",
                tl: /* [] */0
              }
            ],
            tl: /* [] */0
          }
        }
      }
    }
  }
}, undefined, (m, param) => Belt_MapString.set(m, param[0], param[1]));

let s = depth_first_search(g);

let prim = string_of_state(s);

console.log(prim);

let Str_map;

export {
  Str_map,
  log,
  logList,
  log2,
  logList2,
  mapListToString,
  logStrMapList,
  Dfs,
}
/* g Not a pure module */
