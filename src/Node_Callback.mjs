// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function callbackWithResult(f) {
  return function (error, result) {
    if (!(error == null)) {
      return f({
                  TAG: "Error",
                  _0: error
                });
    }
    if (!(result == null)) {
      return f({
                  TAG: "Ok",
                  _0: result
                });
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "nodeCallback arguments invalid",
          Error: new Error()
        };
  };
}

function onResult(result) {
  var message;
  message = result.TAG === "Ok" ? "Success: " + result._0 : "Error: " + Belt_Option.getWithDefault(result._0.message, "Unknown");
  console.log(message);
}

Fs.readFile("hello.txt", "UTF-8", callbackWithResult(onResult));

function callbackWithSuccessOrError(onSuccess, onError) {
  return function (error, result) {
    if (!(error == null)) {
      return onError(error);
    }
    if (!(result == null)) {
      return onSuccess(result);
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "nodeCallback arguments invalid",
          Error: new Error()
        };
  };
}

function onSuccess(result) {
  var message = "Success: " + result;
  console.log(message);
}

function onError(error) {
  var message = "Error: " + Belt_Option.getWithDefault(error.message, "Unknown");
  console.log(message);
}

Fs.readFile("hello.txt", "UTF-8", callbackWithSuccessOrError(onSuccess, onError));

function callbackWithPromise(f) {
  return function (error, result) {
    if (error == null) {
      if (result == null) {
        return f(Promise.reject({
                        RE_EXN_ID: "Failure",
                        _1: "nodeCallback arguments invalid"
                      }));
      } else {
        return f(Promise.resolve(result));
      }
    }
    var message = Belt_Option.getWithDefault(error.message, "Unknown");
    f(Promise.reject({
              RE_EXN_ID: "Failure",
              _1: message
            }));
  };
}

function handlePromise(promise) {
  ((function (__x) {
          return Js_promise.then_((function (message) {
                        console.log(message);
                        return Promise.resolve();
                      }), __x);
        })((function (__x) {
              return Js_promise.$$catch((function (_error) {
                            return Promise.resolve("Error: Unknown");
                          }), __x);
            })((function (__x) {
                  return Js_promise.then_((function (result) {
                                return Promise.resolve("Success: " + result);
                              }), __x);
                })(promise))));
}

Fs.readFile("hello.txt", "UTF-8", callbackWithPromise(handlePromise));

export {
  callbackWithResult ,
  onResult ,
  callbackWithSuccessOrError ,
  onSuccess ,
  onError ,
  callbackWithPromise ,
  handlePromise ,
}
/*  Not a pure module */
