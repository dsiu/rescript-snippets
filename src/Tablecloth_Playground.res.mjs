// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as TableclothMap from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothMap.res.mjs";
import * as TableclothSet from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothSet.res.mjs";
import * as Stdlib__Ordering from "@dsiu/rescript-stdlib-fp/src/Stdlib__Ordering.res.mjs";
import * as TableclothTuple2 from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothTuple2.res.mjs";
import * as TableclothComparator from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothComparator.res.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

let prim = TableclothTuple2.toArray(TableclothTuple2.make(3, 4));

console.log(prim);

function intCompare(a, b) {
  return Stdlib__Ordering.toInt(Primitive_int.compare(a, b));
}

function compare(none, none$1) {
  return TableclothTuple2.compare(none, none$1, intCompare, intCompare);
}

let include = TableclothComparator.Make({
  compare: compare
});

let comparator = include.comparator;

let Point = {
  intCompare: intCompare,
  compare: compare,
  comparator: comparator
};

let points = TableclothSet.fromArray([
  [
    0,
    0
  ],
  [
    3,
    4
  ],
  [
    6,
    7
  ]
], {
  comparator: comparator
});

let prim$1 = TableclothSet.toArray(points);

console.log(prim$1);

let pointToAnimal = TableclothMap.fromArray({
  comparator: comparator
}, [
  [
    [
      0,
      0
    ],
    "Cow"
  ],
  [
    [
      3,
      4
    ],
    "Sheep"
  ],
  [
    [
      6,
      7
    ],
    "Pig"
  ]
]);

function a(x) {
  return x;
}

let TC;

let b = pointToAnimal;

export {
  log,
  log2,
  TC,
  Point,
  points,
  pointToAnimal,
  a,
  b,
}
/* prim Not a pure module */
