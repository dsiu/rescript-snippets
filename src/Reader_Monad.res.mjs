// Generated by ReScript, PLEASE EDIT WITH CARE


let r = {
  TAG: "Reader",
  _0: e => e + 1 | 0
};

function run(r, env) {
  return r._0(env);
}

let r1 = {
  TAG: "Reader",
  _0: e => e + 1 | 0
};

run(r1, 1);

function $$return(a) {
  return {
    TAG: "Reader",
    _0: _env => a
  };
}

let r2 = {
  TAG: "Reader",
  _0: _env => 99
};

run(r2, 1);

function ask() {
  return {
    TAG: "Reader",
    _0: env => env
  };
}

let r3 = {
  TAG: "Reader",
  _0: env => env
};

run(r3, 123);

function local(f, m) {
  return {
    TAG: "Reader",
    _0: env => run(m, f(env))
  };
}

let r4 = {
  TAG: "Reader",
  _0: e => e + 1 | 0
};

let r5 = local(e => -e | 0, r4);

run(r5, 1);

function map(f, m) {
  return {
    TAG: "Reader",
    _0: env => f(run(m, env))
  };
}

let r6 = {
  TAG: "Reader",
  _0: e => e + 1 | 0
};

let r7 = map(x => x * 10 | 0, r6);

run(r7, 1);

function bind(f, m) {
  return {
    TAG: "Reader",
    _0: env => run(f(run(m, env)), env)
  };
}

let r8 = {
  TAG: "Reader",
  _0: e => e + 1 | 0
};

let r9 = bind(x => ({
  TAG: "Reader",
  _0: param => (x << 1)
}), r8);

run(r9, 1);

let r10 = {
  TAG: "Reader",
  _0: e => e + 1 | 0
};

let r11 = bind(x => {
  let a = (x << 1);
  return {
    TAG: "Reader",
    _0: _env => a
  };
}, r10);

run(r11, 1);

function greet(name, greeting) {
  return greeting + ": " + name;
}

function lines(__x) {
  return __x.map(prim => {
    console.log(prim);
  });
}

let ra = {
  TAG: "Reader",
  _0: extra => greet("One", extra)
};

let rb = {
  TAG: "Reader",
  _0: extra => greet("Two", extra)
};

let rc = {
  TAG: "Reader",
  _0: extra => greet("Three", extra)
};

let r12 = bind(a => bind(b => bind(c => {
  let a$1 = lines([
    a,
    b,
    c
  ]);
  return {
    TAG: "Reader",
    _0: _env => a$1
  };
}, rc), rb), ra);

run(r12, "Hello");

function bindFlip(m, f) {
  return bind(f, m);
}

function greet$1(name, greeting) {
  return greeting + ": " + name;
}

function lines$1(__x) {
  return __x.map(prim => {
    console.log(prim);
  });
}

let ra$1 = {
  TAG: "Reader",
  _0: extra => greet$1("One", extra)
};

let rb$1 = {
  TAG: "Reader",
  _0: extra => greet$1("Two", extra)
};

let rc$1 = {
  TAG: "Reader",
  _0: extra => greet$1("Three", extra)
};

let r13 = bind(a => bind(b => bind(c => {
  let a$1 = lines$1([
    a,
    b,
    c
  ]);
  return {
    TAG: "Reader",
    _0: _env => a$1
  };
}, rc$1), rb$1), ra$1);

run(r13, "Goodbye");

export {
  r,
  run,
  r1,
  $$return,
  r2,
  ask,
  r3,
  local,
  r4,
  r5,
  map,
  r6,
  r7,
  bind,
  r8,
  r9,
  r10,
  r11,
  r12,
  bindFlip,
  greet$1 as greet,
  lines$1 as lines,
  ra$1 as ra,
  rb$1 as rb,
  rc$1 as rc,
  r13,
}
/*  Not a pure module */
