// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";

function mapOption$p(f, opt) {
  if (opt) {
    return /* Some' */{
            _0: Curry._1(f, opt._0)
          };
  } else {
    return /* None' */0;
  }
}

var a = /* Some' */{
  _0: 5
};

function inc(x) {
  return x + 1 | 0;
}

var c = mapOption$p(inc, a);

var d = mapOption$p(inc, /* None' */0);

var myInt = 42;

var myFloat = 4.2;

var myBool = false;

var myStr = "Hello";

var List$p = {};

var myList = /* Con */{
  _0: 1,
  _1: /* Con */{
    _0: 2,
    _1: /* Con */{
      _0: 3,
      _1: /* Empty */0
    }
  }
};

console.log(myList, "myList");

function length(t) {
  if (t) {
    return 1 + length(t._1) | 0;
  } else {
    return 0;
  }
}

var HList = {
  length: length
};

var myHeteroList = /* Con */{
  _0: 1,
  _1: /* Con */{
    _0: 2.5,
    _1: /* Con */{
      _0: false,
      _1: /* Con */{
        _0: "abc",
        _1: /* Con */{
          _0: 5,
          _1: /* Con */{
            _0: /* Con */{
              _0: 1,
              _1: /* Con */{
                _0: "def",
                _1: /* Empty */0
              }
            },
            _1: /* Empty */0
          }
        }
      }
    }
  }
};

var myListLength = length(myHeteroList);

console.log(myHeteroList, "myHeteroList");

console.log(myListLength, "myListLength");

function length$1(t) {
  if (t) {
    return 1 + length$1(t._1) | 0;
  } else {
    return 0;
  }
}

function head(t) {
  return t._0;
}

var SafeList = {
  length: length$1,
  head: head
};

var nonEmptyList = /* Con */{
  _0: 1,
  _1: /* Con */{
    _0: 2,
    _1: /* Con */{
      _0: 3,
      _1: /* Con */{
        _0: 4,
        _1: /* Empty */0
      }
    }
  }
};

var sizeOfNonEmptyList = length$1(nonEmptyList);

var firstElem = head(nonEmptyList);

console.log(sizeOfNonEmptyList, "sizeOfNonEmptyList");

console.log(firstElem, "firstElem");

var sizeOfEmptyList = length$1(/* Empty */0);

console.log(/* Empty */0, "emptyList");

console.log(sizeOfEmptyList, "sizeOfEmptyList");

var one = /* Succ */{
  _0: /* Zero */0
};

var two = /* Succ */{
  _0: /* Succ */{
    _0: /* Zero */0
  }
};

var three = /* Succ */{
  _0: two
};

console.log(one, "one");

console.log(two, "two");

function inc$1(pn) {
  return /* Succ */{
          _0: pn
        };
}

var three_ = /* Succ */{
  _0: /* Succ */{
    _0: /* Succ */{
      _0: /* Zero */0
    }
  }
};

var three__ = /* Succ */{
  _0: two
};

function dec(pn) {
  return pn._0;
}

var one_ = /* Succ */{
  _0: /* Zero */0
};

function isEqual(_i, _j) {
  while(true) {
    var j = _j;
    var i = _i;
    if (!i) {
      if (j) {
        return false;
      } else {
        return true;
      }
    }
    if (!j) {
      return false;
    }
    _j = j._0;
    _i = i._0;
    continue ;
  };
}

var isTwoEqualToOne = isEqual(one, two);

var isThreeEqualToSuccTwo = isEqual(/* Succ */{
      _0: two
    }, three);

console.log(isTwoEqualToOne, "isTwoEqualToOne");

console.log(isThreeEqualToSuccTwo, "isThreeEqualToSuccTwo");

function $$eval(pn) {
  if (pn) {
    return 1 + $$eval(pn._0) | 0;
  } else {
    return 0;
  }
}

var threeValue = $$eval(three);

var fourValue = $$eval(/* Succ */{
      _0: three
    });

console.log(threeValue, "threeValue");

console.log(fourValue, "fourValue");

function length$2(l) {
  if (l) {
    return 1 + length$2(l._1) | 0;
  } else {
    return 0;
  }
}

function pop(l) {
  return l._1;
}

function push(l, v) {
  if (l) {
    return /* Con */{
            _0: v,
            _1: l
          };
  } else {
    return /* Con */{
            _0: v,
            _1: /* Empty */0
          };
  }
}

var LengthList = {
  length: length$2,
  pop: pop,
  push: push
};

var twoElemList = /* Con */{
  _0: 1,
  _1: /* Con */{
    _0: 2,
    _1: /* Empty */0
  }
};

var threeElemList = push(twoElemList, 3);

var oneElemList = pop(pop(threeElemList));

console.log(twoElemList, "twoElemList");

console.log(threeElemList, "threeElemList");

console.log(oneElemList, "oneElemList");

function push_(l, v) {
  return {
          hd: v,
          tl: /* [] */0
        };
}

var b = /* None' */0;

var emptyList = /* Empty */0;

export {
  mapOption$p ,
  a ,
  b ,
  c ,
  d ,
  myInt ,
  myFloat ,
  myBool ,
  myStr ,
  List$p ,
  myList ,
  HList ,
  myHeteroList ,
  myListLength ,
  SafeList ,
  nonEmptyList ,
  sizeOfNonEmptyList ,
  firstElem ,
  emptyList ,
  sizeOfEmptyList ,
  one ,
  two ,
  three ,
  inc$1 as inc,
  three_ ,
  three__ ,
  dec ,
  one_ ,
  isEqual ,
  isTwoEqualToOne ,
  isThreeEqualToSuccTwo ,
  $$eval ,
  threeValue ,
  fourValue ,
  LengthList ,
  twoElemList ,
  threeElemList ,
  oneElemList ,
  push_ ,
}
/* c Not a pure module */
