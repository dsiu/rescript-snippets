// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Stdlib_Exn from "@rescript/runtime/lib/es6/Stdlib_Exn.js";
import * as Stdlib_Promise from "@rescript/runtime/lib/es6/Stdlib_Promise.js";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let p1 = new Promise((resolve, _reject) => resolve("hello world"));

console.log(p1);

let p2 = Promise.resolve("some value");

console.log(p2);

let MyOwnError = /* @__PURE__ */Primitive_exceptions.create("Rescript_Promise_Examples.MyOwnError");

let p3 = Promise.reject({
  RE_EXN_ID: MyOwnError,
  _1: "some rejection"
});

console.log(p3);

Promise.resolve("hello world").then(msg => Promise.resolve("Message: " + msg)).then(msg => {
  console.log(msg);
  return Promise.resolve();
});

function queryComments(username) {
  let tmp = username === "patrick" ? [
      "comment 1",
      "comment 2"
    ] : [];
  return Promise.resolve(tmp);
}

function queryUser(param) {
  return Promise.resolve({
    name: "patrick"
  });
}

queryUser("u1").then(user => queryComments(user.name)).then(comments => {
  Belt_Array.forEach(comments, comment => {
    console.log(comment);
  });
  return Promise.resolve();
});

function createNumPromise(n) {
  return Promise.resolve(n);
}

Promise.resolve(5).then(num => num + 1 | 0).then(num => {
  console.log(num);
});

let MyError = /* @__PURE__ */Primitive_exceptions.create("Rescript_Promise_Examples.MyError");

Stdlib_Promise.$$catch(Promise.reject({
  RE_EXN_ID: MyError,
  _1: "test"
}).then(str => {
  console.log("this should not be reached: " + str);
  return Promise.resolve({
    TAG: "Ok",
    _0: "successful"
  });
}), e => {
  let err = e.RE_EXN_ID === MyError ? "found MyError: " + e._1 : "Some unknown error";
  return Promise.resolve({
    TAG: "Error",
    _0: err
  });
}).then(result => {
  let msg;
  msg = result.TAG === "Ok" ? "Successful: " + result._0 : "Error: " + result._0;
  console.log(msg);
  return Promise.resolve();
});

function causeErr() {
  return Promise.resolve(Stdlib_Exn.raiseError("Some JS error"));
}

Stdlib_Promise.$$catch(Promise.resolve().then(() => Promise.resolve(Stdlib_Exn.raiseError("Some JS error"))), e => {
  let tmp;
  if (e.RE_EXN_ID === Stdlib_Exn.$$Error) {
    let msg = e._1.message;
    tmp = msg !== undefined ? "JS exception occurred: " + msg : "Some other JS value has been thrown";
  } else {
    tmp = "Unexpected error occurred";
  }
  return Promise.resolve(tmp);
});

let TestError = /* @__PURE__ */Primitive_exceptions.create("Rescript_Promise_Examples.TestError");

function causeJsErr() {
  return Stdlib_Exn.raiseError("Some JS error");
}

function causeReScriptErr() {
  throw {
    RE_EXN_ID: TestError,
    _1: "Some ReScript error",
    Error: new Error()
  };
}

Stdlib_Promise.$$catch(Promise.resolve().then(() => {
  if (generateRandomInt() > 5) {
    throw {
      RE_EXN_ID: TestError,
      _1: "Some ReScript error",
      Error: new Error()
    };
  }
  return Promise.resolve(Stdlib_Exn.raiseError("Some JS error"));
}), e => {
  if (e.RE_EXN_ID === TestError) {
    console.log("ReScript Error caught:" + e._1);
  } else if (e.RE_EXN_ID === Stdlib_Exn.$$Error) {
    let msg = e._1.message;
    if (msg !== undefined) {
      console.log("JS exception occurred: " + msg);
    } else {
      console.log("Some other JS value has been thrown");
    }
  } else {
    console.log("Unexpected error occurred");
  }
  return Promise.resolve();
});

someAsyncApi().then(str => Promise.resolve((console.log(str), undefined)));

let place = {
  contents: 0
};

function delayedMsg(ms, msg) {
  return new Promise((resolve, param) => {
    setTimeout(() => {
      place.contents = place.contents + 1 | 0;
      resolve([
        place.contents,
        msg
      ]);
    }, ms);
  });
}

let p1$1 = delayedMsg(1000, "is Anna");

let p2$1 = delayedMsg(500, "myName");

let p3$1 = delayedMsg(100, "Hi");

Promise.all([
  p1$1,
  p2$1,
  p3$1
]).then(arr => {
  Belt_Array.forEach(arr, param => {
    console.log(`Place ` + String(param[0]) + ` => ` + param[1]);
  });
  return Promise.resolve();
});

function racer(ms, name) {
  return new Promise((resolve, param) => {
    setTimeout(() => resolve(name), ms);
  });
}

let promises = [
  racer(1000, "Turtle"),
  racer(500, "Hare"),
  racer(100, "Eagle")
];

Promise.race(promises).then(winner => Promise.resolve((console.log("Congrats: " + winner), undefined)));

Stdlib_Promise.$$catch(Promise.resolve(1).then(value => Promise.resolve(Promise.resolve(value + 2 | 0))).then(p => p.then(n => Promise.resolve((console.log(n), undefined)))), e => {
  console.log("luckily, our mistake will be caught here");
  console.log(e);
  return Promise.resolve();
});

Stdlib_Promise.$$catch(Promise.resolve(1).then(value => Promise.resolve(value)).then(p => {
  p.then(n => {
    console.log(n);
  });
}), e => {
  console.log("luckily, our mistake will be caught here");
  return Promise.resolve();
});

new Promise((resolve, _reject) => resolve(prim => {}));

let queryUser$1;

export {
  MyOwnError,
  queryComments,
  queryUser$1 as queryUser,
  createNumPromise,
  MyError,
  causeErr,
  TestError,
  causeJsErr,
  causeReScriptErr,
  place,
  delayedMsg,
  p1$1 as p1,
  p2$1 as p2,
  p3$1 as p3,
  racer,
  promises,
}
/* p1 Not a pure module */
