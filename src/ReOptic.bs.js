// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Lens$Optic = require("re-optic/src/Lens.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Prism$Optic = require("re-optic/src/Prism.bs.js");
var Compose$Optic = require("re-optic/src/Compose.bs.js");

var city = Lens$Optic.make((function (record) {
        return record.city;
      }), (function (newValue, record) {
        return {
                city: newValue,
                country: record.country
              };
      }));

var country = Lens$Optic.make((function (record) {
        return record.country;
      }), (function (newValue, record) {
        return {
                city: record.city,
                country: newValue
              };
      }));

var Address = {
  city: city,
  country: country
};

var address = Lens$Optic.make((function (record) {
        return record.address;
      }), (function (newValue, record) {
        return {
                address: newValue,
                age: record.age,
                name: record.name
              };
      }));

var age = Lens$Optic.make((function (record) {
        return record.age;
      }), (function (newValue, record) {
        return {
                address: record.address,
                age: newValue,
                name: record.name
              };
      }));

var name = Lens$Optic.make((function (record) {
        return record.name;
      }), (function (newValue, record) {
        return {
                address: record.address,
                age: record.age,
                name: newValue
              };
      }));

var User = {
  address: address,
  age: age,
  name: name
};

var user = {
  address: {
    city: "Paris",
    country: "France"
  },
  age: 42,
  name: "KÃ©vin"
};

var city$p = Lens$Optic.compose(address, city);

console.log(Curry._1(name.get, user));

Curry._2(Lens$Optic.set(Lens$Optic.compose(address, city)), "f", user);

var newUser = Curry._2(name.set, "Kevin", user);

console.log(Curry._1(name.get, newUser));

console.log(Curry._1(age.get, newUser));

console.log(Curry._2(city$p.set, "Lyon", user));

var newUser$p = Lens$Optic.modify(name, (function (name) {
        return "My name is " + name;
      }), user);

console.log(Curry._1(name.get, newUser$p));

var nonEmptyString = Prism$Optic.make((function (s) {
        if (s.length > 0) {
          return s;
        }
        
      }), (function (s) {
        return s;
      }));

var empty = Curry._1(nonEmptyString.getOption, "");

if (empty !== undefined) {
  console.log("Should not happen");
} else {
  console.log("Indeed, the string is empty!!");
}

var nonEmpty = Curry._1(nonEmptyString.getOption, "foo");

if (nonEmpty !== undefined) {
  console.log("The string is not empty: " + nonEmpty);
} else {
  console.log("Should not happen");
}

var nonEmptyString$1 = Prism$Optic.make((function (s) {
        if (s.length > 0) {
          return s;
        }
        
      }), (function (s) {
        return s;
      }));

var composed = Compose$Optic.lensWithPrism(name, nonEmptyString$1);

var s = Curry._1(composed.getOption, user);

if (s !== undefined) {
  console.log("The name is valid and is: " + s);
} else {
  console.log("Should not happen");
}

function make(i) {
  if (i > 0) {
    return /* PositiveInteger */{
            _0: i
          };
  }
  
}

var prism = Prism$Optic.make(make, (function (i) {
        return i._0;
      }));

var PositiveInteger = {
  make: make,
  prism: prism
};

function make$1(i) {
  var i$1 = i._0;
  if (i$1 % 2 === 0) {
    return /* PositiveEvenInteger */{
            _0: /* PositiveInteger */{
              _0: i$1
            }
          };
  }
  
}

var prism$1 = Prism$Optic.make(make$1, (function (i) {
        return i._0;
      }));

var PositiveEvenInteger = {
  make: make$1,
  prism: prism$1
};

var x = Curry._1(prism.getOption, 10);

if (x !== undefined) {
  console.log(Curry._1(prism.reverseGet, x));
}

var x$1 = Curry._1(prism.getOption, -10);

if (x$1 !== undefined) {
  console.log("" + x$1 + " is indeed negative");
}

var composedPrism = Prism$Optic.compose(prism, prism$1);

var thien = {
  age: 23,
  name: "Thien"
};

var ageLens = Lens$Optic.make((function (user) {
        return user.age;
      }), (function (newAge, user) {
        return {
                age: newAge,
                name: user.name
              };
      }));

if (Curry._1(ageLens.get, thien) !== 23) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ReOptic.res",
          147,
          2
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(Curry._2(ageLens.set, 24, thien), {
        age: 24,
        name: "Thien"
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ReOptic.res",
          149,
          2
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(Lens$Optic.modify(ageLens, (function (age) {
              return age + 1 | 0;
            }), thien), {
        age: 24,
        name: "Thien"
      })) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "ReOptic.res",
          151,
          2
        ],
        Error: new Error()
      };
}

console.log(Curry._1(prism.getOption, 11));

console.log(Curry._1(prism.getOption, -1));

var x$2 = Curry._1(prism.reverseGet, Belt_Option.getExn(/* PositiveInteger */{
          _0: 30
        }));

console.log(x$2);

exports.Address = Address;
exports.User = User;
exports.user = user;
exports.PositiveInteger = PositiveInteger;
exports.PositiveEvenInteger = PositiveEvenInteger;
exports.composedPrism = composedPrism;
/* city Not a pure module */
