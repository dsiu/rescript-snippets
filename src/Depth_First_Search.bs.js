// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Map from "../node_modules/rescript/lib/es6/map.js";
import * as Char from "../node_modules/rescript/lib/es6/char.js";
import * as List from "../node_modules/rescript/lib/es6/list.js";
import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as Printf from "../node_modules/rescript/lib/es6/printf.js";
import * as $$String from "../node_modules/rescript/lib/es6/string.js";

var Char_map = $$Map.Make({
      compare: Char.compare
    });

function string_of_state(param) {
  var bindings = function (m, fmt) {
    var b = Curry._1(Char_map.bindings, m);
    return $$String.concat(", ", List.map((function (param) {
                      return Curry._2(Printf.sprintf(fmt), param[0], param[1]);
                    }), b));
  };
  return Curry._3(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: " d = {",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "}\n f = {",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* String_literal */11,
                            _0: "}\n pred = {",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: "}\n",
                                _1: /* End_of_format */0
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: " d = {%s}\n f = {%s}\n pred = {%s}\n"
                }), bindings(param.d, /* Format */{
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* '\'' */39,
                    _1: {
                      TAG: /* Char */0,
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "':'",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* '\'' */39,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "'%c':'%d'"
                }), bindings(param.f, /* Format */{
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* '\'' */39,
                    _1: {
                      TAG: /* Char */0,
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "':'",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* Char_literal */12,
                            _0: /* '\'' */39,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "'%c':'%d'"
                }), bindings(param.pred, /* Format */{
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* '\'' */39,
                    _1: {
                      TAG: /* Char */0,
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "':'",
                        _1: {
                          TAG: /* Char */0,
                          _0: {
                            TAG: /* Char_literal */12,
                            _0: /* '\'' */39,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "'%c':'%c'"
                }));
}

function depth_first_search(g) {
  var node = function (u, param) {
    var match = param[1];
    var color = match.color;
    var pred = match.pred;
    var f = match.f;
    var d = match.d;
    var t = param[0];
    var dfs_visit = function (t, u, param) {
      var edge = function (param, v) {
        var match = param[1];
        var color = match.color;
        var pred = match.pred;
        var f = match.f;
        var d = match.d;
        var t = param[0];
        if (Curry._2(Char_map.find, v, color) === /* White */0) {
          return dfs_visit(t, v, {
                      d: d,
                      f: f,
                      pred: Curry._3(Char_map.add, v, u, pred),
                      color: color
                    });
        } else {
          return [
                  t,
                  {
                    d: d,
                    f: f,
                    pred: pred,
                    color: color
                  }
                ];
        }
      };
      var t$1 = t + 1 | 0;
      var match = List.fold_left(edge, [
            t$1,
            {
              d: Curry._3(Char_map.add, u, t$1, param.d),
              f: param.f,
              pred: param.pred,
              color: Curry._3(Char_map.add, u, /* Gray */1, param.color)
            }
          ], Curry._2(Char_map.find, u, g));
      var match$1 = match[1];
      var t$2 = match[0] + 1 | 0;
      return [
              t$2,
              {
                d: match$1.d,
                f: Curry._3(Char_map.add, u, t$2, match$1.f),
                pred: match$1.pred,
                color: Curry._3(Char_map.add, u, /* Black */2, match$1.color)
              }
            ];
    };
    if (Curry._2(Char_map.find, u, color) === /* White */0) {
      return dfs_visit(t, u, {
                  d: d,
                  f: f,
                  pred: pred,
                  color: color
                });
    } else {
      return [
              t,
              {
                d: d,
                f: f,
                pred: pred,
                color: color
              }
            ];
    }
  };
  var v = List.fold_left((function (acc, param) {
          return {
                  hd: param[0],
                  tl: acc
                };
        }), /* [] */0, Curry._1(Char_map.bindings, g));
  var initial_state_d = Char_map.empty;
  var initial_state_f = Char_map.empty;
  var initial_state_pred = Char_map.empty;
  var initial_state_color = List.fold_right((function (x) {
          return Curry._2(Char_map.add, x, /* White */0);
        }), v, Char_map.empty);
  var initial_state = {
    d: initial_state_d,
    f: initial_state_f,
    pred: initial_state_pred,
    color: initial_state_color
  };
  return List.fold_right(node, v, [
                0,
                initial_state
              ])[1];
}

var Dfs = {
  string_of_state: string_of_state,
  depth_first_search: depth_first_search
};

var g = List.fold_right((function (param) {
        return Curry._2(Char_map.add, param[0], param[1]);
      }), {
      hd: [
        /* 'u' */117,
        {
          hd: /* 'v' */118,
          tl: {
            hd: /* 'x' */120,
            tl: /* [] */0
          }
        }
      ],
      tl: {
        hd: [
          /* 'v' */118,
          {
            hd: /* 'y' */121,
            tl: /* [] */0
          }
        ],
        tl: {
          hd: [
            /* 'w' */119,
            {
              hd: /* 'z' */122,
              tl: {
                hd: /* 'y' */121,
                tl: /* [] */0
              }
            }
          ],
          tl: {
            hd: [
              /* 'x' */120,
              {
                hd: /* 'v' */118,
                tl: /* [] */0
              }
            ],
            tl: {
              hd: [
                /* 'y' */121,
                {
                  hd: /* 'x' */120,
                  tl: /* [] */0
                }
              ],
              tl: {
                hd: [
                  /* 'z' */122,
                  {
                    hd: /* 'z' */122,
                    tl: /* [] */0
                  }
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    }, Char_map.empty);

var s = depth_first_search(g);

Curry._1(Printf.printf(/* Format */{
          _0: {
            TAG: /* String */2,
            _0: /* No_padding */0,
            _1: {
              TAG: /* Char_literal */12,
              _0: /* '\n' */10,
              _1: /* End_of_format */0
            }
          },
          _1: "%s\n"
        }), string_of_state(s));

export {
  Char_map ,
  Dfs ,
  
}
/* Char_map Not a pure module */
