// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Stdlib__List from "@dsiu/rescript-stdlib-fp/src/Stdlib__List.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function combine(m, n) {
  return m + n | 0;
}

var IntMonoid = {
  combine: combine,
  empty: 0
};

var lst = Belt_List.makeBy(100, (function (i) {
        return i;
      }));

((function (__x) {
        console.log(22, __x);
      })(Belt_List.reduce(lst, 0, combine)));

function combine$1(m, n) {
  return m + n;
}

var empty = "";

var StringMonoid = {
  combine: combine$1,
  empty: empty
};

((function (__x) {
        console.log(31, __x);
      })(Belt_List.reduce({
            hd: "a",
            tl: {
              hd: "b",
              tl: {
                hd: "c",
                tl: {
                  hd: "d",
                  tl: /* [] */0
                }
              }
            }
          }, empty, combine$1)));

function combine$2(m, n) {
  return m * n;
}

var ProductMonoid = {
  combine: combine$2,
  empty: 1.0
};

var lst$1 = {
  hd: 1.0,
  tl: {
    hd: 2.0,
    tl: {
      hd: 3.0,
      tl: {
        hd: 4.0,
        tl: /* [] */0
      }
    }
  }
};

((function (__x) {
        console.log(40, __x);
      })(Belt_List.reduce(lst$1, 1.0, combine$2)));

var Fold_And_Monoids = {
  IntMonoid: IntMonoid,
  StringMonoid: StringMonoid,
  ProductMonoid: ProductMonoid,
  lst: lst$1
};

function sumOfSquares(n) {
  return Belt_List.reduce(Belt_List.map(Belt_List.makeBy(n, (function (i) {
                        return i + 1 | 0;
                      })), (function (m) {
                    return Math.imul(m, m);
                  })), 0, (function (prim0, prim1) {
                return prim0 + prim1 | 0;
              }));
}

((function (__x) {
        console.log(48, __x);
      })(sumOfSquares(10)));

var More_Higher_Order_Functions = {
  sumOfSquares: sumOfSquares
};

var ls = {
  hd: "Hello",
  tl: {
    hd: "World",
    tl: /* [] */0
  }
};

((function (__x) {
        console.log(53, __x);
      })(Belt_List.toArray(Stdlib__List.flatMap(ls, (function (c) {
                  return {
                          hd: c.toUpperCase(),
                          tl: /* [] */0
                        };
                })))));

var From_Map_To_FlatMap = {
  ls: ls
};

var L;

export {
  L ,
  log ,
  log2 ,
  Fold_And_Monoids ,
  More_Higher_Order_Functions ,
  From_Map_To_FlatMap ,
}
/* lst Not a pure module */
