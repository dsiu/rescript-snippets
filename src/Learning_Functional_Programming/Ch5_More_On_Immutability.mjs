// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Stdlib__List from "@dsiu/rescript-stdlib-fp/src/Stdlib__List.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function combine(m, n) {
  return m + n | 0;
}

let IntMonoid = {
  combine: combine,
  empty: 0
};

let lst = Belt_List.makeBy(100, i => i);

let __x = Belt_List.reduce(lst, 0, combine);

console.log(22, __x);

function combine$1(m, n) {
  return m + n;
}

let empty = "";

let StringMonoid = {
  combine: combine$1,
  empty: empty
};

let __x$1 = Belt_List.reduce({
  hd: "a",
  tl: {
    hd: "b",
    tl: {
      hd: "c",
      tl: {
        hd: "d",
        tl: /* [] */0
      }
    }
  }
}, empty, combine$1);

console.log(31, __x$1);

function combine$2(m, n) {
  return m * n;
}

let ProductMonoid = {
  combine: combine$2,
  empty: 1.0
};

let lst$1 = {
  hd: 1.0,
  tl: {
    hd: 2.0,
    tl: {
      hd: 3.0,
      tl: {
        hd: 4.0,
        tl: /* [] */0
      }
    }
  }
};

let __x$2 = Belt_List.reduce(lst$1, 1.0, combine$2);

console.log(40, __x$2);

let Fold_And_Monoids = {
  IntMonoid: IntMonoid,
  StringMonoid: StringMonoid,
  ProductMonoid: ProductMonoid,
  lst: lst$1
};

function sumOfSquares(n) {
  return Belt_List.reduce(Belt_List.map(Belt_List.makeBy(n, i => i + 1 | 0), m => Math.imul(m, m)), 0, (prim0, prim1) => prim0 + prim1 | 0);
}

let __x$3 = sumOfSquares(10);

console.log(48, __x$3);

let More_Higher_Order_Functions = {
  sumOfSquares: sumOfSquares
};

let ls = {
  hd: "Hello",
  tl: {
    hd: "World",
    tl: /* [] */0
  }
};

let __x$4 = Belt_List.toArray(Stdlib__List.flatMap(ls, c => ({
  hd: c.toUpperCase(),
  tl: /* [] */0
})));

console.log(53, __x$4);

let From_Map_To_FlatMap = {
  ls: ls
};

let L;

export {
  L,
  log,
  log2,
  Fold_And_Monoids,
  More_Higher_Order_Functions,
  From_Map_To_FlatMap,
}
/* lst Not a pure module */
