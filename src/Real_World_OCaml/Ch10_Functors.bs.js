// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

function Increment(M) {
  var x = M.x + 1 | 0;
  return {
          x: x
        };
}

var Three = {
  x: 3
};

var x = 4;

var Four = {
  x: x
};

console.log(x - 3 | 0);

var Three_and_more = {
  x: 3,
  y: "three"
};

var x$1 = 4;

var Four_1 = {
  x: x$1
};

var A_Trivial_Example = {
  Increment: Increment,
  Three: Three,
  Four: Four,
  Three_and_more: Three_and_more,
  Four_1: Four_1
};

function Make_interval(Endpoint) {
  var create = function (low, high) {
    if (Curry._2(Endpoint.compare, low, high) > 0) {
      return /* Empty */0;
    } else {
      return /* Interval */{
              _0: low,
              _1: high
            };
    }
  };
  var is_empty = function (x) {
    if (x) {
      return false;
    } else {
      return true;
    }
  };
  var contains = function (t, x) {
    if (t && Curry._2(Endpoint.compare, x, t._0) >= 0) {
      return Curry._2(Endpoint.compare, x, t._1) <= 0;
    } else {
      return false;
    }
  };
  var intersect = function (t1, t2) {
    var min = function (x, y) {
      if (Curry._2(Endpoint.compare, x, y) <= 0) {
        return x;
      } else {
        return y;
      }
    };
    var max = function (x, y) {
      if (Curry._2(Endpoint.compare, x, y) >= 0) {
        return x;
      } else {
        return y;
      }
    };
    if (t1 && t2) {
      return create(max(t1._0, t2._0), min(t1._1, t2._1));
    } else {
      return /* Empty */0;
    }
  };
  return {
          create: create,
          is_empty: is_empty,
          contains: contains,
          intersect: intersect
        };
}

function create(low, high) {
  if (Caml_obj.caml_compare(low, high) > 0) {
    return /* Empty */0;
  } else {
    return /* Interval */{
            _0: low,
            _1: high
          };
  }
}

function is_empty(x) {
  if (x) {
    return false;
  } else {
    return true;
  }
}

function contains(t, x) {
  if (t && Caml_obj.caml_compare(x, t._0) >= 0) {
    return Caml_obj.caml_compare(x, t._1) <= 0;
  } else {
    return false;
  }
}

function intersect(t1, t2) {
  var min = function (x, y) {
    if (Caml_obj.caml_compare(x, y) <= 0) {
      return x;
    } else {
      return y;
    }
  };
  var max = function (x, y) {
    if (Caml_obj.caml_compare(x, y) >= 0) {
      return x;
    } else {
      return y;
    }
  };
  if (t1 && t2) {
    return create(max(t1._0, t2._0), min(t1._1, t2._1));
  } else {
    return /* Empty */0;
  }
}

var Int_interval = {
  create: create,
  is_empty: is_empty,
  contains: contains,
  intersect: intersect
};

function create$1(low, high) {
  if (Caml_obj.caml_compare(low, high) > 0) {
    return /* Empty */0;
  } else {
    return /* Interval */{
            _0: low,
            _1: high
          };
  }
}

function is_empty$1(x) {
  if (x) {
    return false;
  } else {
    return true;
  }
}

function contains$1(t, x) {
  if (t && Caml_obj.caml_compare(x, t._0) >= 0) {
    return Caml_obj.caml_compare(x, t._1) <= 0;
  } else {
    return false;
  }
}

function intersect$1(t1, t2) {
  var min = function (x, y) {
    if (Caml_obj.caml_compare(x, y) <= 0) {
      return x;
    } else {
      return y;
    }
  };
  var max = function (x, y) {
    if (Caml_obj.caml_compare(x, y) >= 0) {
      return x;
    } else {
      return y;
    }
  };
  if (t1 && t2) {
    return create$1(max(t1._0, t2._0), min(t1._1, t2._1));
  } else {
    return /* Empty */0;
  }
}

var String_interval = {
  create: create$1,
  is_empty: is_empty$1,
  contains: contains$1,
  intersect: intersect$1
};

var A_Bigger_Example = {
  Make_interval: Make_interval,
  Int_interval: Int_interval,
  String_interval: String_interval
};

exports.A_Trivial_Example = A_Trivial_Example;
exports.A_Bigger_Example = A_Bigger_Example;
/*  Not a pure module */
