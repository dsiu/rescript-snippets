// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "../../node_modules/rescript/lib/es6/list.js";
import * as Curry from "../../node_modules/rescript/lib/es6/curry.js";
import * as Belt_Int from "../../node_modules/rescript/lib/es6/belt_Int.js";
import * as Belt_List from "../../node_modules/rescript/lib/es6/belt_List.js";
import * as Pervasives from "../../node_modules/rescript/lib/es6/pervasives.js";
import * as Belt_Option from "../../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../../node_modules/rescript/lib/es6/caml_option.js";
import * as Caml_string from "../../node_modules/rescript/lib/es6/caml_string.js";

function list_find(_l, f) {
  while(true) {
    var l = _l;
    if (!l) {
      return ;
    }
    var x = l.hd;
    if (Curry._1(f, x)) {
      return Caml_option.some(x);
    }
    _l = l.tl;
    continue ;
  };
}

console.log(list_find({
          hd: 1,
          tl: {
            hd: 3,
            tl: {
              hd: 5,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        }, (function (x) {
            return x > 3;
          })));

console.log(list_find({
          hd: 1,
          tl: {
            hd: 3,
            tl: {
              hd: 5,
              tl: {
                hd: 2,
                tl: /* [] */0
              }
            }
          }
        }, (function (x) {
            return x > 10;
          })));

console.log(list_find({
          hd: "a",
          tl: {
            hd: "B",
            tl: {
              hd: "C",
              tl: /* [] */0
            }
          }
        }, (function (x) {
            return x === x.toUpperCase();
          })));

var If_not_found_1 = {};

function flexible_find_1(_l, f, if_not_found) {
  while(true) {
    var l = _l;
    if (!l) {
      if (typeof if_not_found === "number") {
        if (if_not_found !== 0) {
          return ;
        } else {
          return Pervasives.failwith("Element not found");
        }
      } else {
        return Caml_option.some(if_not_found._0);
      }
    }
    var hd = l.hd;
    if (Curry._1(f, hd)) {
      return Caml_option.some(hd);
    }
    _l = l.tl;
    continue ;
  };
}

var __x = flexible_find_1({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, (function (x) {
        return x > 10;
      }), /* Return_none */1);

console.log("flexible_find_1", __x);

var __x$1 = flexible_find_1({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, (function (x) {
        return x > 10;
      }), /* Default_to */{
      _0: 10
    });

console.log("flexible_find_1", __x$1);

try {
  var __x$2 = flexible_find_1({
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }, (function (x) {
          return x > 10;
        }), /* Raise */0);
  console.log("flexible_find_1", __x$2);
}
catch (exn){
  console.log("flexible_find_1", "nothing > 10");
}

var __x$3 = flexible_find_1({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 20,
          tl: /* [] */0
        }
      }
    }, (function (x) {
        return x > 10;
      }), /* Raise */0);

console.log("flexible_find_1", __x$3);

var If_not_found_1$1 = {
  If_not_found_1: If_not_found_1,
  flexible_find_1: flexible_find_1
};

var If_not_found_2 = {};

function flexible_find_2(f, _list, if_not_found) {
  while(true) {
    var list = _list;
    if (!list) {
      if (typeof if_not_found === "number") {
        if (if_not_found !== 0) {
          return ;
        } else {
          return Pervasives.failwith("No matching item found");
        }
      } else {
        return if_not_found._0;
      }
    }
    var hd = list.hd;
    if (Curry._1(f, hd)) {
      if (typeof if_not_found === "number" && if_not_found !== 0) {
        return Caml_option.some(hd);
      } else {
        return hd;
      }
    }
    _list = list.tl;
    continue ;
  };
}

var __x$4 = flexible_find_2((function (x) {
        return x > 10;
      }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, /* Return_none */1);

console.log("flexible_find_2", __x$4);

var __x$5 = flexible_find_2((function (x) {
        return x > 10;
      }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, /* Default_to */{
      _0: 10
    });

console.log("flexible_find_2", __x$5);

try {
  var __x$6 = flexible_find_2((function (x) {
          return x > 10;
        }), {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }, /* Raise */0);
  console.log("flexible_find_2", __x$6);
}
catch (exn$1){
  console.log("flexible_find_2", "nothing > 10");
}

var __x$7 = flexible_find_2((function (x) {
        return x > 10;
      }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 20,
          tl: /* [] */0
        }
      }
    }, /* Raise */0);

console.log("flexible_find_2", __x$7);

var If_not_found_2$1 = {
  If_not_found_2: If_not_found_2,
  flexible_find_2: flexible_find_2
};

console.log("Capturing_The_Unknown");

function tuple_i_f(x, y) {
  return [
          x,
          y
        ];
}

function tuple_s_s(x, y) {
  return [
          x,
          y
        ];
}

function print_stringable(s) {
  console.log(Curry._1(s.to_string, s.value));
  
}

function id(x) {
  return x;
}

var stringables_0 = /* Stringable */{
  value: 100,
  to_string: (function (prim) {
      return String(prim);
    })
};

var stringables_1 = {
  hd: /* Stringable */{
    value: 12.3,
    to_string: (function (prim) {
        return String(prim);
      })
  },
  tl: {
    hd: /* Stringable */{
      value: "foo",
      to_string: id
    },
    tl: /* [] */0
  }
};

var stringables = {
  hd: stringables_0,
  tl: stringables_1
};

Belt_List.map(stringables, print_stringable);

var Capturing_The_Unknown = {
  tuple_i_f: tuple_i_f,
  tuple_s_s: tuple_s_s,
  print_stringable: print_stringable,
  id: id,
  stringables: stringables
};

function ls_dir(d) {
  switch (d) {
    case "." :
        return {
                hd: "d1",
                tl: {
                  hd: "f111",
                  tl: {
                    hd: "f222",
                    tl: {
                      hd: "d2",
                      tl: {
                        hd: "f333",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              };
    case ".." :
        return {
                hd: "d10",
                tl: {
                  hd: "f100",
                  tl: {
                    hd: "f200",
                    tl: {
                      hd: "d2",
                      tl: {
                        hd: "f300",
                        tl: /* [] */0
                      }
                    }
                  }
                }
              };
    default:
      return {
              hd: "d1000",
              tl: {
                hd: "f11100",
                tl: {
                  hd: "f22200",
                  tl: {
                    hd: "d200",
                    tl: {
                      hd: "f33300",
                      tl: /* [] */0
                    }
                  }
                }
              }
            };
  }
}

function is_file_exn(s) {
  return Caml_string.get(s, 0) === /* 'f' */102;
}

function lstat(s) {
  return {
          st_size: Belt_Option.getWithDefault(Belt_Int.fromString(s.substring(1)), 0)
        };
}

function list_sum(l) {
  return Belt_List.reduce(l, 0, (function (a, x) {
                return a + x | 0;
              }));
}

function sum_file_sizes(d) {
  return list_sum(Belt_List.map(Belt_List.keep(ls_dir(d), is_file_exn), (function (x) {
                    return lstat(x).st_size;
                  })));
}

console.log(sum_file_sizes("."));

function add_step(f, pipeline) {
  return /* Step */{
          _0: f,
          _1: pipeline
        };
}

function exec(_pipeline, _input) {
  while(true) {
    var input = _input;
    var pipeline = _pipeline;
    if (!pipeline) {
      return input;
    }
    _input = Curry._1(pipeline._0, input);
    _pipeline = pipeline._1;
    continue ;
  };
}

var p1_1 = /* Step */{
  _0: (function (__x) {
      return Belt_List.keep(__x, is_file_exn);
    }),
  _1: /* Step */{
    _0: (function (__x) {
        return Belt_List.map(__x, (function (x) {
                      return lstat(x).st_size;
                    }));
      }),
    _1: /* Step */{
      _0: list_sum,
      _1: /* Empty */0
    }
  }
};

var p1 = /* Step */{
  _0: ls_dir,
  _1: p1_1
};

console.log("using pipeline GADT p1");

console.log(exec(p1, "."));

console.log(exec(p1, ".."));

function exec_with_profile(pipeline, input) {
  var loop = function (_pipeline, _input, _rev_profile) {
    while(true) {
      var rev_profile = _rev_profile;
      var input = _input;
      var pipeline = _pipeline;
      if (!pipeline) {
        return [
                input,
                rev_profile
              ];
      }
      var output = Curry._1(pipeline._0, input);
      _rev_profile = {
        hd: 13,
        tl: rev_profile
      };
      _input = output;
      _pipeline = pipeline._1;
      continue ;
    };
  };
  var match = loop(pipeline, input, /* [] */0);
  return [
          match[0],
          List.rev(match[1])
        ];
}

console.log("using pipeline GADT with profile p1");

console.log(exec_with_profile(p1, "."));

var Abstracting_Computational_Machines = {
  ls_dir: ls_dir,
  is_file_exn: is_file_exn,
  lstat: lstat,
  list_sum: list_sum,
  sum_file_sizes: sum_file_sizes,
  add_step: add_step,
  $plus: add_step,
  empty: /* Empty */0,
  exec: exec,
  p1: p1,
  exec_with_profile: exec_with_profile
};

function get(x) {
  return x._0;
}

var User_name = {};

var User_id = {};

function check(permissions, user_id) {
  return [
          permissions,
          user_id
        ];
}

var $$Permissions = {
  check: check
};

function set_user_id(request, x) {
  return {
          user_name: request.user_name,
          user_id: /* Present */{
            _0: x
          },
          permissions: request.permissions
        };
}

function set_permissions(request, x) {
  return {
          user_name: request.user_name,
          user_id: request.user_id,
          permissions: /* Present */{
            _0: x
          }
        };
}

function check_completeness(request) {
  var match = request.user_id;
  var match$1 = request.permissions;
  if (match && match$1) {
    return {
            user_name: request.user_name,
            user_id: match,
            permissions: match$1
          };
  }
  
}

function authorized(request) {
  return [
          request.permissions._0,
          request.user_id._0
        ];
}

var Narrowing_the_Possibilities = {
  get: get,
  User_name: User_name,
  User_id: User_id,
  $$Permissions: $$Permissions,
  set_user_id: set_user_id,
  set_permissions: set_permissions,
  check_completeness: check_completeness,
  authorized: authorized
};

export {
  list_find ,
  If_not_found_1$1 as If_not_found_1,
  If_not_found_2$1 as If_not_found_2,
  Capturing_The_Unknown ,
  Abstracting_Computational_Machines ,
  Narrowing_the_Possibilities ,
  
}
/*  Not a pure module */
