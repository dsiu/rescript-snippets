// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Stdlib__List from "@dsiu/rescript-stdlib-fp/src/Stdlib__List.res.mjs";

function go_down(param) {
  let t = param._0;
  if (t.TAG === "Item") {
    return Pervasives.failwith("down of item");
  }
  let match = t._0;
  if (match !== 0) {
    return {
      TAG: "Loc",
      _0: match.hd,
      _1: {
        TAG: "Node",
        _0: /* [] */0,
        _1: param._1,
        _2: match.tl
      }
    };
  } else {
    return Pervasives.failwith("down of empty");
  }
}

function nth(loc, n) {
  let nthrec = n => {
    if (n !== 1) {
      if (n > 0) {
        let param = nthrec(n - 1 | 0);
        let p = param._1;
        if (typeof p !== "object") {
          return Pervasives.failwith("right of top");
        }
        let match = p._2;
        if (match !== 0) {
          return {
            TAG: "Loc",
            _0: match.hd,
            _1: {
              TAG: "Node",
              _0: {
                hd: param._0,
                tl: p._0
              },
              _1: p._1,
              _2: match.tl
            }
          };
        } else {
          return Pervasives.failwith("right of last");
        }
      } else {
        return Pervasives.failwith("nth expects a positive integer");
      }
    } else {
      return go_down(loc);
    }
  };
  return nthrec(n);
}

function insert_right(param, r) {
  let p = param._1;
  if (typeof p !== "object") {
    return Pervasives.failwith("insert of top");
  } else {
    return {
      TAG: "Loc",
      _0: param._0,
      _1: {
        TAG: "Node",
        _0: p._0,
        _1: p._1,
        _2: {
          hd: r,
          tl: p._2
        }
      }
    };
  }
}

function insert_left(param, l) {
  let p = param._1;
  if (typeof p !== "object") {
    return Pervasives.failwith("insert of top");
  } else {
    return {
      TAG: "Loc",
      _0: param._0,
      _1: {
        TAG: "Node",
        _0: {
          hd: l,
          tl: p._0
        },
        _1: p._1,
        _2: p._2
      }
    };
  }
}

function insert_down(param, t1) {
  let t = param._0;
  if (t.TAG === "Item") {
    return Pervasives.failwith("down of item");
  } else {
    return {
      TAG: "Loc",
      _0: t1,
      _1: {
        TAG: "Node",
        _0: /* [] */0,
        _1: param._1,
        _2: t._0
      }
    };
  }
}

function $$delete(param) {
  let p = param._1;
  if (typeof p !== "object") {
    return Pervasives.failwith("delete of top");
  }
  let left = p._0;
  let match = p._2;
  if (match !== 0) {
    return {
      TAG: "Loc",
      _0: match.hd,
      _1: {
        TAG: "Node",
        _0: left,
        _1: p._1,
        _2: match.tl
      }
    };
  } else if (left !== 0) {
    return {
      TAG: "Loc",
      _0: left.hd,
      _1: {
        TAG: "Node",
        _0: left.tl,
        _1: p._1,
        _2: /* [] */0
      }
    };
  } else {
    return {
      TAG: "Loc",
      _0: {
        TAG: "Section",
        _0: /* [] */0
      },
      _1: p._1
    };
  }
}

function go_up_memo(param) {
  let p = param._1;
  if (typeof p !== "object") {
    return Pervasives.failwith("up of top");
  } else {
    return {
      TAG: "Loc",
      _0: {
        TAG: "Siblings",
        _0: p._0,
        _1: param._0,
        _2: p._2
      },
      _1: p._1
    };
  }
}

function go_down_memo(param) {
  let t = param._0;
  if (t.TAG === "Item") {
    return Pervasives.failwith("down of item");
  } else {
    return {
      TAG: "Loc",
      _0: t._1,
      _1: {
        TAG: "Node",
        _0: t._0,
        _1: param._1,
        _2: t._2
      }
    };
  }
}

function change(param, t) {
  return {
    TAG: "Loc",
    _0: t,
    _1: param._1
  };
}

function go_left(param) {
  let p = param._1;
  if (typeof p !== "object") {
    return Pervasives.failwith("left of top");
  } else if (p.TAG === "Left") {
    return Pervasives.failwith("left of Left");
  } else {
    return {
      TAG: "Loc",
      _0: p._0,
      _1: {
        TAG: "Left",
        _0: p._1,
        _1: param._0
      }
    };
  }
}

function go_right(param) {
  let p = param._1;
  if (typeof p !== "object") {
    return Pervasives.failwith("right of top");
  } else if (p.TAG === "Left") {
    return {
      TAG: "Loc",
      _0: p._1,
      _1: {
        TAG: "Right",
        _0: param._0,
        _1: p._0
      }
    };
  } else {
    return Pervasives.failwith("right of Right");
  }
}

function go_up(param) {
  let p = param._1;
  let t = param._0;
  if (typeof p !== "object") {
    return Pervasives.failwith("up of top");
  } else if (p.TAG === "Left") {
    return {
      TAG: "Loc",
      _0: {
        TAG: "Cons",
        _0: t,
        _1: p._1
      },
      _1: p._0
    };
  } else {
    return {
      TAG: "Loc",
      _0: {
        TAG: "Cons",
        _0: p._0,
        _1: t
      },
      _1: p._1
    };
  }
}

function go_first(param) {
  let t = param._0;
  if (typeof t !== "object") {
    return Pervasives.failwith("first of Nil");
  } else {
    return {
      TAG: "Loc",
      _0: t._0,
      _1: {
        TAG: "Left",
        _0: param._1,
        _1: t._1
      }
    };
  }
}

function go_second(param) {
  let t = param._0;
  if (typeof t !== "object") {
    return Pervasives.failwith("second of Nil");
  } else {
    return {
      TAG: "Loc",
      _0: t._1,
      _1: {
        TAG: "Right",
        _0: t._0,
        _1: param._1
      }
    };
  }
}

let ex1 = {
  TAG: "Section",
  _0: {
    hd: {
      TAG: "Section",
      _0: {
        hd: {
          TAG: "Item",
          _0: "a"
        },
        tl: {
          hd: {
            TAG: "Item",
            _0: "*"
          },
          tl: {
            hd: {
              TAG: "Item",
              _0: "b"
            },
            tl: /* [] */0
          }
        }
      }
    },
    tl: {
      hd: {
        TAG: "Item",
        _0: "+"
      },
      tl: {
        hd: {
          TAG: "Section",
          _0: {
            hd: {
              TAG: "Item",
              _0: "c"
            },
            tl: {
              hd: {
                TAG: "Item",
                _0: "*"
              },
              tl: {
                hd: {
                  TAG: "Item",
                  _0: "d"
                },
                tl: /* [] */0
              }
            }
          }
        },
        tl: /* [] */0
      }
    }
  }
};

let loc1 = {
  TAG: "Loc",
  _0: {
    TAG: "Item",
    _0: "*"
  },
  _1: {
    TAG: "Node",
    _0: {
      hd: {
        TAG: "Item",
        _0: "c"
      },
      tl: /* [] */0
    },
    _1: {
      TAG: "Node",
      _0: {
        hd: {
          TAG: "Item",
          _0: "+"
        },
        tl: {
          hd: {
            TAG: "Section",
            _0: {
              hd: {
                TAG: "Item",
                _0: "a"
              },
              tl: {
                hd: {
                  TAG: "Item",
                  _0: "*"
                },
                tl: {
                  hd: {
                    TAG: "Item",
                    _0: "b"
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          tl: /* [] */0
        }
      },
      _1: "Top",
      _2: /* [] */0
    },
    _2: {
      hd: {
        TAG: "Item",
        _0: "d"
      },
      tl: /* [] */0
    }
  }
};

export {
  ex1,
  loc1,
  go_down,
  nth,
  insert_right,
  insert_left,
  insert_down,
  $$delete,
  go_up_memo,
  go_down_memo,
  change,
  go_left,
  go_right,
  go_up,
  go_first,
  go_second,
}
/* Stdlib__List Not a pure module */
