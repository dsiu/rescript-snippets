// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "bs-fetch/src/Fetch.mjs";
import * as Core__JSON from "@rescript/core/src/Core__JSON.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";

require('isomorphic-fetch')
;

((function (__x) {
        return Js_promise.then_((function (json) {
                      return Promise.resolve((console.log(json), undefined));
                    }), __x);
      })((function (__x) {
            return Js_promise.then_(Fetch.$$Response.json, __x);
          })(fetch("https://aws.random.cat/meow"))));

function catData(data) {
  return {
          file: Core__Option.getExn(Core__Option.flatMap(Core__Option.flatMap(Core__JSON.Decode.object(data), (function (__x) {
                          return __x["file"];
                        })), Core__JSON.Decode.string), undefined)
        };
}

var Decode = {
  catData: catData
};

function fetchCat() {
  var __x = (function (__x) {
        return Js_promise.then_(Fetch.$$Response.json, __x);
      })(fetch("https://aws.random.cat/meow"));
  return Js_promise.then_((function (obj) {
                return Promise.resolve(catData(obj));
              }), __x);
}

((function (__x) {
        return Js_promise.then_((function (data) {
                      return Promise.resolve((console.log(data.file), undefined));
                    }), __x);
      })(fetchCat()));

function fetchJson(url, decoder) {
  var __x = (function (__x) {
        return Js_promise.then_(Fetch.$$Response.json, __x);
      })(fetch(url));
  return Js_promise.then_((function (obj) {
                return Promise.resolve(decoder(obj));
              }), __x);
}

function fetchCat$1() {
  return fetchJson("https://aws.random.cat/meow", catData);
}

((function (__x) {
        return Js_promise.then_((function (data) {
                      return Promise.resolve((console.log(data.file), undefined));
                    }), __x);
      })(fetchCat$1()));

export {
  Decode ,
  fetchJson ,
  fetchCat$1 as fetchCat,
}
/*  Not a pure module */
