// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var p1 = new Promise((function (resolve, _reject) {
        resolve("hello world");
      }));

console.log(p1);

var p2 = Promise.resolve("some value");

console.log(p2);

var MyOwnError = /* @__PURE__ */Caml_exceptions.create("Rescript_Promise_Examples.MyOwnError");

var p3 = Promise.reject({
      RE_EXN_ID: MyOwnError,
      _1: "some rejection"
    });

console.log(p3);

Promise.resolve("hello world").then(function (msg) {
        return Promise.resolve("Message: " + msg);
      }).then(function (msg) {
      console.log(msg);
      return Promise.resolve();
    });

function queryComments(username) {
  var tmp = username === "patrick" ? [
      "comment 1",
      "comment 2"
    ] : [];
  return Promise.resolve(tmp);
}

function queryUser(param) {
  return Promise.resolve({
              name: "patrick"
            });
}

queryUser("u1").then(function (user) {
        return queryComments(user.name);
      }).then(function (comments) {
      Belt_Array.forEach(comments, (function (comment) {
              console.log(comment);
            }));
      return Promise.resolve();
    });

function createNumPromise(n) {
  return Promise.resolve(n);
}

Promise.resolve(5).then(function (num) {
        return num + 1 | 0;
      }).then(function (num) {
      console.log(num);
    });

var MyError = /* @__PURE__ */Caml_exceptions.create("Rescript_Promise_Examples.MyError");

Core__Promise.$$catch(Promise.reject({
              RE_EXN_ID: MyError,
              _1: "test"
            }).then(function (str) {
            console.log("this should not be reached: " + str);
            return Promise.resolve({
                        TAG: "Ok",
                        _0: "successful"
                      });
          }), (function (e) {
          var err = e.RE_EXN_ID === MyError ? "found MyError: " + e._1 : "Some unknown error";
          return Promise.resolve({
                      TAG: "Error",
                      _0: err
                    });
        })).then(function (result) {
      var msg;
      msg = result.TAG === "Ok" ? "Successful: " + result._0 : "Error: " + result._0;
      console.log(msg);
      return Promise.resolve();
    });

function causeErr() {
  return Promise.resolve(Js_exn.raiseError("Some JS error"));
}

Core__Promise.$$catch(Promise.resolve().then(function () {
          return Promise.resolve(Js_exn.raiseError("Some JS error"));
        }), (function (e) {
        var tmp;
        if (e.RE_EXN_ID === Js_exn.$$Error) {
          var msg = e._1.message;
          tmp = msg !== undefined ? "JS exception occurred: " + msg : "Some other JS value has been thrown";
        } else {
          tmp = "Unexpected error occurred";
        }
        return Promise.resolve(tmp);
      }));

var TestError = /* @__PURE__ */Caml_exceptions.create("Rescript_Promise_Examples.TestError");

function causeJsErr() {
  return Js_exn.raiseError("Some JS error");
}

function causeReScriptErr() {
  throw {
        RE_EXN_ID: TestError,
        _1: "Some ReScript error",
        Error: new Error()
      };
}

Core__Promise.$$catch(Promise.resolve().then(function () {
          if (generateRandomInt() > 5) {
            throw {
                  RE_EXN_ID: TestError,
                  _1: "Some ReScript error",
                  Error: new Error()
                };
          }
          return Promise.resolve(Js_exn.raiseError("Some JS error"));
        }), (function (e) {
        if (e.RE_EXN_ID === TestError) {
          console.log("ReScript Error caught:" + e._1);
        } else if (e.RE_EXN_ID === Js_exn.$$Error) {
          var msg = e._1.message;
          if (msg !== undefined) {
            console.log("JS exception occurred: " + msg);
          } else {
            console.log("Some other JS value has been thrown");
          }
        } else {
          console.log("Unexpected error occurred");
        }
        return Promise.resolve();
      }));

someAsyncApi().then(function (str) {
      return Promise.resolve((console.log(str), undefined));
    });

var place = {
  contents: 0
};

function delayedMsg(ms, msg) {
  return new Promise((function (resolve, param) {
                setTimeout((function () {
                        place.contents = place.contents + 1 | 0;
                        resolve([
                              place.contents,
                              msg
                            ]);
                      }), ms);
              }));
}

var p1$1 = delayedMsg(1000, "is Anna");

var p2$1 = delayedMsg(500, "myName");

var p3$1 = delayedMsg(100, "Hi");

Promise.all([
        p1$1,
        p2$1,
        p3$1
      ]).then(function (arr) {
      Belt_Array.forEach(arr, (function (param) {
              console.log("Place " + String(param[0]) + " => " + param[1]);
            }));
      return Promise.resolve();
    });

function racer(ms, name) {
  return new Promise((function (resolve, param) {
                setTimeout((function () {
                        resolve(name);
                      }), ms);
              }));
}

var promises = [
  racer(1000, "Turtle"),
  racer(500, "Hare"),
  racer(100, "Eagle")
];

Promise.race(promises).then(function (winner) {
      return Promise.resolve((console.log("Congrats: " + winner), undefined));
    });

Core__Promise.$$catch(Promise.resolve(1).then(function (value) {
            return Promise.resolve(Promise.resolve(value + 2 | 0));
          }).then(function (p) {
          return p.then(function (n) {
                      return Promise.resolve((console.log(n), undefined));
                    });
        }), (function (e) {
        console.log("luckily, our mistake will be caught here");
        console.log(e);
        return Promise.resolve();
      }));

Core__Promise.$$catch(Promise.resolve(1).then(function (value) {
            return Promise.resolve(value);
          }).then(function (p) {
          p.then(function (n) {
                console.log(n);
              });
        }), (function (e) {
        console.log("luckily, our mistake will be caught here");
        return Promise.resolve();
      }));

new Promise((function (resolve, _reject) {
        resolve();
      }));

var queryUser$1;

export {
  MyOwnError ,
  queryComments ,
  queryUser$1 as queryUser,
  createNumPromise ,
  MyError ,
  causeErr ,
  TestError ,
  causeJsErr ,
  causeReScriptErr ,
  place ,
  delayedMsg ,
  p1$1 as p1,
  p2$1 as p2,
  p3$1 as p3,
  racer ,
  promises ,
}
/* p1 Not a pure module */
