// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Option from "@rescript/runtime/lib/es6/Belt_Option.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

Belt_Option.flatMap(5, v1 => Belt_Option.flatMap(undefined, v2 => v1 + v2 | 0));

function $$return(a) {
  return state => [
    a,
    state
  ];
}

function bind(t, f) {
  return state => {
    let match = t(state);
    let match$1 = f(match[0])(match[1]);
    return [
      match$1[0],
      match$1[1]
    ];
  };
}

function new_var(param, state) {
  let $$var = state.next;
  let state$1 = {
    next: state.next + 1 | 0
  };
  return [
    $$var,
    state$1
  ];
}

function negate($$var, state) {
  return [
    -$$var | 0,
    state
  ];
}

function add(var1, var2, state) {
  return [
    var1 + var2 | 0,
    state
  ];
}

function run(state) {
  console.log(state, "start");
  let match = new_var(undefined, state);
  let state$1 = match[1];
  let a = match[0];
  console.log([
    a,
    state$1
  ], "a");
  let match$1 = negate(a, state$1);
  let state$2 = match$1[1];
  let b = match$1[0];
  console.log([
    b,
    state$2
  ], "b");
  let match$2 = add(a, b, state$2);
  let state$3 = match$2[1];
  let c = match$2[0];
  console.log([
    c,
    state$3
  ], "c");
  return [
    c,
    state$3
  ];
}

let match = run({
  next: 10
});

console.log(match[0], "c final imperative");

let run$1 = bind(__x => new_var(undefined, __x), a => bind(__x => negate(a, __x), b => bind(__x => add(a, b, __x), c => (state => [
  c,
  state
]))));

let match$1 = run$1({
  next: 10
});

console.log(match$1[0], "c final bind");

let CounterStateMonad = {
  $$return: $$return,
  bind: bind,
  new_var: new_var,
  negate: negate,
  add: add
};

export {
  log,
  log2,
  CounterStateMonad,
}
/*  Not a pure module */
