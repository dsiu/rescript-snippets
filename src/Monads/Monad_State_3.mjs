// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

Belt_Option.flatMap(5, (function (v1) {
        return Belt_Option.flatMap(undefined, (function (v2) {
                      return v1 + v2 | 0;
                    }));
      }));

function $$return(a) {
  return function (state) {
    return [
            a,
            state
          ];
  };
}

function bind(t, f) {
  return function (state) {
    var match = t(state);
    var match$1 = f(match[0])(match[1]);
    return [
            match$1[0],
            match$1[1]
          ];
  };
}

function new_var(param, state) {
  var $$var = state.next;
  var state$1 = {
    next: state.next + 1 | 0
  };
  return [
          $$var,
          state$1
        ];
}

function negate($$var, state) {
  return [
          -$$var | 0,
          state
        ];
}

function add(var1, var2, state) {
  return [
          var1 + var2 | 0,
          state
        ];
}

function run(state) {
  console.log(state, "start");
  var match = new_var(undefined, state);
  var state$1 = match[1];
  var a = match[0];
  console.log([
        a,
        state$1
      ], "a");
  var match$1 = negate(a, state$1);
  var state$2 = match$1[1];
  var b = match$1[0];
  console.log([
        b,
        state$2
      ], "b");
  var match$2 = add(a, b, state$2);
  var state$3 = match$2[1];
  var c = match$2[0];
  console.log([
        c,
        state$3
      ], "c");
  return [
          c,
          state$3
        ];
}

var match = run({
      next: 10
    });

console.log(match[0], "c final imperative");

var run$1 = bind((function (__x) {
        return new_var(undefined, __x);
      }), (function (a) {
        return bind((function (__x) {
                      return negate(a, __x);
                    }), (function (b) {
                      return bind((function (__x) {
                                    return add(a, b, __x);
                                  }), (function (c) {
                                    return function (state) {
                                      return [
                                              c,
                                              state
                                            ];
                                    };
                                  }));
                    }));
      }));

var match$1 = run$1({
      next: 10
    });

console.log(match$1[0], "c final bind");

var CounterStateMonad = {
  $$return: $$return,
  bind: bind,
  new_var: new_var,
  negate: negate,
  add: add
};

export {
  log ,
  log2 ,
  CounterStateMonad ,
}
/*  Not a pure module */
