// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

Belt_Option.flatMap(5, (function (v1) {
        return Belt_Option.flatMap(undefined, (function (v2) {
                      return v1 + v2 | 0;
                    }));
      }));

function $$return(a, state) {
  return [
          a,
          state
        ];
}

function bind(t, f, state) {
  var match = Curry._1(t, state);
  var match$1 = Curry._2(f, match[0], match[1]);
  return [
          match$1[0],
          match$1[1]
        ];
}

function new_var(param, state) {
  var $$var = state.next;
  var state$1 = {
    next: state.next + 1 | 0
  };
  return [
          $$var,
          state$1
        ];
}

function negate($$var, state) {
  return [
          -$$var | 0,
          state
        ];
}

function add(var1, var2, state) {
  return [
          var1 + var2 | 0,
          state
        ];
}

function run(state) {
  console.log(state, "start");
  var match = new_var(undefined, state);
  var state$1 = match[1];
  var a = match[0];
  console.log([
        a,
        state$1
      ], "a");
  var match$1 = negate(a, state$1);
  var state$2 = match$1[1];
  var b = match$1[0];
  console.log([
        b,
        state$2
      ], "b");
  var match$2 = add(a, b, state$2);
  var state$3 = match$2[1];
  var c = match$2[0];
  console.log([
        c,
        state$3
      ], "c");
  return [
          c,
          state$3
        ];
}

var match = run({
      next: 10
    });

console.log(match[0], "c final imperative");

function run$1(param) {
  return bind((function (param) {
                return new_var(undefined, param);
              }), (function (a) {
                return function (param) {
                  return bind((function (param) {
                                return negate(a, param);
                              }), (function (b) {
                                return function (param) {
                                  return bind((function (param) {
                                                return add(a, b, param);
                                              }), (function (c) {
                                                return function (param) {
                                                  return [
                                                          c,
                                                          param
                                                        ];
                                                };
                                              }), param);
                                };
                              }), param);
                };
              }), param);
}

var match$1 = run$1({
      next: 10
    });

console.log(match$1[0], "c final bind");

var CounterStateMonad = {
  $$return: $$return,
  bind: bind,
  new_var: new_var,
  negate: negate,
  add: add
};

export {
  log ,
  log2 ,
  CounterStateMonad ,
}
/*  Not a pure module */
