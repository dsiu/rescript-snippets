// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function createEmailAddress(s) {
  var match = /^\S+@\S+\.\S+$/.exec(s);
  if (match !== null) {
    return /* EmailAddress */{
            _0: s
          };
  }
  
}

function createStateCode(s) {
  var s$p = s.toUpperCase();
  var match = Belt_List.has({
        hd: "AZ",
        tl: {
          hd: "CA",
          tl: {
            hd: "NY",
            tl: /* [] */0
          }
        }
      }, s$p, (function (a, b) {
          return a === b;
        }));
  if (match) {
    return /* StateCode */{
            _0: s$p
          };
  }
  
}

console.log(createStateCode("ca"));

console.log(createStateCode("ba"));

console.log(createEmailAddress("someone@mail.com"));

console.log(createEmailAddress("diudiu"));

function createEmailAddress2(s) {
  var match = /^\S+@\S+\.\S+$/.exec(s);
  if (match !== null) {
    return {
            TAG: /* Success */0,
            _0: /* EmailAddress */{
              _0: s
            }
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: "Email address must contain an @ sign"
          };
  }
}

console.log(createEmailAddress2("diudiu"));

function createEmailAddressWithContinuations(success, failure, s) {
  var match = /^\S+@\S+\.\S+$/.exec(s);
  if (match !== null) {
    return Curry._1(success, /* EmailAddress */{
                _0: s
              });
  } else {
    return Curry._1(failure, "Email address must contain an @ sign");
  }
}

function success(e) {
  return Caml_option.some(e);
}

function failure(param) {
  return Pervasives.failwith("bad email address");
}

console.log(createEmailAddressWithContinuations(success, failure, "someone@mail.com"));

function success$1(e) {
  return Caml_option.some(e);
}

function failure$1(param) {
  
}

console.log(createEmailAddressWithContinuations(success$1, failure$1, "someone@mail.com"));

function createEmail(param) {
  return createEmailAddressWithContinuations(success$1, failure$1, param);
}

console.log(createEmailAddress("someone@mail.com"), "with carry");

console.log(createEmailAddress("diudiu"), "with carry");

function create(s) {
  var match = /^\S+@\S+\.\S+$/.exec(s);
  if (match !== null) {
    return /* EmailAddress */{
            _0: s
          };
  }
  
}

function apply(f, e) {
  return Curry._1(f, e._0);
}

function value(e) {
  return e._0;
}

var EmailAddress = {
  create: create,
  apply: apply,
  value: value
};

var address1 = create("x@example.com");

if (address1 !== undefined) {
  console.log(address1._0, "is a valid email address");
}

exports.createEmailAddress = createEmailAddress;
exports.createStateCode = createStateCode;
exports.createEmailAddress2 = createEmailAddress2;
exports.createEmailAddressWithContinuations = createEmailAddressWithContinuations;
exports.success = success$1;
exports.failure = failure$1;
exports.createEmail = createEmail;
exports.EmailAddress = EmailAddress;
exports.address1 = address1;
/*  Not a pure module */
