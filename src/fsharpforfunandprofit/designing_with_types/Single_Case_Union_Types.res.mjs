// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Stdlib__Function from "@dsiu/rescript-stdlib-fp/src/Stdlib__Function.res.mjs";

function identity(prim) {
  return prim;
}

function createWithCont(success, failure, s) {
  let match = /^\S+@\S+\.\S+$/.exec(s);
  if (match !== null) {
    return success({
      TAG: "EmailAddress",
      _0: s
    });
  } else {
    return failure("Email address must contain an @ symbol");
  }
}

function create(s) {
  let success = e => Primitive_option.some(e);
  let failure = param => {};
  return createWithCont(success, failure, s);
}

function apply(f, e) {
  return f(e._0);
}

function value(e) {
  return e._0;
}

let EmailAddress = {
  createWithCont: createWithCont,
  create: create,
  apply: apply,
  value: value
};

function createWithCont$1(success, failure, s) {
  let match = /^\d{5}$/.exec(s);
  if (match !== null) {
    return success({
      TAG: "ZipCode",
      _0: s
    });
  } else {
    return failure("Zip code must ");
  }
}

function create$1(s) {
  let success = e => Primitive_option.some(e);
  let failure = param => {};
  return createWithCont$1(success, failure, s);
}

function apply$1(f, e) {
  return f(e._0);
}

function value$1(e) {
  return e._0;
}

let ZipCode = {
  createWithCont: createWithCont$1,
  create: create$1,
  apply: apply$1,
  value: value$1
};

function createWithCont$2(success, failure, s) {
  let s$p = s.toUpperCase();
  if (Belt_List.has({
      hd: "AZ",
      tl: {
        hd: "CA",
        tl: {
          hd: "NY",
          tl: /* [] */0
        }
      }
    }, s$p, Stdlib__Function.eq)) {
    return success({
      TAG: "StateCode",
      _0: s
    });
  } else {
    return failure("State is not in list");
  }
}

function create$2(s) {
  let success = e => Primitive_option.some(e);
  let failure = param => {};
  return createWithCont$2(success, failure, s);
}

function apply$2(f, e) {
  return f(e._0);
}

function value$2(e) {
  return e._0;
}

let StateCode = {
  createWithCont: createWithCont$2,
  create: create$2,
  apply: apply$2,
  value: value$2
};

let PersonalName = {};

let EmailContactInfo = {};

let PostalAddress = {};

let PostalContactInfo = {};

let Contact = {};

let eq = Stdlib__Function.eq;

export {
  identity,
  eq,
  EmailAddress,
  ZipCode,
  StateCode,
  PersonalName,
  EmailContactInfo,
  PostalAddress,
  PostalContactInfo,
  Contact,
}
/* No side effect */
