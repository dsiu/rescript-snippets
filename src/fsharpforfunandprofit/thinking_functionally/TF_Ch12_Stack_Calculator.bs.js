// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var FP_Utils = require("../../FP_Utils.bs.js");

var contents = {
  hd: 1.0,
  tl: {
    hd: 2.0,
    tl: {
      hd: 3.0,
      tl: /* [] */0
    }
  }
};

console.log(contents);

function push(contents, x) {
  return /* StackContents */{
          _0: {
            hd: x,
            tl: contents._0
          }
        };
}

var emptyStack = /* StackContents */{
  _0: /* [] */0
};

var stackWith1 = push(emptyStack, 1.0);

var stackWith2 = push(stackWith1, 2.0);

console.log(stackWith1);

console.log(stackWith2);

function one(__x) {
  return push(__x, 1.0);
}

function two(__x) {
  return push(__x, 2.0);
}

function three(__x) {
  return push(__x, 3.0);
}

function four(__x) {
  return push(__x, 4.0);
}

function five(__x) {
  return push(__x, 5.0);
}

var empty = /* StackContents */{
  _0: /* [] */0
};

var stackWith1$1 = push(empty, 1.0);

var stackWith2$1 = push(stackWith1$1, 2.0);

var stackWith3 = push(stackWith2$1, 3.0);

var result123 = push(push(push(empty, 1.0), 2.0), 3.0);

var result321 = push(push(push(empty, 3.0), 2.0), 1.0);

console.log(result123);

console.log(result321);

function pop(contents) {
  var contents$1 = contents._0;
  if (contents$1) {
    var newStack = /* StackContents */{
      _0: contents$1.tl
    };
    return [
            contents$1.hd,
            newStack
          ];
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var initialStack = push(push(empty, 1.0), 2.0);

var match = pop(initialStack);

var poppedStack = match[1];

var match$1 = pop(poppedStack);

function add_(stack) {
  var match = pop(stack);
  var match$1 = pop(match[1]);
  var result = match[0] + match$1[0];
  return push(match$1[1], result);
}

function mul_(stack) {
  var match = pop(stack);
  var match$1 = pop(match[1]);
  var result = match[0] * match$1[0];
  return push(match$1[1], result);
}

function binary(mathFn, stack) {
  var match = pop(stack);
  var match$1 = pop(match[1]);
  var z = Curry._2(mathFn, match$1[0], match[0]);
  return push(match$1[1], z);
}

function float_add(x, y) {
  return x + y;
}

function float_mul(x, y) {
  return x * y;
}

function float_sub(x, y) {
  return x - y;
}

function float_div(x, y) {
  return x / y;
}

function add(__x) {
  return binary(float_add, __x);
}

function mul(__x) {
  return binary(float_mul, __x);
}

function sub(__x) {
  return binary(float_sub, __x);
}

function div(__x) {
  return binary(float_div, __x);
}

console.log(binary(float_div, push(push(empty, 3.0), 2.0)), "threeDivTwo");

console.log(binary(float_sub, push(push(empty, 2.0), 5.0)), "twoSubtractFive");

console.log(binary(float_sub, push(binary(float_add, push(push(empty, 1.0), 2.0)), 3.0)), "oneAddTwoSubThree");

function unary(f, stack) {
  var match = pop(stack);
  return push(match[1], Curry._1(f, match[0]));
}

function neg(param) {
  return unary((function (x) {
                return 0.0 - x;
              }), param);
}

function square(param) {
  return unary((function (x) {
                return x * x;
              }), param);
}

console.log(neg(push(empty, 3.0)), "neg3");

console.log(square(push(empty, 2.0)), "square2");

function show(stack) {
  var match = pop(stack);
  console.log(match[0]);
  return stack;
}

function show2(stack, str) {
  var match = pop(stack);
  console.log(match[0], str);
  return stack;
}

var oneAddTwoSubThree = show2(binary(float_sub, push(binary(float_add, push(push(empty, 1.0), 2.0)), 3.0)), "oneAddTwoSubThree");

function dup(stack) {
  var match = pop(stack);
  return push(stack, match[0]);
}

function swap(stack) {
  var match = pop(stack);
  var match$1 = pop(match[1]);
  return push(push(match$1[1], match[0]), match$1[0]);
}

function drop(stack) {
  return pop(stack)[1];
}

show2(push(push(empty, 1.0), 2.0), "1,2");

show2(binary(float_add, push(show2(binary(float_add, push(push(empty, 1.0), 2.0)), "1+2"), 3.0)), "+3");

show2(binary(float_div, push(show2(binary(float_mul, push(show2(binary(float_add, push(push(empty, 1.0), 2.0)), "1+2"), 3.0)), "*3"), 2.0)), "/2");

function one_two_add(param) {
  return FP_Utils.compose((function (param) {
                return FP_Utils.compose(one, two, param);
              }), add, param);
}

function one_two_sub(param) {
  return FP_Utils.compose((function (param) {
                return FP_Utils.compose(one, two, param);
              }), sub, param);
}

show2(one_two_add(empty), "one_two_add");

show2(one_two_sub(empty), "one_two_sub");

function square$1(param) {
  return FP_Utils.compose(dup, mul, param);
}

show2(FP_Utils.compose(dup, mul, push(empty, 2.0)), "square");

function cube(param) {
  return FP_Utils.compose((function (param) {
                return FP_Utils.compose((function (param) {
                              return FP_Utils.compose(dup, dup, param);
                            }), mul, param);
              }), mul, param);
}

show2(cube(push(empty, 3.0)), "cube");

var sum_numbers_upto = FP_Utils.composeN([
      dup,
      one,
      add,
      mul,
      two,
      div
    ]);

show2(Curry._1(sum_numbers_upto, FP_Utils.compose(dup, mul, push(empty, 3.0))), "sum up to 9");

function composed_square(param) {
  return FP_Utils.compose(dup, mul, param);
}

var stackWith2$2 = push(empty, 2.0);

var twoSquared = binary(float_mul, dup(stackWith2$2));

function lambda_square(param) {
  return unary((function (x) {
                return x * x;
              }), param);
}

var newStack = /* StackContents */{
  _0: {
    hd: 1.0,
    tl: {
      hd: 2.0,
      tl: {
        hd: 3.0,
        tl: /* [] */0
      }
    }
  }
};

var popped1 = match[0];

var popped2 = match$1[0];

var poppedStack2 = match$1[1];

var threeDivTwo;

var twoSubtractFive;

var neg3;

var square2;

var start = empty;

exports.newStack = newStack;
exports.contents = contents;
exports.push = push;
exports.emptyStack = emptyStack;
exports.one = one;
exports.two = two;
exports.three = three;
exports.four = four;
exports.five = five;
exports.empty = empty;
exports.stackWith1 = stackWith1$1;
exports.stackWith3 = stackWith3;
exports.result123 = result123;
exports.result321 = result321;
exports.pop = pop;
exports.initialStack = initialStack;
exports.popped1 = popped1;
exports.poppedStack = poppedStack;
exports.popped2 = popped2;
exports.poppedStack2 = poppedStack2;
exports.add_ = add_;
exports.mul_ = mul_;
exports.binary = binary;
exports.float_add = float_add;
exports.float_mul = float_mul;
exports.float_sub = float_sub;
exports.float_div = float_div;
exports.add = add;
exports.mul = mul;
exports.sub = sub;
exports.div = div;
exports.threeDivTwo = threeDivTwo;
exports.twoSubtractFive = twoSubtractFive;
exports.unary = unary;
exports.neg = neg;
exports.neg3 = neg3;
exports.square2 = square2;
exports.show = show;
exports.show2 = show2;
exports.oneAddTwoSubThree = oneAddTwoSubThree;
exports.dup = dup;
exports.swap = swap;
exports.drop = drop;
exports.start = start;
exports.one_two_add = one_two_add;
exports.one_two_sub = one_two_sub;
exports.square = square$1;
exports.cube = cube;
exports.sum_numbers_upto = sum_numbers_upto;
exports.composed_square = composed_square;
exports.stackWith2 = stackWith2$2;
exports.twoSquared = twoSquared;
exports.lambda_square = lambda_square;
/*  Not a pure module */
