// Generated by ReScript, PLEASE EDIT WITH CARE


function evalWith5ThenAdd2(fn) {
  return fn(5) + 2 | 0;
}

function add1(x) {
  return x + 1 | 0;
}

console.log(evalWith5ThenAdd2(add1));

function times3(x) {
  return Math.imul(x, 3);
}

console.log(evalWith5ThenAdd2(times3));

function add(x, y) {
  return x + y | 0;
}

function add1$1(param) {
  return 1 + param | 0;
}

function add2(param) {
  return 2 + param | 0;
}

console.log(6);

console.log(7);

function evalWith5AsInt(fn) {
  return fn(5);
}

function evalWith5AsFloat(fn) {
  return fn(5);
}

function evalWith5AsString(fn) {
  return fn + "5";
}

function printInt(x) {
  console.log("x is " + String(x));
}

console.log("hello world");

function printHelloFn() {
  console.log("hello world");
}

console.log(printHelloFn);

console.log((console.log("hello world"), undefined));

function toString(x) {
  return String(x._0);
}

function onAStick(x) {
  return String(x._0) + " on a stick";
}

console.log(onAStick({
          TAG: "Ts_Int",
          _0: 1
        }));

console.log(onAStick({
          TAG: "Ts_Float",
          _0: 2.0
        }));

function multiParamFn(p1, p2, p3, p4) {
  
}

function intermediateFn1(param, param$1, param$2) {
  
}

function intermediateFn2(param, param$1) {
  return intermediateFn1(false, param, param$1);
}

function intermediateFn3(param) {
  return intermediateFn1(false, "hello", param);
}

var finalResult = intermediateFn1(false, "hello", 3.141);

var whatIsThis;

var printHello;

var a = [
  "hello",
  1
];

export {
  evalWith5ThenAdd2 ,
  times3 ,
  add ,
  add1$1 as add1,
  add2 ,
  evalWith5AsInt ,
  evalWith5AsFloat ,
  evalWith5AsString ,
  whatIsThis ,
  printInt ,
  printHello ,
  printHelloFn ,
  toString ,
  onAStick ,
  a ,
  multiParamFn ,
  intermediateFn1 ,
  intermediateFn2 ,
  intermediateFn3 ,
  finalResult ,
}
/*  Not a pure module */
