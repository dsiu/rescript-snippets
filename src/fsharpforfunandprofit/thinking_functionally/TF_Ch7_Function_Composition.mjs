// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";

function log(prim) {
  console.log(prim);
}

function compose(f, g, a) {
  return g(f(a));
}

function add(n, x) {
  return x + n | 0;
}

function times(n, x) {
  return Math.imul(x, n);
}

function add1Times2(param) {
  return compose((function (__x) {
                return __x + 1 | 0;
              }), (function (__x) {
                return (__x << 1);
              }), param);
}

function add5Times3(param) {
  return compose((function (__x) {
                return __x + 5 | 0;
              }), (function (__x) {
                return Math.imul(__x, 3);
              }), param);
}

var prim = add1Times2(1);

console.log(prim);

var prim$1 = add5Times3(2);

console.log(prim$1);

function twice(f) {
  return function (param) {
    return compose(f, f, param);
  };
}

function add1(__x) {
  return __x + 1 | 0;
}

function add1Twice(param) {
  return compose(add1, add1, param);
}

var prim$2 = Curry._1(add1Twice, 9);

console.log(prim$2);

function add1ThenMultiply(param) {
  return compose(add1, (function (__x) {
                return function (extra) {
                  return Math.imul(extra, __x);
                };
              }), param);
}

var prim$3 = add1ThenMultiply(2)(7);

console.log(prim$3);

function f(x, y, z) {
  return x + Math.imul(y, z) | 0;
}

function g(param) {
  return param[0] + Math.imul(param[1], param[2]) | 0;
}

console.log("f");

console.log(7);

console.log("g");

var prim$4 = g([
      1,
      2,
      3
    ]);

console.log(prim$4);

function h(x, y, z) {
  
}

function h1(param, param$1) {
  return h(1, param, param$1);
}

function h2(param) {
  return h(1, true, param);
}

var h3;

export {
  log ,
  compose ,
  add ,
  times ,
  add1Times2 ,
  add5Times3 ,
  twice ,
  add1 ,
  add1Twice ,
  add1ThenMultiply ,
  f ,
  g ,
  h ,
  h1 ,
  h2 ,
  h3 ,
}
/* prim Not a pure module */
