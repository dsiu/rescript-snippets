// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Relude_Function from "rescript-relude/src/Relude_Function.res.mjs";
import * as ReludeParse_Parser from "rescript-relude-parse/src/ReludeParse_Parser.res.mjs";
import * as Relude_List_Specializations from "rescript-relude/src/list/Relude_List_Specializations.res.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

let __x = ReludeParse_Parser.runParser("", ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof));

console.log("infix\n", __x);

let __x$1 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.anyDigit);

console.log("Pipe Op\n", __x$1);

let __x$2 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.anyDigit);

console.log("Normal Fn\n", __x$2);

let __x$3 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.map(prim => Number.parseInt(prim), ReludeParse_Parser.anyDigit));

console.log("map\n", __x$3);

let __x$4 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.Infix.$less$$great(prim => Number.parseInt(prim), ReludeParse_Parser.anyDigit));

console.log("map <$>\n", __x$4);

let __x$5 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.Infix.$less$$$great(ReludeParse_Parser.anyDigit, prim => Number.parseInt(prim)));

console.log("<#>\n", __x$5);

let __x$6 = ReludeParse_Parser.runParser("12", ReludeParse_Parser.tuple2(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit));

console.log("combine 2 parsers\n", __x$6);

let __x$7 = ReludeParse_Parser.runParser("12", ReludeParse_Parser.Infix.$less$caret$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit));

console.log("<^> tuple2\n", __x$7);

let __x$8 = ReludeParse_Parser.runParser("123", ReludeParse_Parser.tuple3(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit));

console.log("tuple3\n", __x$8);

let __x$9 = ReludeParse_Parser.runParser("12", ReludeParse_Parser.map2((a, b) => a + b | 0, ReludeParse_Parser.anyDigitAsInt, ReludeParse_Parser.anyDigitAsInt));

console.log("combine with map\n", __x$9);

let __x$10 = [
  ReludeParse_Parser.anyDigitAsInt,
  ReludeParse_Parser.anyDigitAsInt
];

let __x$11 = ReludeParse_Parser.runParser("12", ReludeParse_Parser.mapTuple2((a, b) => a + b | 0, __x$10));

console.log("mapTuple2\n", __x$11);

let __x$12 = ReludeParse_Parser.runParser("   3", ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.ws, ReludeParse_Parser.anyDigit));

console.log("*>\n", __x$12);

let __x$13 = ReludeParse_Parser.runParser("   3  ", ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.ws, ReludeParse_Parser.anyDigit), ReludeParse_Parser.ws), ReludeParse_Parser.eof));

console.log("*> <*\n", __x$13);

function add3(a, b, c) {
  return (a + b | 0) + c | 0;
}

let __x$14 = ReludeParse_Parser.runParser("123", ReludeParse_Parser.Infix.$less$star$great(ReludeParse_Parser.Infix.$less$star$great(ReludeParse_Parser.Infix.$less$$great(Relude_Function.uncurryFn3(add3), ReludeParse_Parser.anyDigitAsInt), ReludeParse_Parser.anyDigitAsInt), ReludeParse_Parser.anyDigitAsInt));

console.log("<$> and <*>\n", __x$14);

let __x$15 = ReludeParse_Parser.runParser("abcdef", ReludeParse_Parser.pure(3));

console.log("life a value\n", __x$15);

let __x$16 = ReludeParse_Parser.flatMap(count => ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof), ReludeParse_Parser.anyDigitAsInt);

let __x$17 = ReludeParse_Parser.runParser("3abc", ReludeParse_Parser.map(chars => Relude_List_Specializations.$$String.join(chars), __x$16));

console.log("sequencing\n", __x$17);

let __x$18 = ReludeParse_Parser.runParser("3abc", ReludeParse_Parser.Infix.$less$$$great(ReludeParse_Parser.Infix.$great$great$eq(ReludeParse_Parser.anyDigitAsInt, count => ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof)), Relude_List_Specializations.$$String.join));

console.log("sequencing with <#>\n", __x$18);

let __x$19 = ReludeParse_Parser.runParser("9abc", ReludeParse_Parser.Infix.$less$$$great(ReludeParse_Parser.Infix.$great$great$eq(ReludeParse_Parser.anyDigitAsInt, count => {
  if (count >= 5) {
    return ReludeParse_Parser.fail("The count cannot be >= 5");
  } else {
    return ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
  }
}), Relude_List_Specializations.$$String.join));

console.log("validation\n", __x$19);

let __x$20 = ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.filter(a => a > 5, ReludeParse_Parser.anyDigitAsInt), "Expected an int greater than 5");

console.log("customize error message\n", __x$20);

let __x$21 = ReludeParse_Parser.runParser("9", ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha));

console.log("alt <|>\n", __x$21);

let __x$22 = ReludeParse_Parser.runParser("a", ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha));

console.log("alt <|>\n", __x$22);

let __x$23 = ReludeParse_Parser.runParser("!", ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha));

console.log("alt <|>\n", __x$23);

let __x$24 = ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("a"), ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("b"), ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("c"), ReludeParse_Parser.str("d"))));

console.log("alt <|> many\n", __x$24);

let __x$25 = ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("a"), ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("b"), ReludeParse_Parser.str("c"))), "Expected a, b, or c");

console.log("alt with custom error\n", __x$25);

let __x$26 = ReludeParse_Parser.runParser("9a", ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.tries(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit)), ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha)));

console.log("tries to back-track\n", __x$26);

let __x$27 = ReludeParse_Parser.runParser("abc", ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.many1(ReludeParse_Parser.anyDigit), "Expected one or more digits"));

console.log("custom error\n", __x$27);

let __x$28 = ReludeParse_Parser.runParser("3", ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof));

console.log("check input consumed\n", __x$28);

let __x$29 = ReludeParse_Parser.runParser("3 ", ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof));

console.log("check input consumed\n", __x$29);

let tl1 = ReludeParse_Parser.tapLog(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha)));

let __x$30 = ReludeParse_Parser.runParser("12a", tl1);

console.log("Debugging - tagLog\n", __x$30);

let __x$31 = ReludeParse_Parser.runParser("b34", tl1);

console.log("Debugging - tagLog\n", __x$31);

let F;

let P;

export {
  log,
  log2,
  F,
  P,
  add3,
  tl1,
}
/* __x Not a pure module */
