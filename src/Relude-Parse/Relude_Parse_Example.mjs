// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as ReludeParse_Parser from "relude-parse/src/ReludeParse_Parser.mjs";
import * as Relude_List_Specializations from "relude/src/list/Relude_List_Specializations.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

((function (__x) {
        console.log("infix\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("", __x);
          })(ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof))));

((function (__x) {
        console.log("Pipe Op\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("1", __x);
          })(ReludeParse_Parser.anyDigit)));

((function (__x) {
        console.log("Normal Fn\n", __x);
      })(ReludeParse_Parser.runParser("1", ReludeParse_Parser.anyDigit)));

((function (__x) {
        console.log("map\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("1", __x);
          })((function (__x) {
                return ReludeParse_Parser.map(Caml_format.int_of_string, __x);
              })(ReludeParse_Parser.anyDigit))));

((function (__x) {
        console.log("map <$>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("1", __x);
          })(ReludeParse_Parser.Infix.$less$$great(Caml_format.int_of_string, ReludeParse_Parser.anyDigit))));

((function (__x) {
        console.log("<#>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("1", __x);
          })(ReludeParse_Parser.Infix.$less$$$great(ReludeParse_Parser.anyDigit, Caml_format.int_of_string))));

((function (__x) {
        console.log("combine 2 parsers\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("12", __x);
          })(ReludeParse_Parser.tuple2(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit))));

((function (__x) {
        console.log("<^> tuple2\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("12", __x);
          })(ReludeParse_Parser.Infix.$less$caret$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit))));

((function (__x) {
        console.log("tuple3\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("123", __x);
          })(ReludeParse_Parser.tuple3(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit))));

((function (__x) {
        console.log("combine with map\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("12", __x);
          })(ReludeParse_Parser.map2((function (a, b) {
                  return a + b | 0;
                }), ReludeParse_Parser.anyDigitAsInt, ReludeParse_Parser.anyDigitAsInt))));

((function (__x) {
        console.log("mapTuple2\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("12", __x);
          })((function (__x) {
                return ReludeParse_Parser.mapTuple2((function (a, b) {
                              return a + b | 0;
                            }), __x);
              })([
                ReludeParse_Parser.anyDigitAsInt,
                ReludeParse_Parser.anyDigitAsInt
              ]))));

((function (__x) {
        console.log("*>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("   3", __x);
          })(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.ws, ReludeParse_Parser.anyDigit))));

((function (__x) {
        console.log("*> <*\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("   3  ", __x);
          })(ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.ws, ReludeParse_Parser.anyDigit), ReludeParse_Parser.ws), ReludeParse_Parser.eof))));

function add3(a) {
  return function (b) {
    return function (c) {
      return (a + b | 0) + c | 0;
    };
  };
}

((function (__x) {
        console.log("<$> and <*>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("123", __x);
          })(ReludeParse_Parser.Infix.$less$star$great(ReludeParse_Parser.Infix.$less$star$great(ReludeParse_Parser.Infix.$less$$great(add3, ReludeParse_Parser.anyDigitAsInt), ReludeParse_Parser.anyDigitAsInt), ReludeParse_Parser.anyDigitAsInt))));

((function (__x) {
        console.log("life a value\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("abcdef", __x);
          })(ReludeParse_Parser.pure(3))));

((function (__x) {
        console.log("sequencing\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("3abc", __x);
          })((function (__x) {
                return ReludeParse_Parser.map((function (chars) {
                              return Relude_List_Specializations.$$String.join(chars);
                            }), __x);
              })((function (__x) {
                    return ReludeParse_Parser.flatMap((function (count) {
                                  return ReludeParse_Parser.Infix.$less$star((function (__x) {
                                                  return ReludeParse_Parser.times(count, __x);
                                                })(ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
                                }), __x);
                  })(ReludeParse_Parser.anyDigitAsInt)))));

((function (__x) {
        console.log("sequencing with <#>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("3abc", __x);
          })(ReludeParse_Parser.Infix.$less$$$great(ReludeParse_Parser.Infix.$great$great$eq(ReludeParse_Parser.anyDigitAsInt, (function (count) {
                      return ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
                    })), Relude_List_Specializations.$$String.join))));

((function (__x) {
        console.log("validation\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("9abc", __x);
          })(ReludeParse_Parser.Infix.$less$$$great(ReludeParse_Parser.Infix.$great$great$eq(ReludeParse_Parser.anyDigitAsInt, (function (count) {
                      if (count >= 5) {
                        return ReludeParse_Parser.fail("The count cannot be >= 5");
                      } else {
                        return ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
                      }
                    })), Relude_List_Specializations.$$String.join))));

((function (__x) {
        console.log("customize error message\n", __x);
      })(ReludeParse_Parser.Infix.$less$question$great((function (__x) {
                return ReludeParse_Parser.filter((function (a) {
                              return a > 5;
                            }), __x);
              })(ReludeParse_Parser.anyDigitAsInt), "Expected an int greater than 5")));

((function (__x) {
        console.log("alt <|>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("9", __x);
          })(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha))));

((function (__x) {
        console.log("alt <|>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("a", __x);
          })(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha))));

((function (__x) {
        console.log("alt <|>\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("!", __x);
          })(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha))));

((function (__x) {
        console.log("alt <|> many\n", __x);
      })(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("a"), ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("b"), ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("c"), ReludeParse_Parser.str("d"))))));

((function (__x) {
        console.log("alt with custom error\n", __x);
      })(ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("a"), ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.str("b"), ReludeParse_Parser.str("c"))), "Expected a, b, or c")));

((function (__x) {
        console.log("tries to back-track\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("9a", __x);
          })(ReludeParse_Parser.Infix.$less$pipe$great(ReludeParse_Parser.tries(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit)), ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha)))));

((function (__x) {
        console.log("custom error\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("abc", __x);
          })(ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.many1(ReludeParse_Parser.anyDigit), "Expected one or more digits"))));

((function (__x) {
        console.log("check input consumed\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("3", __x);
          })(ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof))));

((function (__x) {
        console.log("check input consumed\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("3 ", __x);
          })(ReludeParse_Parser.Infix.$less$star(ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof))));

var tl1 = ReludeParse_Parser.tapLog(ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.Infix.$star$great(ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha)));

((function (__x) {
        console.log("Debugging - tagLog\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("12a", __x);
          })(tl1)));

((function (__x) {
        console.log("Debugging - tagLog\n", __x);
      })((function (__x) {
            return ReludeParse_Parser.runParser("b34", __x);
          })(tl1)));

var P;

export {
  log ,
  log2 ,
  P ,
  add3 ,
  tl1 ,
}
/*  Not a pure module */
