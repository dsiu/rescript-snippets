// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as ReludeParse_Parser from "relude-parse/src/ReludeParse_Parser.mjs";
import * as Relude_List_Specializations from "relude/src/list/Relude_List_Specializations.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

var prim1 = ReludeParse_Parser.runParser("", Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof));

console.log("infix\n", prim1);

var prim1$1 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.anyDigit);

console.log("Pipe Op\n", prim1$1);

var prim1$2 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.anyDigit);

console.log("Normal Fn\n", prim1$2);

var prim1$3 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.map(Caml_format.int_of_string, ReludeParse_Parser.anyDigit));

console.log("map\n", prim1$3);

var prim1$4 = ReludeParse_Parser.runParser("1", Curry._2(ReludeParse_Parser.Infix.$less$$great, Caml_format.int_of_string, ReludeParse_Parser.anyDigit));

console.log("map <$>\n", prim1$4);

var prim1$5 = ReludeParse_Parser.runParser("1", ReludeParse_Parser.Infix.$less$hash$great(ReludeParse_Parser.anyDigit, Caml_format.int_of_string));

console.log("<#>\n", prim1$5);

var prim1$6 = ReludeParse_Parser.runParser("12", Curry._2(ReludeParse_Parser.tuple2, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit));

console.log("combine 2 parsers\n", prim1$6);

var prim1$7 = ReludeParse_Parser.runParser("12", Curry._2(ReludeParse_Parser.Infix.$less$caret$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit));

console.log("<^> tuple2\n", prim1$7);

var prim1$8 = ReludeParse_Parser.runParser("123", Curry._3(ReludeParse_Parser.tuple3, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit));

console.log("tuple3\n", prim1$8);

var prim1$9 = ReludeParse_Parser.runParser("12", Curry._3(ReludeParse_Parser.map2, (function (a, b) {
            return a + b | 0;
          }), ReludeParse_Parser.anyDigitAsInt, ReludeParse_Parser.anyDigitAsInt));

console.log("combine with map\n", prim1$9);

var __x = [
  ReludeParse_Parser.anyDigitAsInt,
  ReludeParse_Parser.anyDigitAsInt
];

var prim1$10 = ReludeParse_Parser.runParser("12", Curry._2(ReludeParse_Parser.mapTuple2, (function (a, b) {
            return a + b | 0;
          }), __x));

console.log("mapTuple2\n", prim1$10);

var prim1$11 = ReludeParse_Parser.runParser("   3", Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.ws, ReludeParse_Parser.anyDigit));

console.log("*>\n", prim1$11);

var prim1$12 = ReludeParse_Parser.runParser("   3  ", Curry._2(ReludeParse_Parser.Infix.$less$star, Curry._2(ReludeParse_Parser.Infix.$less$star, Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.ws, ReludeParse_Parser.anyDigit), ReludeParse_Parser.ws), ReludeParse_Parser.eof));

console.log("*> <*\n", prim1$12);

function add3(a, b, c) {
  return (a + b | 0) + c | 0;
}

var prim1$13 = ReludeParse_Parser.runParser("123", Curry._2(ReludeParse_Parser.Infix.$less$star$great, Curry._2(ReludeParse_Parser.Infix.$less$star$great, Curry._2(ReludeParse_Parser.Infix.$less$$great, add3, ReludeParse_Parser.anyDigitAsInt), ReludeParse_Parser.anyDigitAsInt), ReludeParse_Parser.anyDigitAsInt));

console.log("<$> and <*>\n", prim1$13);

var prim1$14 = ReludeParse_Parser.runParser("abcdef", ReludeParse_Parser.pure(3));

console.log("life a value\n", prim1$14);

var __x$1 = Curry._2(ReludeParse_Parser.flatMap, (function (count) {
        return Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
      }), ReludeParse_Parser.anyDigitAsInt);

var prim1$15 = ReludeParse_Parser.runParser("3abc", ReludeParse_Parser.map((function (chars) {
            return Curry._1(Relude_List_Specializations.$$String.join, chars);
          }), __x$1));

console.log("sequencing\n", prim1$15);

var prim1$16 = ReludeParse_Parser.runParser("3abc", ReludeParse_Parser.Infix.$less$hash$great(Curry._2(ReludeParse_Parser.Infix.$great$great$eq, ReludeParse_Parser.anyDigitAsInt, (function (count) {
                return Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
              })), Relude_List_Specializations.$$String.join));

console.log("sequencing with <#>\n", prim1$16);

var prim1$17 = ReludeParse_Parser.runParser("9abc", ReludeParse_Parser.Infix.$less$hash$great(Curry._2(ReludeParse_Parser.Infix.$great$great$eq, ReludeParse_Parser.anyDigitAsInt, (function (count) {
                if (count >= 5) {
                  return ReludeParse_Parser.fail("The count cannot be >= 5");
                } else {
                  return Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.times(count, ReludeParse_Parser.anyAlpha), ReludeParse_Parser.eof);
                }
              })), Relude_List_Specializations.$$String.join));

console.log("validation\n", prim1$17);

var prim1$18 = ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.filter((function (a) {
            return a > 5;
          }), ReludeParse_Parser.anyDigitAsInt), "Expected an int greater than 5");

console.log("customize error message\n", prim1$18);

var prim1$19 = ReludeParse_Parser.runParser("9", Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha));

console.log("alt <|>\n", prim1$19);

var prim1$20 = ReludeParse_Parser.runParser("a", Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha));

console.log("alt <|>\n", prim1$20);

var prim1$21 = ReludeParse_Parser.runParser("!", Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha));

console.log("alt <|>\n", prim1$21);

var prim1$22 = Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.str("a"), Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.str("b"), Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.str("c"), ReludeParse_Parser.str("d"))));

console.log("alt <|> many\n", prim1$22);

var prim1$23 = ReludeParse_Parser.Infix.$less$question$great(Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.str("a"), Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.str("b"), ReludeParse_Parser.str("c"))), "Expected a, b, or c");

console.log("alt with custom error\n", prim1$23);

var prim1$24 = ReludeParse_Parser.runParser("9a", Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, ReludeParse_Parser.tries(Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyDigit)), Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha)));

console.log("tries to back-track\n", prim1$24);

var prim1$25 = ReludeParse_Parser.runParser("abc", ReludeParse_Parser.Infix.$less$question$great(ReludeParse_Parser.many1(ReludeParse_Parser.anyDigit), "Expected one or more digits"));

console.log("custom error\n", prim1$25);

var prim1$26 = ReludeParse_Parser.runParser("3", Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof));

console.log("check input consumed\n", prim1$26);

var prim1$27 = ReludeParse_Parser.runParser("3 ", Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.anyDigit, ReludeParse_Parser.eof));

console.log("check input consumed\n", prim1$27);

var tl1 = ReludeParse_Parser.tapLog(Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.anyDigit, Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.anyDigit, ReludeParse_Parser.anyAlpha)));

var prim1$28 = ReludeParse_Parser.runParser("12a", tl1);

console.log("Debugging - tagLog\n", prim1$28);

var prim1$29 = ReludeParse_Parser.runParser("b34", tl1);

console.log("Debugging - tagLog\n", prim1$29);

var P;

export {
  log ,
  log2 ,
  P ,
  add3 ,
  tl1 ,
}
/* prim1 Not a pure module */
