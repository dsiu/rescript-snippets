// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Relude_StateT from "rescript-relude/src/Relude_StateT.res.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

let State = Relude_StateT.State.WithState({});

let map = State.Infix.$less$$great;

let voidLeft = State.Infix.$$great;

let flipMap = State.Infix.$less$$$great;

let applySecond = State.Infix.$star$great;

let bind = State.Infix.$great$great$eq;

function push(x) {
  return voidLeft(Relude_StateT.State.modify(xs => ({
    hd: x,
    tl: xs
  })), x);
}

let pop = bind(State.get, values => {
  if (values !== 0) {
    return voidLeft(State.put(values.tl), values.hd);
  } else {
    return voidLeft(State.put(/* [] */0), undefined);
  }
});

let Stack = {
  push: push,
  pop: pop
};

let __x = State.pure(2);

let result = State.runStateT(/* [] */0, __x);

console.log("pure", result);

let __x$1 = bind(State.pure(2), a => voidLeft(State.put({
  hd: a,
  tl: /* [] */0
}), a));

let result$1 = State.runStateT(/* [] */0, __x$1);

console.log("put", result$1);

let __x$2 = bind(push(1), param => push(2));

let result$2 = State.runStateT(/* [] */0, __x$2);

console.log("stack example 1 (push)", result$2);

let __x$3 = bind(push(1), param => bind(push(2), param => bind(push(3), param => pop)));

let result$3 = State.runStateT(/* [] */0, __x$3);

console.log("stack example 2 (push, pop)", result$3);

let __x$4 = bind(push(1), param => bind(push(1), param => bind(push(2), param => bind(push(3), param => bind(pop, param => bind(pop, param => bind(pop, param => bind(push(4), param => push(5)))))))));

let result$4 = State.runStateT(/* [] */0, __x$4);

console.log("stack example 3", result$4[0]);

console.log("stack example 3", result$4[1]);

let __x$5 = bind(push(1), param => bind(push(1), param => bind(push(2), param => bind(push(3), param => bind(pop, param => bind(pop, param => bind(pop, param => bind(push(4), param => flipMap(push(5), a => Math.imul(a, 100))))))))));

let result$5 = State.runStateT(/* [] */0, __x$5);

console.log("stack example 4", result$5[0]);

console.log("stack example 4", result$5[1]);

let __x$6 = applySecond(applySecond(push(1), push(2)), push(3));

let result$6 = State.runStateT(/* [] */0, __x$6);

let s = result$6[1];

let a = result$6[0];

console.log("*> loses state", a);

console.log("*> loses state", s);

let StateT;

export {
  log,
  log2,
  StateT,
  State,
  map,
  voidLeft,
  flipMap,
  applySecond,
  bind,
  Stack,
  result$6 as result,
  a,
  s,
}
/* State Not a pure module */
