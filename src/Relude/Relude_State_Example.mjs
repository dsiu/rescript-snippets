// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Relude_StateT from "relude/src/Relude_StateT.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

var State = Relude_StateT.State.WithState({});

var map = State.Infix.$less$$great;

var voidLeft = State.Infix.$$great;

var flipMap = State.Infix.$less$$$great;

var applySecond = State.Infix.$star$great;

var bind = State.Infix.$great$great$eq;

function push(x) {
  return Curry._2(voidLeft, Relude_StateT.State.modify(function (xs) {
                  return {
                          hd: x,
                          tl: xs
                        };
                }), x);
}

var pop = Curry._2(bind, State.get, (function (values) {
        if (values) {
          return Curry._2(voidLeft, Curry._1(State.put, values.tl), values.hd);
        } else {
          return Curry._2(voidLeft, Curry._1(State.put, /* [] */0), undefined);
        }
      }));

var Stack = {
  push: push,
  pop: pop
};

var __x = Curry._1(State.pure, 2);

var result = Curry._2(State.runStateT, /* [] */0, __x);

console.log("pure", result);

var __x$1 = Curry._2(bind, Curry._1(State.pure, 2), (function (a) {
        return Curry._2(voidLeft, Curry._1(State.put, {
                        hd: a,
                        tl: /* [] */0
                      }), a);
      }));

var result$1 = Curry._2(State.runStateT, /* [] */0, __x$1);

console.log("put", result$1);

var __x$2 = Curry._2(bind, push(1), (function (param) {
        return push(2);
      }));

var result$2 = Curry._2(State.runStateT, /* [] */0, __x$2);

console.log("stack example 1 (push)", result$2);

var __x$3 = Curry._2(bind, push(1), (function (param) {
        return Curry._2(bind, push(2), (function (param) {
                      return Curry._2(bind, push(3), (function (param) {
                                    return pop;
                                  }));
                    }));
      }));

var result$3 = Curry._2(State.runStateT, /* [] */0, __x$3);

console.log("stack example 2 (push, pop)", result$3);

var __x$4 = Curry._2(bind, push(1), (function (param) {
        return Curry._2(bind, push(1), (function (param) {
                      return Curry._2(bind, push(2), (function (param) {
                                    return Curry._2(bind, push(3), (function (param) {
                                                  return Curry._2(bind, pop, (function (param) {
                                                                return Curry._2(bind, pop, (function (param) {
                                                                              return Curry._2(bind, pop, (function (param) {
                                                                                            return Curry._2(bind, push(4), (function (param) {
                                                                                                          return push(5);
                                                                                                        }));
                                                                                          }));
                                                                            }));
                                                              }));
                                                }));
                                  }));
                    }));
      }));

var result$4 = Curry._2(State.runStateT, /* [] */0, __x$4);

console.log("stack example 3", result$4[0]);

console.log("stack example 3", result$4[1]);

var __x$5 = Curry._2(bind, push(1), (function (param) {
        return Curry._2(bind, push(1), (function (param) {
                      return Curry._2(bind, push(2), (function (param) {
                                    return Curry._2(bind, push(3), (function (param) {
                                                  return Curry._2(bind, pop, (function (param) {
                                                                return Curry._2(bind, pop, (function (param) {
                                                                              return Curry._2(bind, pop, (function (param) {
                                                                                            return Curry._2(bind, push(4), (function (param) {
                                                                                                          return Curry._2(flipMap, push(5), (function (a) {
                                                                                                                        return Math.imul(a, 100);
                                                                                                                      }));
                                                                                                        }));
                                                                                          }));
                                                                            }));
                                                              }));
                                                }));
                                  }));
                    }));
      }));

var result$5 = Curry._2(State.runStateT, /* [] */0, __x$5);

console.log("stack example 4", result$5[0]);

console.log("stack example 4", result$5[1]);

var __x$6 = Curry._2(applySecond, Curry._2(applySecond, push(1), push(2)), push(3));

var result$6 = Curry._2(State.runStateT, /* [] */0, __x$6);

var s = result$6[1];

var a = result$6[0];

console.log("*> loses state", a);

console.log("*> loses state", s);

var StateT;

export {
  log ,
  log2 ,
  StateT ,
  State ,
  map ,
  voidLeft ,
  flipMap ,
  applySecond ,
  bind ,
  Stack ,
  result$6 as result,
  a ,
  s ,
}
/* State Not a pure module */
