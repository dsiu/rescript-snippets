// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Relude_Function from "rescript-relude/src/Relude_Function.res.mjs";

function log(prim) {
  console.log(prim);
}

function formula(x, y) {
  return x + (y << 1) | 0;
}

let prim = 13;

console.log(prim);

let prim$1 = 11;

console.log(prim$1);

let prim$2 = Relude_Function.flip(formula, 5, 3);

console.log(prim$2);

function square(x) {
  return x * x | 0;
}

function double(x) {
  return (x << 1);
}

let prim$3 = Relude_Function.flipCompose(square, double, 3);

console.log(prim$3);

let prim$4 = Relude_Function.flipCompose(double, square, 3);

console.log(prim$4);

function square$1(x) {
  return x * x | 0;
}

function double$1(x) {
  return (x << 1);
}

function addFive(x) {
  return x + 5 | 0;
}

function formula$1(extra) {
  return Relude_Function.andThen(extra => Relude_Function.andThen(square$1, double$1, extra), addFive, extra);
}

let prim$5 = formula$1(3);

console.log(prim$5);

function showResult(n) {
  return x => "input " + String(n) + " yields " + x.toString();
}

function cube(x) {
  return (x * x | 0) * x | 0;
}

let prim$6 = Relude_Function.apply(showResult, cube)(5);

console.log(prim$6);

export {
  log,
  square$1 as square,
  double$1 as double,
  addFive,
  formula$1 as formula,
  showResult,
  cube,
}
/*  Not a pure module */
