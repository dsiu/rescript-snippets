// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";

function handle(n, divisor, label) {
  var match = Caml_int32.mod_(n, divisor);
  if (match !== 0) {
    return {
            TAG: /* Unhandled */0,
            _0: n
          };
  } else {
    return {
            TAG: /* Handled */1,
            _0: label
          };
  }
}

function ifUnhandledDo(result, f) {
  if (result.TAG === /* Unhandled */0) {
    return Curry._1(f, result._0);
  } else {
    return {
            TAG: /* Handled */1,
            _0: result._0
          };
  }
}

function lastStep(x) {
  if (x.TAG === /* Unhandled */0) {
    return String(x._0);
  } else {
    return x._0;
  }
}

function fizzbuzz(n) {
  return lastStep(ifUnhandledDo(ifUnhandledDo(handle(n, 15, "FizzBuzz"), (function (param) {
                        return handle(param, 3, "Fizz");
                      })), (function (param) {
                    return handle(param, 5, "Buzz");
                  })));
}

export {
  handle ,
  ifUnhandledDo ,
  lastStep ,
  fizzbuzz ,
  
}
/* No side effect */
