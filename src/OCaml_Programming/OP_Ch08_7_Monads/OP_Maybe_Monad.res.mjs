// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Primitive_int from "@rescript/runtime/lib/es6/Primitive_int.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function plus_opt(x, y) {
  if (x !== undefined && y !== undefined) {
    return x + y | 0;
  }
}

function minus_opt(x, y) {
  if (x !== undefined && y !== undefined) {
    return x - y | 0;
  }
}

function mult_opt(x, y) {
  if (x !== undefined && y !== undefined) {
    return x - y | 0;
  }
}

function div_opt(x, y) {
  if (x !== undefined && y !== undefined && y !== 0) {
    return Primitive_int.div(x, y);
  }
}

function propagate_none_try(op, x, y) {
  if (x !== undefined && y !== undefined) {
    return op(x, y);
  }
}

function propagate_none(op, x, y) {
  if (x !== undefined && y !== undefined) {
    return op(x, y);
  }
}

function wrap_output(op, x, y) {
  return op(x, y);
}

function $plus(extra, extra$1) {
  return propagate_none((extra, extra$1) => extra + extra$1 | 0, extra, extra$1);
}

function $neg(extra, extra$1) {
  return propagate_none((extra, extra$1) => extra - extra$1 | 0, extra, extra$1);
}

function $star(extra, extra$1) {
  return propagate_none((extra, extra$1) => extra * extra$1 | 0, extra, extra$1);
}

function $slash(extra, extra$1) {
  return propagate_none((x, y) => {
    if (y === 0) {
      return;
    } else {
      return Primitive_int.div(x, y);
    }
  }, extra, extra$1);
}

export {
  log,
  log2,
  plus_opt,
  minus_opt,
  mult_opt,
  div_opt,
  propagate_none_try,
  propagate_none,
  wrap_output,
  $plus,
  $neg,
  $star,
  $slash,
}
/* No side effect */
