// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function plus_opt(x, y) {
  if (x !== undefined && y !== undefined) {
    return x + y | 0;
  }
  
}

function minus_opt(x, y) {
  if (x !== undefined && y !== undefined) {
    return x - y | 0;
  }
  
}

function mult_opt(x, y) {
  if (x !== undefined && y !== undefined) {
    return x - y | 0;
  }
  
}

function div_opt(x, y) {
  if (x !== undefined && y !== undefined && y !== 0) {
    return Caml_int32.div(x, y);
  }
  
}

function propagate_none_try(op, x, y) {
  if (x !== undefined && y !== undefined) {
    return op(x, y);
  }
  
}

function propagate_none(op, x, y) {
  if (x !== undefined && y !== undefined) {
    return op(x, y);
  }
  
}

function wrap_output(op, x, y) {
  return op(x, y);
}

function $plus(extra, extra$1) {
  return propagate_none((function (extra, extra$1) {
                return wrap_output((function (prim0, prim1) {
                              return prim0 + prim1 | 0;
                            }), extra, extra$1);
              }), extra, extra$1);
}

function $neg(extra, extra$1) {
  return propagate_none((function (extra, extra$1) {
                return wrap_output((function (prim0, prim1) {
                              return prim0 - prim1 | 0;
                            }), extra, extra$1);
              }), extra, extra$1);
}

function $star(extra, extra$1) {
  return propagate_none((function (extra, extra$1) {
                return wrap_output((function (prim0, prim1) {
                              return Math.imul(prim0, prim1);
                            }), extra, extra$1);
              }), extra, extra$1);
}

function $slash(extra, extra$1) {
  return propagate_none((function (x, y) {
                if (y === 0) {
                  return ;
                } else {
                  return wrap_output(Caml_int32.div, x, y);
                }
              }), extra, extra$1);
}

export {
  log ,
  log2 ,
  plus_opt ,
  minus_opt ,
  mult_opt ,
  div_opt ,
  propagate_none_try ,
  propagate_none ,
  wrap_output ,
  $plus ,
  $neg ,
  $star ,
  $slash ,
}
/* No side effect */
