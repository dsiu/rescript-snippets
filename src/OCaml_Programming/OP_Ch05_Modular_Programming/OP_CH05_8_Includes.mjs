// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";

function elements(s) {
  return List.sort_uniq(Caml_obj.caml_compare, s);
}

var ListSet = {
  empty: /* [] */0,
  mem: List.mem,
  add: List.cons,
  elements: elements
};

function of_list(lst) {
  return List.fold_right(List.cons, lst, /* [] */0);
}

var ListSetExtended_ = {
  empty: /* [] */0,
  mem: List.mem,
  add: List.cons,
  elements: elements,
  of_list: of_list
};

function of_list$1(lst) {
  return List.fold_right(List.cons, lst, /* [] */0);
}

var ListSetExtended = {
  empty: /* [] */0,
  mem: List.mem,
  add: List.cons,
  elements: elements,
  of_list: of_list$1
};

function elements$1(s) {
  return List.sort_uniq(Caml_obj.caml_compare, s);
}

var ListSetImpl = {
  empty: /* [] */0,
  mem: List.mem,
  add: List.cons,
  elements: elements$1
};

function of_list$2(lst) {
  return lst;
}

var ListSetExtendedImpl = {
  empty: /* [] */0,
  mem: List.mem,
  add: List.cons,
  elements: elements$1,
  of_list: of_list$2
};

var Work_Around = {
  ListSetImpl: ListSetImpl,
  ListSet: ListSetImpl,
  ListSetExtendedImpl: ListSetExtendedImpl,
  ListSetExtended: ListSetExtendedImpl
};

function of_list$3(lst) {
  return List.fold_right(List.cons, lst, /* [] */0);
}

function elements$2(_l) {
  while(true) {
    var l = _l;
    if (!l) {
      return /* [] */0;
    }
    var t = l.tl;
    var h = l.hd;
    if (!List.mem(h, t)) {
      return {
              hd: h,
              tl: elements$2(t)
            };
    }
    _l = t;
    continue ;
  };
}

var ListSetExtendedImpl$1 = {
  empty: /* [] */0,
  mem: List.mem,
  add: List.cons,
  of_list: of_list$3,
  elements: elements$2
};

export {
  ListSet ,
  ListSetExtended_ ,
  ListSetExtended ,
  Work_Around ,
  ListSetExtendedImpl$1 as ListSetExtendedImpl,
  
}
/* No side effect */
