// Generated by ReScript, PLEASE EDIT WITH CARE


function mapOption$p(f, opt) {
  if (typeof opt !== "object") {
    return "None'";
  } else {
    return {
      TAG: "Some'",
      _0: f(opt._0)
    };
  }
}

let a = {
  TAG: "Some'",
  _0: 5
};

function inc(x) {
  return x + 1 | 0;
}

let c = mapOption$p(inc, a);

let d = mapOption$p(inc, "None'");

let myInt = 42;

let myFloat = 4.2;

let myBool = false;

let myStr = "Hello";

let List$p = {};

let myList = {
  TAG: "Con",
  _0: 1,
  _1: {
    TAG: "Con",
    _0: 2,
    _1: {
      TAG: "Con",
      _0: 3,
      _1: "Empty"
    }
  }
};

console.log(myList, "myList");

function length(t) {
  if (typeof t !== "object") {
    return 0;
  } else {
    return 1 + length(t._1) | 0;
  }
}

let HList = {
  length: length
};

let myHeteroList = {
  TAG: "Con",
  _0: 1,
  _1: {
    TAG: "Con",
    _0: 2.5,
    _1: {
      TAG: "Con",
      _0: false,
      _1: {
        TAG: "Con",
        _0: "abc",
        _1: {
          TAG: "Con",
          _0: 5,
          _1: {
            TAG: "Con",
            _0: {
              TAG: "Con",
              _0: 1,
              _1: {
                TAG: "Con",
                _0: "def",
                _1: "Empty"
              }
            },
            _1: "Empty"
          }
        }
      }
    }
  }
};

let myListLength = length(myHeteroList);

console.log(myHeteroList, "myHeteroList");

console.log(myListLength, "myListLength");

function length$1(t) {
  if (typeof t !== "object") {
    return 0;
  } else {
    return 1 + length$1(t._1) | 0;
  }
}

function head(t) {
  return t._0;
}

let SafeList = {
  length: length$1,
  head: head
};

let nonEmptyList = {
  TAG: "Con",
  _0: 1,
  _1: {
    TAG: "Con",
    _0: 2,
    _1: {
      TAG: "Con",
      _0: 3,
      _1: {
        TAG: "Con",
        _0: 4,
        _1: "Empty"
      }
    }
  }
};

let sizeOfNonEmptyList = length$1(nonEmptyList);

let firstElem = head(nonEmptyList);

console.log(sizeOfNonEmptyList, "sizeOfNonEmptyList");

console.log(firstElem, "firstElem");

let sizeOfEmptyList = length$1("Empty");

console.log("Empty", "emptyList");

console.log(sizeOfEmptyList, "sizeOfEmptyList");

let one = {
  TAG: "Succ",
  _0: "Zero"
};

let two = {
  TAG: "Succ",
  _0: {
    TAG: "Succ",
    _0: "Zero"
  }
};

let three = {
  TAG: "Succ",
  _0: two
};

console.log(one, "one");

console.log(two, "two");

function inc$1(pn) {
  return {
    TAG: "Succ",
    _0: pn
  };
}

let three_ = {
  TAG: "Succ",
  _0: {
    TAG: "Succ",
    _0: {
      TAG: "Succ",
      _0: "Zero"
    }
  }
};

let three__ = {
  TAG: "Succ",
  _0: two
};

function dec(pn) {
  return pn._0;
}

let one_ = {
  TAG: "Succ",
  _0: "Zero"
};

function isEqual(_i, _j) {
  while (true) {
    let j = _j;
    let i = _i;
    if (typeof i !== "object") {
      return typeof j !== "object";
    }
    if (typeof j !== "object") {
      return false;
    }
    _j = j._0;
    _i = i._0;
    continue;
  };
}

let isTwoEqualToOne = isEqual(one, two);

let isThreeEqualToSuccTwo = isEqual({
  TAG: "Succ",
  _0: two
}, three);

console.log(isTwoEqualToOne, "isTwoEqualToOne");

console.log(isThreeEqualToSuccTwo, "isThreeEqualToSuccTwo");

function $$eval(pn) {
  if (typeof pn !== "object") {
    return 0;
  } else {
    return 1 + $$eval(pn._0) | 0;
  }
}

let threeValue = $$eval(three);

let fourValue = $$eval({
  TAG: "Succ",
  _0: three
});

console.log(threeValue, "threeValue");

console.log(fourValue, "fourValue");

function length$2(l) {
  if (typeof l !== "object") {
    return 0;
  } else {
    return 1 + length$2(l._1) | 0;
  }
}

function pop(l) {
  return l._1;
}

function push(l, v) {
  if (typeof l !== "object") {
    return {
      TAG: "Con",
      _0: v,
      _1: "Empty"
    };
  } else {
    return {
      TAG: "Con",
      _0: v,
      _1: l
    };
  }
}

let LengthList = {
  length: length$2,
  pop: pop,
  push: push
};

let twoElemList = {
  TAG: "Con",
  _0: 1,
  _1: {
    TAG: "Con",
    _0: 2,
    _1: "Empty"
  }
};

let threeElemList = push(twoElemList, 3);

let oneElemList = pop(pop(threeElemList));

console.log(twoElemList, "twoElemList");

console.log(threeElemList, "threeElemList");

console.log(oneElemList, "oneElemList");

function push_(l, v) {
  return {
    hd: v,
    tl: /* [] */0
  };
}

let b = "None'";

let emptyList = "Empty";

export {
  mapOption$p,
  a,
  b,
  c,
  d,
  myInt,
  myFloat,
  myBool,
  myStr,
  List$p,
  myList,
  HList,
  myHeteroList,
  myListLength,
  SafeList,
  nonEmptyList,
  sizeOfNonEmptyList,
  firstElem,
  emptyList,
  sizeOfEmptyList,
  one,
  two,
  three,
  inc$1 as inc,
  three_,
  three__,
  dec,
  one_,
  isEqual,
  isTwoEqualToOne,
  isThreeEqualToSuccTwo,
  $$eval,
  threeValue,
  fourValue,
  LengthList,
  twoElemList,
  threeElemList,
  oneElemList,
  push_,
}
/* c Not a pure module */
