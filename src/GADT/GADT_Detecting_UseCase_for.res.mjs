// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";

function $$eval(_expr) {
  while (true) {
    let expr = _expr;
    switch (expr.TAG) {
      case "Value" :
        return expr._0;
      case "If" :
        let match = $$eval(expr._0);
        if (match.TAG !== "Bool") {
          return Pervasives.failwith("Invalid AST");
        }
        if (match._0) {
          _expr = expr._1;
          continue;
        }
        _expr = expr._2;
        continue;
      case "Eq" :
        let match$1 = $$eval(expr._0);
        let match$2 = $$eval(expr._1);
        if (match$1.TAG === "Bool" || match$2.TAG === "Bool") {
          return Pervasives.failwith("Invalid AST");
        } else {
          return {
            TAG: "Bool",
            _0: match$1._0 === match$2._0
          };
        }
      case "Lt" :
        let match$3 = $$eval(expr._0);
        let match$4 = $$eval(expr._1);
        if (match$3.TAG === "Bool" || match$4.TAG === "Bool") {
          return Pervasives.failwith("Invalid AST");
        } else {
          return {
            TAG: "Bool",
            _0: match$3._0 < match$4._0
          };
        }
    }
  };
}

function eval_int(value) {
  if (value.TAG === "Bool") {
    return Pervasives.failwith("Got Bool, expected Int");
  } else {
    return value._0;
  }
}

function eval_bool(value) {
  if (value.TAG === "Bool") {
    return value._0;
  } else {
    return Pervasives.failwith("Got Int, expected Bool");
  }
}

let ADTs = {
  $$eval: $$eval,
  eval_int: eval_int,
  eval_bool: eval_bool
};

console.log($$eval({
  TAG: "If",
  _0: {
    TAG: "Lt",
    _0: {
      TAG: "Value",
      _0: {
        TAG: "Int",
        _0: 2
      }
    },
    _1: {
      TAG: "Value",
      _0: {
        TAG: "Int",
        _0: 4
      }
    }
  },
  _1: {
    TAG: "Value",
    _0: {
      TAG: "Int",
      _0: 42
    }
  },
  _2: {
    TAG: "Value",
    _0: {
      TAG: "Int",
      _0: 0
    }
  }
}));

function $$eval$1(_expr) {
  while (true) {
    let expr = _expr;
    switch (expr.TAG) {
      case "Value" :
        return expr._0._0;
      case "If" :
        if ($$eval$1(expr._0)) {
          _expr = expr._1;
          continue;
        }
        _expr = expr._2;
        continue;
      case "Eq" :
        return Primitive_object.equal($$eval$1(expr._0), $$eval$1(expr._1));
      case "Lt" :
        return $$eval$1(expr._0) < $$eval$1(expr._1);
    }
  };
}

let GADT = {
  $$eval: $$eval$1
};

console.log($$eval$1({
  TAG: "If",
  _0: {
    TAG: "Eq",
    _0: {
      TAG: "Value",
      _0: {
        TAG: "Int",
        _0: 2
      }
    },
    _1: {
      TAG: "Value",
      _0: {
        TAG: "Int",
        _0: 2
      }
    }
  },
  _1: {
    TAG: "Value",
    _0: {
      TAG: "Int",
      _0: 42
    }
  },
  _2: {
    TAG: "Value",
    _0: {
      TAG: "Int",
      _0: 12
    }
  }
}));

console.log($$eval$1({
  TAG: "If",
  _0: {
    TAG: "Eq",
    _0: {
      TAG: "Value",
      _0: {
        TAG: "Int",
        _0: 2
      }
    },
    _1: {
      TAG: "Value",
      _0: {
        TAG: "Int",
        _0: 2
      }
    }
  },
  _1: {
    TAG: "Value",
    _0: {
      TAG: "Bool",
      _0: true
    }
  },
  _2: {
    TAG: "Value",
    _0: {
      TAG: "Bool",
      _0: false
    }
  }
}));

export {
  ADTs,
  GADT,
}
/*  Not a pure module */
